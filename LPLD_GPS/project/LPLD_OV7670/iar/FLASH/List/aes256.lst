###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        23/Apr/2015  14:23:09
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  G:\test\LPLD_OSKinetis_V3_now02\lib\Security\aes256.c
#    Command line =  
#        G:\test\LPLD_OSKinetis_V3_now02\lib\Security\aes256.c -D LPLD_K60 -lCN
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\
#        -lB
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\ -o
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        E:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\app\ -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\CPU\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\common\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\HW\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\FatFs\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\FatFs\option\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\common\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\driver\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\descriptor\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\class\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\Security\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\SQC\
#        -Ol -I E:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\aes256.lst
#    Object file  =  
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\Obj\aes256.o
#
###############################################################################

G:\test\LPLD_OSKinetis_V3_now02\lib\Security\aes256.c
      1          /*  
      2          *   Byte-oriented AES-256 implementation.
      3          *   All lookup tables replaced with 'on the fly' calculations. 
      4          *
      5          *   Copyright (c) 2007 Ilya O. Levin, http://www.literatecode.com
      6          *
      7          *   Permission to use, copy, modify, and distribute this software for any
      8          *   purpose with or without fee is hereby granted, provided that the above
      9          *   copyright notice and this permission notice appear in all copies.
     10          *
     11          *   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
     12          *   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
     13          *   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
     14          *   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
     15          *   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
     16          *   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
     17          *   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
     18          */
     19          #include "aes256.h"
     20          
     21          #define F(x)   (((x)<<1) ^ ((((x)>>7) & 1) * 0x1b))
     22          #define FD(x)  (((x) >> 1) ^ (((x) & 1) ? 0x8d : 0))
     23          
     24          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
     25          uint8_t gf_alog(uint8_t x) // calculate anti-logarithm gen 3
     26          {
     27              uint8_t atb = 1, z;
   \                     gf_alog: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xE006             B.N      ??gf_alog_0
     28          
     29              while (x--) {z = atb; atb <<= 1; if (z & 0x80) atb^= 0x1b; atb ^= z;}
   \                     ??gf_alog_1: (+1)
   \   00000004   0x000A             MOVS     R2,R1
   \   00000006   0x0049             LSLS     R1,R1,#+1
   \   00000008   0x0613             LSLS     R3,R2,#+24
   \   0000000A   0xD501             BPL.N    ??gf_alog_2
   \   0000000C   0xF091 0x011B      EORS     R1,R1,#0x1B
   \                     ??gf_alog_2: (+1)
   \   00000010   0x4051             EORS     R1,R2,R1
   \                     ??gf_alog_0: (+1)
   \   00000012   0x0002             MOVS     R2,R0
   \   00000014   0x1E50             SUBS     R0,R2,#+1
   \   00000016   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   0x2A00             CMP      R2,#+0
   \   0000001A   0xD1F3             BNE.N    ??gf_alog_1
     30          
     31              return atb;
   \   0000001C   0x0008             MOVS     R0,R1
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x4770             BX       LR               ;; return
     32          } /* gf_alog */
     33          
     34          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
     35          uint8_t gf_log(uint8_t x) // calculate logarithm gen 3
     36          {
   \                     gf_log: (+1)
   \   00000000   0xB410             PUSH     {R4}
     37              uint8_t atb = 1, i = 0, z;
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x2100             MOVS     R1,#+0
     38          
     39              do {
     40                  if (atb == x) break;
   \                     ??gf_log_0: (+1)
   \   00000006   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x4282             CMP      R2,R0
   \   0000000C   0xD00B             BEQ.N    ??gf_log_1
     41                  z = atb; atb <<= 1; if (z & 0x80) atb^= 0x1b; atb ^= z;
   \                     ??gf_log_2: (+1)
   \   0000000E   0x0013             MOVS     R3,R2
   \   00000010   0x0052             LSLS     R2,R2,#+1
   \   00000012   0x061C             LSLS     R4,R3,#+24
   \   00000014   0xD501             BPL.N    ??gf_log_3
   \   00000016   0xF092 0x021B      EORS     R2,R2,#0x1B
   \                     ??gf_log_3: (+1)
   \   0000001A   0x405A             EORS     R2,R3,R2
     42              } while (++i > 0);
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
   \   0000001E   0x000B             MOVS     R3,R1
   \   00000020   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000022   0x2B00             CMP      R3,#+0
   \   00000024   0xD1EF             BNE.N    ??gf_log_0
     43          
     44              return i;
   \                     ??gf_log_1: (+1)
   \   00000026   0x0008             MOVS     R0,R1
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xBC10             POP      {R4}
   \   0000002C   0x4770             BX       LR               ;; return
     45          } /* gf_log */
     46          
     47          
     48          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
     49          uint8_t gf_mulinv(uint8_t x) // calculate multiplicative inverse
     50          {
   \                     gf_mulinv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     51              return (x) ? gf_alog(255 - gf_log(x)) : 0;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD008             BEQ.N    ??gf_mulinv_0
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       gf_log
   \   0000000E   0xF1D0 0x00FF      RSBS     R0,R0,#+255
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       gf_alog
   \   00000018   0xE000             B.N      ??gf_mulinv_1
   \                     ??gf_mulinv_0: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??gf_mulinv_1: (+1)
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xBD02             POP      {R1,PC}          ;; return
     52          } /* gf_mulinv */
     53          
     54          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
     55          uint8_t rj_sbox(uint8_t x)
     56          {
   \                     rj_sbox: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     57              uint8_t y, sb;
     58          
     59              sb = y = gf_mulinv(x);
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x.... 0x....      BL       gf_mulinv
   \   00000008   0x0001             MOVS     R1,R0
     60              y = (y<<1)|(y>>7); sb ^= y;  y = (y<<1)|(y>>7); sb ^= y; 
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x09C2             LSRS     R2,R0,#+7
   \   0000000E   0xEA52 0x0040      ORRS     R0,R2,R0, LSL #+1
   \   00000012   0x4041             EORS     R1,R0,R1
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x09C2             LSRS     R2,R0,#+7
   \   00000018   0xEA52 0x0040      ORRS     R0,R2,R0, LSL #+1
   \   0000001C   0x4041             EORS     R1,R0,R1
     61              y = (y<<1)|(y>>7); sb ^= y;  y = (y<<1)|(y>>7); sb ^= y;
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x09C2             LSRS     R2,R0,#+7
   \   00000022   0xEA52 0x0040      ORRS     R0,R2,R0, LSL #+1
   \   00000026   0x4041             EORS     R1,R0,R1
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x09C2             LSRS     R2,R0,#+7
   \   0000002C   0xEA52 0x0040      ORRS     R0,R2,R0, LSL #+1
   \   00000030   0x4041             EORS     R1,R0,R1
     62          
     63              return (sb ^ 0x63);
   \   00000032   0xF091 0x0063      EORS     R0,R1,#0x63
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0xBD02             POP      {R1,PC}          ;; return
     64          } /* rj_sbox */
     65          
     66          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
     67          uint8_t rj_xtime(uint8_t x) 
     68          {
     69              return (x & 0x80) ? ((x << 1) ^ 0x1b) : (x << 1);
   \                     rj_xtime: (+1)
   \   00000000   0x0601             LSLS     R1,R0,#+24
   \   00000002   0xD503             BPL.N    ??rj_xtime_0
   \   00000004   0x0040             LSLS     R0,R0,#+1
   \   00000006   0xF090 0x001B      EORS     R0,R0,#0x1B
   \   0000000A   0xE000             B.N      ??rj_xtime_1
   \                     ??rj_xtime_0: (+1)
   \   0000000C   0x0040             LSLS     R0,R0,#+1
   \                     ??rj_xtime_1: (+1)
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x4770             BX       LR               ;; return
     70          } /* rj_xtime */
     71          
     72          
     73          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
     74          void aes_subBytes(uint8_t *buf)
     75          {
   \                     aes_subBytes: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     76              register uint8_t i = 16;
   \   00000004   0x2510             MOVS     R5,#+16
   \   00000006   0xE005             B.N      ??aes_subBytes_0
     77              while (i--) buf[i] = rj_sbox(buf[i]);
   \                     ??aes_subBytes_1: (+1)
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x5D28             LDRB     R0,[R5, R4]
   \   0000000C   0x.... 0x....      BL       rj_sbox
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0x5528             STRB     R0,[R5, R4]
   \                     ??aes_subBytes_0: (+1)
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x1E45             SUBS     R5,R0,#+1
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD1F4             BNE.N    ??aes_subBytes_1
     78          } /* aes_subBytes */
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     79          
     80          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
     81          void aes_subBytes_inv(uint8_t *buf)
     82          {
   \                     aes_subBytes_inv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     83              register uint8_t i = 16, j;
   \   00000004   0x2510             MOVS     R5,#+16
   \   00000006   0xE001             B.N      ??aes_subBytes_inv_0
     84              while (i--) 
     85              {
     86                  j = 0; do { if (rj_sbox(j) == buf[i]) {buf[i] = j; break;} } while (++j);
   \                     ??aes_subBytes_inv_1: (+1)
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x552E             STRB     R6,[R5, R4]
   \                     ??aes_subBytes_inv_0: (+1)
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0x1E45             SUBS     R5,R0,#+1
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD00E             BEQ.N    ??aes_subBytes_inv_2
   \   00000016   0x2600             MOVS     R6,#+0
   \                     ??aes_subBytes_inv_3: (+1)
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       rj_sbox
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x5D29             LDRB     R1,[R5, R4]
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD0EF             BEQ.N    ??aes_subBytes_inv_1
   \   00000028   0x1C76             ADDS     R6,R6,#+1
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD1F2             BNE.N    ??aes_subBytes_inv_3
   \   00000032   0xE7EB             B.N      ??aes_subBytes_inv_0
     87              }
     88          } /* aes_subBytes_inv */
   \                     ??aes_subBytes_inv_2: (+1)
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
     89          
     90          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
     91          void aes_addRoundKey(uint8_t *buf, uint8_t *key)
     92          {
   \                     aes_addRoundKey: (+1)
   \   00000000   0xB410             PUSH     {R4}
     93              register uint8_t i = 16;
   \   00000002   0x2210             MOVS     R2,#+16
   \   00000004   0xE006             B.N      ??aes_addRoundKey_0
     94              while (i--) buf[i] ^= key[i];
   \                     ??aes_addRoundKey_1: (+1)
   \   00000006   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   0x5C13             LDRB     R3,[R2, R0]
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x5C54             LDRB     R4,[R2, R1]
   \   0000000E   0x4063             EORS     R3,R4,R3
   \   00000010   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000012   0x5413             STRB     R3,[R2, R0]
   \                     ??aes_addRoundKey_0: (+1)
   \   00000014   0x0013             MOVS     R3,R2
   \   00000016   0x1E5A             SUBS     R2,R3,#+1
   \   00000018   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001A   0x2B00             CMP      R3,#+0
   \   0000001C   0xD1F3             BNE.N    ??aes_addRoundKey_1
     95          } /* aes_addRoundKey */
   \   0000001E   0xBC10             POP      {R4}
   \   00000020   0x4770             BX       LR               ;; return
     96          
     97          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
     98          void aes_addRoundKey_cpy(uint8_t *buf, uint8_t *key, uint8_t *cpk)
     99          {
   \                     aes_addRoundKey_cpy: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    100              register uint8_t i = 16;
   \   00000002   0x2310             MOVS     R3,#+16
   \   00000004   0xE00E             B.N      ??aes_addRoundKey_cpy_0
    101              while (i--)  buf[i] ^= (cpk[i] = key[i]), cpk[16+i] = key[16 + i];
   \                     ??aes_addRoundKey_cpy_1: (+1)
   \   00000006   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000008   0x5C5C             LDRB     R4,[R3, R1]
   \   0000000A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000C   0x549C             STRB     R4,[R3, R2]
   \   0000000E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000010   0x5C1D             LDRB     R5,[R3, R0]
   \   00000012   0x406C             EORS     R4,R4,R5
   \   00000014   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000016   0x541C             STRB     R4,[R3, R0]
   \   00000018   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001A   0x185C             ADDS     R4,R3,R1
   \   0000001C   0x7C24             LDRB     R4,[R4, #+16]
   \   0000001E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000020   0x189D             ADDS     R5,R3,R2
   \   00000022   0x742C             STRB     R4,[R5, #+16]
   \                     ??aes_addRoundKey_cpy_0: (+1)
   \   00000024   0x001C             MOVS     R4,R3
   \   00000026   0x1E63             SUBS     R3,R4,#+1
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C00             CMP      R4,#+0
   \   0000002C   0xD1EB             BNE.N    ??aes_addRoundKey_cpy_1
    102          } /* aes_addRoundKey_cpy */
   \   0000002E   0xBC30             POP      {R4,R5}
   \   00000030   0x4770             BX       LR               ;; return
    103          
    104          
    105          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
    106          void aes_shiftRows(uint8_t *buf)
    107          {
    108              register uint8_t i, j; /* to make it potentially parallelable :) */
    109          
    110              i = buf[1]; buf[1] = buf[5]; buf[5] = buf[9]; buf[9] = buf[13]; buf[13] = i;
   \                     aes_shiftRows: (+1)
   \   00000000   0x7841             LDRB     R1,[R0, #+1]
   \   00000002   0x7942             LDRB     R2,[R0, #+5]
   \   00000004   0x7042             STRB     R2,[R0, #+1]
   \   00000006   0x7A42             LDRB     R2,[R0, #+9]
   \   00000008   0x7142             STRB     R2,[R0, #+5]
   \   0000000A   0x7B42             LDRB     R2,[R0, #+13]
   \   0000000C   0x7242             STRB     R2,[R0, #+9]
   \   0000000E   0x7341             STRB     R1,[R0, #+13]
    111              i = buf[10]; buf[10] = buf[2]; buf[2] = i;
   \   00000010   0x7A81             LDRB     R1,[R0, #+10]
   \   00000012   0x7882             LDRB     R2,[R0, #+2]
   \   00000014   0x7282             STRB     R2,[R0, #+10]
   \   00000016   0x7081             STRB     R1,[R0, #+2]
    112              j = buf[3]; buf[3] = buf[15]; buf[15] = buf[11]; buf[11] = buf[7]; buf[7] = j;
   \   00000018   0x78C1             LDRB     R1,[R0, #+3]
   \   0000001A   0x7BC2             LDRB     R2,[R0, #+15]
   \   0000001C   0x70C2             STRB     R2,[R0, #+3]
   \   0000001E   0x7AC2             LDRB     R2,[R0, #+11]
   \   00000020   0x73C2             STRB     R2,[R0, #+15]
   \   00000022   0x79C2             LDRB     R2,[R0, #+7]
   \   00000024   0x72C2             STRB     R2,[R0, #+11]
   \   00000026   0x71C1             STRB     R1,[R0, #+7]
    113              j = buf[14]; buf[14] = buf[6]; buf[6]  = j;
   \   00000028   0x7B81             LDRB     R1,[R0, #+14]
   \   0000002A   0x7982             LDRB     R2,[R0, #+6]
   \   0000002C   0x7382             STRB     R2,[R0, #+14]
   \   0000002E   0x7181             STRB     R1,[R0, #+6]
    114          
    115          } /* aes_shiftRows */
   \   00000030   0x4770             BX       LR               ;; return
    116          
    117          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
    118          void aes_shiftRows_inv(uint8_t *buf)
    119          {
    120              register uint8_t i, j; /* same as above :) */
    121          
    122              i = buf[1]; buf[1] = buf[13]; buf[13] = buf[9]; buf[9] = buf[5]; buf[5] = i;
   \                     aes_shiftRows_inv: (+1)
   \   00000000   0x7841             LDRB     R1,[R0, #+1]
   \   00000002   0x7B42             LDRB     R2,[R0, #+13]
   \   00000004   0x7042             STRB     R2,[R0, #+1]
   \   00000006   0x7A42             LDRB     R2,[R0, #+9]
   \   00000008   0x7342             STRB     R2,[R0, #+13]
   \   0000000A   0x7942             LDRB     R2,[R0, #+5]
   \   0000000C   0x7242             STRB     R2,[R0, #+9]
   \   0000000E   0x7141             STRB     R1,[R0, #+5]
    123              i = buf[2]; buf[2] = buf[10]; buf[10] = i;
   \   00000010   0x7881             LDRB     R1,[R0, #+2]
   \   00000012   0x7A82             LDRB     R2,[R0, #+10]
   \   00000014   0x7082             STRB     R2,[R0, #+2]
   \   00000016   0x7281             STRB     R1,[R0, #+10]
    124              j = buf[3]; buf[3] = buf[7]; buf[7] = buf[11]; buf[11] = buf[15]; buf[15] = j;
   \   00000018   0x78C1             LDRB     R1,[R0, #+3]
   \   0000001A   0x79C2             LDRB     R2,[R0, #+7]
   \   0000001C   0x70C2             STRB     R2,[R0, #+3]
   \   0000001E   0x7AC2             LDRB     R2,[R0, #+11]
   \   00000020   0x71C2             STRB     R2,[R0, #+7]
   \   00000022   0x7BC2             LDRB     R2,[R0, #+15]
   \   00000024   0x72C2             STRB     R2,[R0, #+11]
   \   00000026   0x73C1             STRB     R1,[R0, #+15]
    125              j = buf[6]; buf[6] = buf[14]; buf[14] = j;
   \   00000028   0x7981             LDRB     R1,[R0, #+6]
   \   0000002A   0x7B82             LDRB     R2,[R0, #+14]
   \   0000002C   0x7182             STRB     R2,[R0, #+6]
   \   0000002E   0x7381             STRB     R1,[R0, #+14]
    126          
    127          } /* aes_shiftRows_inv */
   \   00000030   0x4770             BX       LR               ;; return
    128          
    129          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
    130          void aes_mixColumns(uint8_t *buf)
    131          {
   \                     aes_mixColumns: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
    132              register uint8_t i, a, b, c, d, e;
    133          
    134              for (i = 0; i < 16; i += 4)
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xE04D             B.N      ??aes_mixColumns_0
    135              {
    136                  a = buf[i]; b = buf[i + 1]; c = buf[i + 2]; d = buf[i + 3];
   \                     ??aes_mixColumns_1: (+1)
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x5D2E             LDRB     R6,[R5, R4]
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x1928             ADDS     R0,R5,R4
   \   00000012   0x7847             LDRB     R7,[R0, #+1]
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x1928             ADDS     R0,R5,R4
   \   00000018   0xF890 0x8002      LDRB     R8,[R0, #+2]
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x1928             ADDS     R0,R5,R4
   \   00000020   0xF890 0x9003      LDRB     R9,[R0, #+3]
    137                  e = a ^ b ^ c ^ d;
   \   00000024   0xEA97 0x0006      EORS     R0,R7,R6
   \   00000028   0xEA98 0x0000      EORS     R0,R8,R0
   \   0000002C   0xEA99 0x0A00      EORS     R10,R9,R0
    138                  buf[i] ^= e ^ rj_xtime(a^b);   buf[i+1] ^= e ^ rj_xtime(b^c);
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0xF815 0xB004      LDRB     R11,[R5, R4]
   \   00000036   0xEA97 0x0006      EORS     R0,R7,R6
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x.... 0x....      BL       rj_xtime
   \   00000040   0xEA90 0x000A      EORS     R0,R0,R10
   \   00000044   0xEA90 0x000B      EORS     R0,R0,R11
   \   00000048   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004A   0x5528             STRB     R0,[R5, R4]
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x1928             ADDS     R0,R5,R4
   \   00000050   0xF890 0xB001      LDRB     R11,[R0, #+1]
   \   00000054   0xEA98 0x0007      EORS     R0,R8,R7
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x.... 0x....      BL       rj_xtime
   \   0000005E   0xEA90 0x000A      EORS     R0,R0,R10
   \   00000062   0xEA90 0x000B      EORS     R0,R0,R11
   \   00000066   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000068   0x1929             ADDS     R1,R5,R4
   \   0000006A   0x7048             STRB     R0,[R1, #+1]
    139                  buf[i+2] ^= e ^ rj_xtime(c^d); buf[i+3] ^= e ^ rj_xtime(d^a);
   \   0000006C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006E   0x1928             ADDS     R0,R5,R4
   \   00000070   0x7887             LDRB     R7,[R0, #+2]
   \   00000072   0xEA99 0x0008      EORS     R0,R9,R8
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0x.... 0x....      BL       rj_xtime
   \   0000007C   0xEA90 0x000A      EORS     R0,R0,R10
   \   00000080   0x4078             EORS     R0,R0,R7
   \   00000082   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000084   0x1929             ADDS     R1,R5,R4
   \   00000086   0x7088             STRB     R0,[R1, #+2]
   \   00000088   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008A   0x1928             ADDS     R0,R5,R4
   \   0000008C   0x78C7             LDRB     R7,[R0, #+3]
   \   0000008E   0xEA96 0x0009      EORS     R0,R6,R9
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0x.... 0x....      BL       rj_xtime
   \   00000098   0xEA90 0x000A      EORS     R0,R0,R10
   \   0000009C   0x4078             EORS     R0,R0,R7
   \   0000009E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A0   0x1929             ADDS     R1,R5,R4
   \   000000A2   0x70C8             STRB     R0,[R1, #+3]
    140              }
   \   000000A4   0x1D2D             ADDS     R5,R5,#+4
   \                     ??aes_mixColumns_0: (+1)
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0x2D10             CMP      R5,#+16
   \   000000AA   0xDBAE             BLT.N    ??aes_mixColumns_1
    141          } /* aes_mixColumns */
   \   000000AC   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    142          
    143          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
    144          void aes_mixColumns_inv(uint8_t *buf)
    145          {
   \                     aes_mixColumns_inv: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
    146              register uint8_t i, a, b, c, d, e, x, y, z;
    147          
    148              for (i = 0; i < 16; i += 4)
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xE06F             B.N      ??aes_mixColumns_inv_0
    149              {
    150                  a = buf[i]; b = buf[i + 1]; c = buf[i + 2]; d = buf[i + 3];
   \                     ??aes_mixColumns_inv_1: (+1)
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x5D28             LDRB     R0,[R5, R4]
   \   0000000E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0x1928             ADDS     R0,R5,R4
   \   00000016   0x7846             LDRB     R6,[R0, #+1]
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x1928             ADDS     R0,R5,R4
   \   0000001C   0x7887             LDRB     R7,[R0, #+2]
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0x1928             ADDS     R0,R5,R4
   \   00000022   0xF890 0x8003      LDRB     R8,[R0, #+3]
    151                  e = a ^ b ^ c ^ d;
   \   00000026   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002A   0x4070             EORS     R0,R6,R0
   \   0000002C   0x4078             EORS     R0,R7,R0
   \   0000002E   0xEA98 0x0A00      EORS     R10,R8,R0
    152                  z = rj_xtime(e);
   \   00000032   0x4650             MOV      R0,R10
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x.... 0x....      BL       rj_xtime
   \   0000003A   0x4683             MOV      R11,R0
    153                  x = e ^ rj_xtime(rj_xtime(z^a^c));  y = e ^ rj_xtime(rj_xtime(z^b^d));
   \   0000003C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000040   0xEA90 0x000B      EORS     R0,R0,R11
   \   00000044   0x4078             EORS     R0,R7,R0
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x.... 0x....      BL       rj_xtime
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x.... 0x....      BL       rj_xtime
   \   00000052   0xEA90 0x090A      EORS     R9,R0,R10
   \   00000056   0xEA96 0x000B      EORS     R0,R6,R11
   \   0000005A   0xEA98 0x0000      EORS     R0,R8,R0
   \   0000005E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000060   0x.... 0x....      BL       rj_xtime
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x.... 0x....      BL       rj_xtime
   \   0000006A   0xEA90 0x0A0A      EORS     R10,R0,R10
    154                  buf[i] ^= x ^ rj_xtime(a^b);   buf[i+1] ^= y ^ rj_xtime(b^c);
   \   0000006E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000070   0xF815 0xB004      LDRB     R11,[R5, R4]
   \   00000074   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000078   0x4070             EORS     R0,R6,R0
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0x.... 0x....      BL       rj_xtime
   \   00000080   0xEA90 0x0009      EORS     R0,R0,R9
   \   00000084   0xEA90 0x000B      EORS     R0,R0,R11
   \   00000088   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008A   0x5528             STRB     R0,[R5, R4]
   \   0000008C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008E   0x1928             ADDS     R0,R5,R4
   \   00000090   0xF890 0xB001      LDRB     R11,[R0, #+1]
   \   00000094   0xEA97 0x0006      EORS     R0,R7,R6
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0x.... 0x....      BL       rj_xtime
   \   0000009E   0xEA90 0x000A      EORS     R0,R0,R10
   \   000000A2   0xEA90 0x000B      EORS     R0,R0,R11
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0x1929             ADDS     R1,R5,R4
   \   000000AA   0x7048             STRB     R0,[R1, #+1]
    155                  buf[i+2] ^= x ^ rj_xtime(c^d); buf[i+3] ^= y ^ rj_xtime(d^a);
   \   000000AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000AE   0x1928             ADDS     R0,R5,R4
   \   000000B0   0x7886             LDRB     R6,[R0, #+2]
   \   000000B2   0xEA98 0x0007      EORS     R0,R8,R7
   \   000000B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   0x.... 0x....      BL       rj_xtime
   \   000000BC   0xEA90 0x0009      EORS     R0,R0,R9
   \   000000C0   0x4070             EORS     R0,R0,R6
   \   000000C2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C4   0x1929             ADDS     R1,R5,R4
   \   000000C6   0x7088             STRB     R0,[R1, #+2]
   \   000000C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000CA   0x1928             ADDS     R0,R5,R4
   \   000000CC   0x78C6             LDRB     R6,[R0, #+3]
   \   000000CE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000D2   0xEA90 0x0008      EORS     R0,R0,R8
   \   000000D6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D8   0x.... 0x....      BL       rj_xtime
   \   000000DC   0xEA90 0x000A      EORS     R0,R0,R10
   \   000000E0   0x4070             EORS     R0,R0,R6
   \   000000E2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E4   0x1929             ADDS     R1,R5,R4
   \   000000E6   0x70C8             STRB     R0,[R1, #+3]
    156              }
   \   000000E8   0x1D2D             ADDS     R5,R5,#+4
   \                     ??aes_mixColumns_inv_0: (+1)
   \   000000EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000EC   0x2D10             CMP      R5,#+16
   \   000000EE   0xDB8C             BLT.N    ??aes_mixColumns_inv_1
    157          } /* aes_mixColumns_inv */
   \   000000F0   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    158          
    159          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
    160          void aes_expandEncKey(uint8_t *k, uint8_t *rc) 
    161          {
   \                     aes_expandEncKey: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    162              register uint8_t i;
    163          
    164              k[0] ^= rj_sbox(k[29]) ^ (*rc);
   \   00000006   0x7826             LDRB     R6,[R4, #+0]
   \   00000008   0x7F60             LDRB     R0,[R4, #+29]
   \   0000000A   0x.... 0x....      BL       rj_sbox
   \   0000000E   0x7829             LDRB     R1,[R5, #+0]
   \   00000010   0x4048             EORS     R0,R1,R0
   \   00000012   0x4070             EORS     R0,R0,R6
   \   00000014   0x7020             STRB     R0,[R4, #+0]
    165              k[1] ^= rj_sbox(k[30]);
   \   00000016   0x7866             LDRB     R6,[R4, #+1]
   \   00000018   0x7FA0             LDRB     R0,[R4, #+30]
   \   0000001A   0x.... 0x....      BL       rj_sbox
   \   0000001E   0x4070             EORS     R0,R0,R6
   \   00000020   0x7060             STRB     R0,[R4, #+1]
    166              k[2] ^= rj_sbox(k[31]);
   \   00000022   0x78A6             LDRB     R6,[R4, #+2]
   \   00000024   0x7FE0             LDRB     R0,[R4, #+31]
   \   00000026   0x.... 0x....      BL       rj_sbox
   \   0000002A   0x4070             EORS     R0,R0,R6
   \   0000002C   0x70A0             STRB     R0,[R4, #+2]
    167              k[3] ^= rj_sbox(k[28]);
   \   0000002E   0x78E6             LDRB     R6,[R4, #+3]
   \   00000030   0x7F20             LDRB     R0,[R4, #+28]
   \   00000032   0x.... 0x....      BL       rj_sbox
   \   00000036   0x4070             EORS     R0,R0,R6
   \   00000038   0x70E0             STRB     R0,[R4, #+3]
    168              *rc = F( *rc);
   \   0000003A   0x7828             LDRB     R0,[R5, #+0]
   \   0000003C   0x7829             LDRB     R1,[R5, #+0]
   \   0000003E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000040   0x09C9             LSRS     R1,R1,#+7
   \   00000042   0x221B             MOVS     R2,#+27
   \   00000044   0xFB11 0xF102      SMULBB   R1,R1,R2
   \   00000048   0xEA91 0x0040      EORS     R0,R1,R0, LSL #+1
   \   0000004C   0x7028             STRB     R0,[R5, #+0]
    169          
    170              for(i = 4; i < 16; i += 4)  k[i] ^= k[i-4],   k[i+1] ^= k[i-3],
   \   0000004E   0x2004             MOVS     R0,#+4
   \   00000050   0xE02A             B.N      ??aes_expandEncKey_0
    171                                          k[i+2] ^= k[i-2], k[i+3] ^= k[i-1];
   \                     ??aes_expandEncKey_1: (+1)
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x5D01             LDRB     R1,[R0, R4]
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x1902             ADDS     R2,R0,R4
   \   0000005A   0xF812 0x2C04      LDRB     R2,[R2, #-4]
   \   0000005E   0x4051             EORS     R1,R2,R1
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0x5501             STRB     R1,[R0, R4]
   \   00000064   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   0x1901             ADDS     R1,R0,R4
   \   00000068   0x7849             LDRB     R1,[R1, #+1]
   \   0000006A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0x1902             ADDS     R2,R0,R4
   \   0000006E   0xF812 0x2C03      LDRB     R2,[R2, #-3]
   \   00000072   0x4051             EORS     R1,R2,R1
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0x1902             ADDS     R2,R0,R4
   \   00000078   0x7051             STRB     R1,[R2, #+1]
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0x1901             ADDS     R1,R0,R4
   \   0000007E   0x7889             LDRB     R1,[R1, #+2]
   \   00000080   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000082   0x1902             ADDS     R2,R0,R4
   \   00000084   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   00000088   0x4051             EORS     R1,R2,R1
   \   0000008A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008C   0x1902             ADDS     R2,R0,R4
   \   0000008E   0x7091             STRB     R1,[R2, #+2]
   \   00000090   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   0x1901             ADDS     R1,R0,R4
   \   00000094   0x78C9             LDRB     R1,[R1, #+3]
   \   00000096   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000098   0x1902             ADDS     R2,R0,R4
   \   0000009A   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   0000009E   0x4051             EORS     R1,R2,R1
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x1902             ADDS     R2,R0,R4
   \   000000A4   0x70D1             STRB     R1,[R2, #+3]
   \   000000A6   0x1D00             ADDS     R0,R0,#+4
   \                     ??aes_expandEncKey_0: (+1)
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0x2810             CMP      R0,#+16
   \   000000AC   0xDBD1             BLT.N    ??aes_expandEncKey_1
    172              k[16] ^= rj_sbox(k[12]);
   \   000000AE   0x7C25             LDRB     R5,[R4, #+16]
   \   000000B0   0x7B20             LDRB     R0,[R4, #+12]
   \   000000B2   0x.... 0x....      BL       rj_sbox
   \   000000B6   0x4068             EORS     R0,R0,R5
   \   000000B8   0x7420             STRB     R0,[R4, #+16]
    173              k[17] ^= rj_sbox(k[13]);
   \   000000BA   0x7C65             LDRB     R5,[R4, #+17]
   \   000000BC   0x7B60             LDRB     R0,[R4, #+13]
   \   000000BE   0x.... 0x....      BL       rj_sbox
   \   000000C2   0x4068             EORS     R0,R0,R5
   \   000000C4   0x7460             STRB     R0,[R4, #+17]
    174              k[18] ^= rj_sbox(k[14]);
   \   000000C6   0x7CA5             LDRB     R5,[R4, #+18]
   \   000000C8   0x7BA0             LDRB     R0,[R4, #+14]
   \   000000CA   0x.... 0x....      BL       rj_sbox
   \   000000CE   0x4068             EORS     R0,R0,R5
   \   000000D0   0x74A0             STRB     R0,[R4, #+18]
    175              k[19] ^= rj_sbox(k[15]);
   \   000000D2   0x7CE5             LDRB     R5,[R4, #+19]
   \   000000D4   0x7BE0             LDRB     R0,[R4, #+15]
   \   000000D6   0x.... 0x....      BL       rj_sbox
   \   000000DA   0x4068             EORS     R0,R0,R5
   \   000000DC   0x74E0             STRB     R0,[R4, #+19]
    176          
    177              for(i = 20; i < 32; i += 4) k[i] ^= k[i-4],   k[i+1] ^= k[i-3],
   \   000000DE   0x2014             MOVS     R0,#+20
   \   000000E0   0xE02A             B.N      ??aes_expandEncKey_2
    178                                          k[i+2] ^= k[i-2], k[i+3] ^= k[i-1];
   \                     ??aes_expandEncKey_3: (+1)
   \   000000E2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E4   0x5D01             LDRB     R1,[R0, R4]
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0x1902             ADDS     R2,R0,R4
   \   000000EA   0xF812 0x2C04      LDRB     R2,[R2, #-4]
   \   000000EE   0x4051             EORS     R1,R2,R1
   \   000000F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F2   0x5501             STRB     R1,[R0, R4]
   \   000000F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F6   0x1901             ADDS     R1,R0,R4
   \   000000F8   0x7849             LDRB     R1,[R1, #+1]
   \   000000FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FC   0x1902             ADDS     R2,R0,R4
   \   000000FE   0xF812 0x2C03      LDRB     R2,[R2, #-3]
   \   00000102   0x4051             EORS     R1,R2,R1
   \   00000104   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000106   0x1902             ADDS     R2,R0,R4
   \   00000108   0x7051             STRB     R1,[R2, #+1]
   \   0000010A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010C   0x1901             ADDS     R1,R0,R4
   \   0000010E   0x7889             LDRB     R1,[R1, #+2]
   \   00000110   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000112   0x1902             ADDS     R2,R0,R4
   \   00000114   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   00000118   0x4051             EORS     R1,R2,R1
   \   0000011A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011C   0x1902             ADDS     R2,R0,R4
   \   0000011E   0x7091             STRB     R1,[R2, #+2]
   \   00000120   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000122   0x1901             ADDS     R1,R0,R4
   \   00000124   0x78C9             LDRB     R1,[R1, #+3]
   \   00000126   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000128   0x1902             ADDS     R2,R0,R4
   \   0000012A   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   0000012E   0x4051             EORS     R1,R2,R1
   \   00000130   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000132   0x1902             ADDS     R2,R0,R4
   \   00000134   0x70D1             STRB     R1,[R2, #+3]
   \   00000136   0x1D00             ADDS     R0,R0,#+4
   \                     ??aes_expandEncKey_2: (+1)
   \   00000138   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013A   0x2820             CMP      R0,#+32
   \   0000013C   0xDBD1             BLT.N    ??aes_expandEncKey_3
    179          
    180          } /* aes_expandEncKey */
   \   0000013E   0xBD70             POP      {R4-R6,PC}       ;; return
    181          
    182          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
    183          void aes_expandDecKey(uint8_t *k, uint8_t *rc) 
    184          {
   \                     aes_expandDecKey: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    185              uint8_t i;
    186          
    187              for(i = 28; i > 16; i -= 4) k[i+0] ^= k[i-4], k[i+1] ^= k[i-3], 
   \   00000006   0x201C             MOVS     R0,#+28
   \   00000008   0xE02A             B.N      ??aes_expandDecKey_0
    188                                          k[i+2] ^= k[i-2], k[i+3] ^= k[i-1];
   \                     ??aes_expandDecKey_1: (+1)
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x5D01             LDRB     R1,[R0, R4]
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x1902             ADDS     R2,R0,R4
   \   00000012   0xF812 0x2C04      LDRB     R2,[R2, #-4]
   \   00000016   0x4051             EORS     R1,R2,R1
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x5501             STRB     R1,[R0, R4]
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x1901             ADDS     R1,R0,R4
   \   00000020   0x7849             LDRB     R1,[R1, #+1]
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x1902             ADDS     R2,R0,R4
   \   00000026   0xF812 0x2C03      LDRB     R2,[R2, #-3]
   \   0000002A   0x4051             EORS     R1,R2,R1
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x1902             ADDS     R2,R0,R4
   \   00000030   0x7051             STRB     R1,[R2, #+1]
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x1901             ADDS     R1,R0,R4
   \   00000036   0x7889             LDRB     R1,[R1, #+2]
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x1902             ADDS     R2,R0,R4
   \   0000003C   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   00000040   0x4051             EORS     R1,R2,R1
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x1902             ADDS     R2,R0,R4
   \   00000046   0x7091             STRB     R1,[R2, #+2]
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x1901             ADDS     R1,R0,R4
   \   0000004C   0x78C9             LDRB     R1,[R1, #+3]
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x1902             ADDS     R2,R0,R4
   \   00000052   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   00000056   0x4051             EORS     R1,R2,R1
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0x1902             ADDS     R2,R0,R4
   \   0000005C   0x70D1             STRB     R1,[R2, #+3]
   \   0000005E   0x1F00             SUBS     R0,R0,#+4
   \                     ??aes_expandDecKey_0: (+1)
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0x2811             CMP      R0,#+17
   \   00000064   0xDAD1             BGE.N    ??aes_expandDecKey_1
    189          
    190              k[16] ^= rj_sbox(k[12]);
   \   00000066   0x7C26             LDRB     R6,[R4, #+16]
   \   00000068   0x7B20             LDRB     R0,[R4, #+12]
   \   0000006A   0x.... 0x....      BL       rj_sbox
   \   0000006E   0x4070             EORS     R0,R0,R6
   \   00000070   0x7420             STRB     R0,[R4, #+16]
    191              k[17] ^= rj_sbox(k[13]);
   \   00000072   0x7C66             LDRB     R6,[R4, #+17]
   \   00000074   0x7B60             LDRB     R0,[R4, #+13]
   \   00000076   0x.... 0x....      BL       rj_sbox
   \   0000007A   0x4070             EORS     R0,R0,R6
   \   0000007C   0x7460             STRB     R0,[R4, #+17]
    192              k[18] ^= rj_sbox(k[14]);
   \   0000007E   0x7CA6             LDRB     R6,[R4, #+18]
   \   00000080   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000082   0x.... 0x....      BL       rj_sbox
   \   00000086   0x4070             EORS     R0,R0,R6
   \   00000088   0x74A0             STRB     R0,[R4, #+18]
    193              k[19] ^= rj_sbox(k[15]);
   \   0000008A   0x7CE6             LDRB     R6,[R4, #+19]
   \   0000008C   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000008E   0x.... 0x....      BL       rj_sbox
   \   00000092   0x4070             EORS     R0,R0,R6
   \   00000094   0x74E0             STRB     R0,[R4, #+19]
    194          
    195              for(i = 12; i > 0; i -= 4)  k[i+0] ^= k[i-4], k[i+1] ^= k[i-3],
   \   00000096   0x200C             MOVS     R0,#+12
   \   00000098   0xE02A             B.N      ??aes_expandDecKey_2
    196                                          k[i+2] ^= k[i-2], k[i+3] ^= k[i-1];
   \                     ??aes_expandDecKey_3: (+1)
   \   0000009A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   0x5D01             LDRB     R1,[R0, R4]
   \   0000009E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A0   0x1902             ADDS     R2,R0,R4
   \   000000A2   0xF812 0x2C04      LDRB     R2,[R2, #-4]
   \   000000A6   0x4051             EORS     R1,R2,R1
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0x5501             STRB     R1,[R0, R4]
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0x1901             ADDS     R1,R0,R4
   \   000000B0   0x7849             LDRB     R1,[R1, #+1]
   \   000000B2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   0x1902             ADDS     R2,R0,R4
   \   000000B6   0xF812 0x2C03      LDRB     R2,[R2, #-3]
   \   000000BA   0x4051             EORS     R1,R2,R1
   \   000000BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BE   0x1902             ADDS     R2,R0,R4
   \   000000C0   0x7051             STRB     R1,[R2, #+1]
   \   000000C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C4   0x1901             ADDS     R1,R0,R4
   \   000000C6   0x7889             LDRB     R1,[R1, #+2]
   \   000000C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CA   0x1902             ADDS     R2,R0,R4
   \   000000CC   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   000000D0   0x4051             EORS     R1,R2,R1
   \   000000D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D4   0x1902             ADDS     R2,R0,R4
   \   000000D6   0x7091             STRB     R1,[R2, #+2]
   \   000000D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DA   0x1901             ADDS     R1,R0,R4
   \   000000DC   0x78C9             LDRB     R1,[R1, #+3]
   \   000000DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E0   0x1902             ADDS     R2,R0,R4
   \   000000E2   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   000000E6   0x4051             EORS     R1,R2,R1
   \   000000E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EA   0x1902             ADDS     R2,R0,R4
   \   000000EC   0x70D1             STRB     R1,[R2, #+3]
   \   000000EE   0x1F00             SUBS     R0,R0,#+4
   \                     ??aes_expandDecKey_2: (+1)
   \   000000F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F2   0x2800             CMP      R0,#+0
   \   000000F4   0xD1D1             BNE.N    ??aes_expandDecKey_3
    197          
    198              *rc = FD(*rc);
   \   000000F6   0x7828             LDRB     R0,[R5, #+0]
   \   000000F8   0x07C0             LSLS     R0,R0,#+31
   \   000000FA   0xD501             BPL.N    ??aes_expandDecKey_4
   \   000000FC   0x208D             MOVS     R0,#+141
   \   000000FE   0xE000             B.N      ??aes_expandDecKey_5
   \                     ??aes_expandDecKey_4: (+1)
   \   00000100   0x2000             MOVS     R0,#+0
   \                     ??aes_expandDecKey_5: (+1)
   \   00000102   0x7829             LDRB     R1,[R5, #+0]
   \   00000104   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000106   0xEA90 0x0051      EORS     R0,R0,R1, LSR #+1
   \   0000010A   0x7028             STRB     R0,[R5, #+0]
    199              k[0] ^= rj_sbox(k[29]) ^ (*rc);
   \   0000010C   0x7826             LDRB     R6,[R4, #+0]
   \   0000010E   0x7F60             LDRB     R0,[R4, #+29]
   \   00000110   0x.... 0x....      BL       rj_sbox
   \   00000114   0x7829             LDRB     R1,[R5, #+0]
   \   00000116   0x4048             EORS     R0,R1,R0
   \   00000118   0x4070             EORS     R0,R0,R6
   \   0000011A   0x7020             STRB     R0,[R4, #+0]
    200              k[1] ^= rj_sbox(k[30]);
   \   0000011C   0x7865             LDRB     R5,[R4, #+1]
   \   0000011E   0x7FA0             LDRB     R0,[R4, #+30]
   \   00000120   0x.... 0x....      BL       rj_sbox
   \   00000124   0x4068             EORS     R0,R0,R5
   \   00000126   0x7060             STRB     R0,[R4, #+1]
    201              k[2] ^= rj_sbox(k[31]);
   \   00000128   0x78A5             LDRB     R5,[R4, #+2]
   \   0000012A   0x7FE0             LDRB     R0,[R4, #+31]
   \   0000012C   0x.... 0x....      BL       rj_sbox
   \   00000130   0x4068             EORS     R0,R0,R5
   \   00000132   0x70A0             STRB     R0,[R4, #+2]
    202              k[3] ^= rj_sbox(k[28]);
   \   00000134   0x78E5             LDRB     R5,[R4, #+3]
   \   00000136   0x7F20             LDRB     R0,[R4, #+28]
   \   00000138   0x.... 0x....      BL       rj_sbox
   \   0000013C   0x4068             EORS     R0,R0,R5
   \   0000013E   0x70E0             STRB     R0,[R4, #+3]
    203          } /* aes_expandDecKey */
   \   00000140   0xBD70             POP      {R4-R6,PC}       ;; return
    204          
    205          
    206          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
    207          void aes256_init(aes256_context *ctx, uint8_t *k)
    208          {
   \                     aes256_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    209              uint8_t rcon = 1;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    210              register uint8_t i;
    211              for (i = 0; i < sizeof(ctx->key); i++) 
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0xE00A             B.N      ??aes256_init_0
    212                ctx->enckey[i] = ctx->deckey[i] = k[i];
   \                     ??aes256_init_1: (+1)
   \   0000000E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   0x5C68             LDRB     R0,[R5, R1]
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0x192A             ADDS     R2,R5,R4
   \   00000016   0xF882 0x0040      STRB     R0,[R2, #+64]
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x192A             ADDS     R2,R5,R4
   \   0000001E   0xF882 0x0020      STRB     R0,[R2, #+32]
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
   \                     ??aes256_init_0: (+1)
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x2D20             CMP      R5,#+32
   \   00000028   0xD3F1             BCC.N    ??aes256_init_1
    213              for (i = 8;--i;) 
   \   0000002A   0x2508             MOVS     R5,#+8
   \   0000002C   0xE004             B.N      ??aes256_init_2
    214                aes_expandEncKey(ctx->deckey, &rcon);
   \                     ??aes256_init_3: (+1)
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0xF114 0x0040      ADDS     R0,R4,#+64
   \   00000034   0x.... 0x....      BL       aes_expandEncKey
   \                     ??aes256_init_2: (+1)
   \   00000038   0x1E6D             SUBS     R5,R5,#+1
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1F5             BNE.N    ??aes256_init_3
    215          } /* aes256_init */
   \   00000042   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    216          
    217          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
    218          void aes256_done(aes256_context *ctx)
    219          {
    220              register uint8_t i;
    221              for (i = 0; i < sizeof(ctx->key); i++) 
   \                     aes256_done: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE00B             B.N      ??aes256_done_0
    222                  ctx->key[i] = ctx->enckey[i] = ctx->deckey[i] = 0;
   \                     ??aes256_done_1: (+1)
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x180B             ADDS     R3,R1,R0
   \   0000000A   0xF883 0x2040      STRB     R2,[R3, #+64]
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x180B             ADDS     R3,R1,R0
   \   00000012   0xF883 0x2020      STRB     R2,[R3, #+32]
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0x540A             STRB     R2,[R1, R0]
   \   0000001A   0x1C49             ADDS     R1,R1,#+1
   \                     ??aes256_done_0: (+1)
   \   0000001C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   0x2920             CMP      R1,#+32
   \   00000020   0xD3F0             BCC.N    ??aes256_done_1
    223          } /* aes256_done */
   \   00000022   0x4770             BX       LR               ;; return
    224          
    225          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
    226          void aes256_encrypt_ecb(aes256_context *ctx, uint8_t *buf)
    227          {
   \                     aes256_encrypt_ecb: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    228              uint8_t i, rcon;
    229          
    230              aes_addRoundKey_cpy(buf, ctx->enckey, ctx->key);
   \   00000008   0x0022             MOVS     R2,R4
   \   0000000A   0xF114 0x0120      ADDS     R1,R4,#+32
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       aes_addRoundKey_cpy
    231              for(i = 1, rcon = 1; i < 14; ++i)
   \   00000014   0x2601             MOVS     R6,#+1
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000001C   0xE008             B.N      ??aes256_encrypt_ecb_0
    232              {
    233                  aes_subBytes(buf);
    234                  aes_shiftRows(buf);
    235                  aes_mixColumns(buf);
    236                  if( i & 1 ) aes_addRoundKey( buf, &ctx->key[16]);
    237                  else aes_expandEncKey(ctx->key, &rcon), aes_addRoundKey(buf, ctx->key);
   \                     ??aes256_encrypt_ecb_1: (+1)
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       aes_expandEncKey
   \   00000026   0x0021             MOVS     R1,R4
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x.... 0x....      BL       aes_addRoundKey
   \                     ??aes256_encrypt_ecb_2: (+1)
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
   \                     ??aes256_encrypt_ecb_0: (+1)
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x2E0E             CMP      R6,#+14
   \   00000034   0xDA10             BGE.N    ??aes256_encrypt_ecb_3
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0x.... 0x....      BL       aes_subBytes
   \   0000003C   0x0028             MOVS     R0,R5
   \   0000003E   0x.... 0x....      BL       aes_shiftRows
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0x.... 0x....      BL       aes_mixColumns
   \   00000048   0x07F0             LSLS     R0,R6,#+31
   \   0000004A   0xD5E8             BPL.N    ??aes256_encrypt_ecb_1
   \   0000004C   0xF114 0x0110      ADDS     R1,R4,#+16
   \   00000050   0x0028             MOVS     R0,R5
   \   00000052   0x.... 0x....      BL       aes_addRoundKey
   \   00000056   0xE7EA             B.N      ??aes256_encrypt_ecb_2
    238              }
    239              aes_subBytes(buf);
   \                     ??aes256_encrypt_ecb_3: (+1)
   \   00000058   0x0028             MOVS     R0,R5
   \   0000005A   0x.... 0x....      BL       aes_subBytes
    240              aes_shiftRows(buf);
   \   0000005E   0x0028             MOVS     R0,R5
   \   00000060   0x.... 0x....      BL       aes_shiftRows
    241              aes_expandEncKey(ctx->key, &rcon); 
   \   00000064   0xA900             ADD      R1,SP,#+0
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0x.... 0x....      BL       aes_expandEncKey
    242              aes_addRoundKey(buf, ctx->key);
   \   0000006C   0x0021             MOVS     R1,R4
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0x.... 0x....      BL       aes_addRoundKey
    243          } /* aes256_encrypt */
   \   00000074   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    244          
    245          /* -------------------------------------------------------------------------- */

   \                                 In section .text, align 2, keep-with-next
    246          void aes256_decrypt_ecb(aes256_context *ctx, uint8_t *buf)
    247          {
   \                     aes256_decrypt_ecb: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    248              uint8_t i, rcon;
    249          
    250              aes_addRoundKey_cpy(buf, ctx->deckey, ctx->key);
   \   00000008   0x0022             MOVS     R2,R4
   \   0000000A   0xF114 0x0140      ADDS     R1,R4,#+64
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       aes_addRoundKey_cpy
    251              aes_shiftRows_inv(buf);
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x.... 0x....      BL       aes_shiftRows_inv
    252              aes_subBytes_inv(buf);
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0x.... 0x....      BL       aes_subBytes_inv
    253          
    254              for (i = 14, rcon = 0x80; --i;)
   \   00000020   0x260E             MOVS     R6,#+14
   \   00000022   0x2080             MOVS     R0,#+128
   \   00000024   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000028   0xE00C             B.N      ??aes256_decrypt_ecb_0
    255              {
    256                  if( ( i & 1 ) )           
    257                  {
    258                      aes_expandDecKey(ctx->key, &rcon);
    259                      aes_addRoundKey(buf, &ctx->key[16]);
    260                  }
    261                  else aes_addRoundKey(buf, ctx->key);
   \                     ??aes256_decrypt_ecb_1: (+1)
   \   0000002A   0x0021             MOVS     R1,R4
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0x.... 0x....      BL       aes_addRoundKey
    262                  aes_mixColumns_inv(buf);
   \                     ??aes256_decrypt_ecb_2: (+1)
   \   00000032   0x0028             MOVS     R0,R5
   \   00000034   0x.... 0x....      BL       aes_mixColumns_inv
    263                  aes_shiftRows_inv(buf);
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0x.... 0x....      BL       aes_shiftRows_inv
    264                  aes_subBytes_inv(buf);
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0x.... 0x....      BL       aes_subBytes_inv
   \                     ??aes256_decrypt_ecb_0: (+1)
   \   00000044   0x1E76             SUBS     R6,R6,#+1
   \   00000046   0x0030             MOVS     R0,R6
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD00B             BEQ.N    ??aes256_decrypt_ecb_3
   \   0000004E   0x07F0             LSLS     R0,R6,#+31
   \   00000050   0xD5EB             BPL.N    ??aes256_decrypt_ecb_1
   \   00000052   0xA900             ADD      R1,SP,#+0
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       aes_expandDecKey
   \   0000005A   0xF114 0x0110      ADDS     R1,R4,#+16
   \   0000005E   0x0028             MOVS     R0,R5
   \   00000060   0x.... 0x....      BL       aes_addRoundKey
   \   00000064   0xE7E5             B.N      ??aes256_decrypt_ecb_2
    265              }
    266              aes_addRoundKey( buf, ctx->key); 
   \                     ??aes256_decrypt_ecb_3: (+1)
   \   00000066   0x0021             MOVS     R1,R4
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0x.... 0x....      BL       aes_addRoundKey
    267          } /* aes256_decrypt */
   \   0000006E   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   aes256_decrypt_ecb
        24   -> aes_addRoundKey
        24   -> aes_addRoundKey_cpy
        24   -> aes_expandDecKey
        24   -> aes_mixColumns_inv
        24   -> aes_shiftRows_inv
        24   -> aes_subBytes_inv
       0   aes256_done
      24   aes256_encrypt_ecb
        24   -> aes_addRoundKey
        24   -> aes_addRoundKey_cpy
        24   -> aes_expandEncKey
        24   -> aes_mixColumns
        24   -> aes_shiftRows
        24   -> aes_subBytes
      16   aes256_init
        16   -> aes_expandEncKey
       4   aes_addRoundKey
       8   aes_addRoundKey_cpy
      16   aes_expandDecKey
        16   -> rj_sbox
      16   aes_expandEncKey
        16   -> rj_sbox
      40   aes_mixColumns
        40   -> rj_xtime
      40   aes_mixColumns_inv
        40   -> rj_xtime
       0   aes_shiftRows
       0   aes_shiftRows_inv
      16   aes_subBytes
        16   -> rj_sbox
      16   aes_subBytes_inv
        16   -> rj_sbox
       0   gf_alog
       4   gf_log
       8   gf_mulinv
         8   -> gf_alog
         8   -> gf_log
       8   rj_sbox
         8   -> gf_mulinv
       0   rj_xtime


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     112  aes256_decrypt_ecb
      36  aes256_done
     118  aes256_encrypt_ecb
      68  aes256_init
      34  aes_addRoundKey
      50  aes_addRoundKey_cpy
     322  aes_expandDecKey
     320  aes_expandEncKey
     176  aes_mixColumns
     244  aes_mixColumns_inv
      50  aes_shiftRows
      50  aes_shiftRows_inv
      32  aes_subBytes
      54  aes_subBytes_inv
      34  gf_alog
      46  gf_log
      32  gf_mulinv
      58  rj_sbox
      18  rj_xtime

 
 1 854 bytes in section .text
 
 1 854 bytes of CODE memory

Errors: none
Warnings: none
