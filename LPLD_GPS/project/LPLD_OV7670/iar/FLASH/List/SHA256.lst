###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        23/Apr/2015  14:23:24
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  G:\test\LPLD_OSKinetis_V3_now02\lib\Security\SHA256.c
#    Command line =  
#        G:\test\LPLD_OSKinetis_V3_now02\lib\Security\SHA256.c -D LPLD_K60 -lCN
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\
#        -lB
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\ -o
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        E:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\app\ -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\CPU\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\common\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\HW\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\FatFs\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\FatFs\option\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\common\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\driver\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\descriptor\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\class\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\Security\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\SQC\
#        -Ol -I E:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\SHA256.lst
#    Object file  =  
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\Obj\SHA256.o
#
###############################################################################

G:\test\LPLD_OSKinetis_V3_now02\lib\Security\SHA256.c
      1          #include "SHA256.h"
      2          #include "stdlib.h"
      3          
      4          /**************************************************
      5          功能：将4字节HEX转换为32位无符号整型
      6          参数说明：
      7          	HexBuf (in)    --  输入缓冲区（in hex）长度必须为4字节以上
      8          返回值：
      9          	返回转换后的数值。如果出错返回0。
     10          **************************************************/

   \                                 In section .text, align 2, keep-with-next
     11          static unsigned int HexToInt(const unsigned char *HexBuf)
     12          {
     13          	return ((HexBuf[0] << 24) + (HexBuf[1] << 16) + (HexBuf[2] << 8) + HexBuf[3]);
   \                     HexToInt: (+1)
   \   00000000   0x7801             LDRB     R1,[R0, #+0]
   \   00000002   0x7842             LDRB     R2,[R0, #+1]
   \   00000004   0x0412             LSLS     R2,R2,#+16
   \   00000006   0xEB12 0x6101      ADDS     R1,R2,R1, LSL #+24
   \   0000000A   0x7882             LDRB     R2,[R0, #+2]
   \   0000000C   0xEB11 0x2102      ADDS     R1,R1,R2, LSL #+8
   \   00000010   0x78C0             LDRB     R0,[R0, #+3]
   \   00000012   0x1808             ADDS     R0,R1,R0
   \   00000014   0x4770             BX       LR               ;; return
     14          }
     15          
     16          /**************************************************
     17          功能：将32位无符号整型转换为4字节Hex数据
     18          参数说明：
     19          	int_num  (in) --  输入无符号整型数
     20          	HexBuf   (out) --  输出Hex缓冲区(缓冲大小必须为4字节以上)
     21          返回值：
     22          	RETURN_SUCC 成功
     23          	RETURN_ERR_PARAM 参数错误
     24          **************************************************/

   \                                 In section .text, align 2, keep-with-next
     25          static int IntToHex( unsigned int int_num, unsigned char *HexBuf)
     26          {
     27          	HexBuf[0] = int_num >> 24;
   \                     IntToHex: (+1)
   \   00000000   0x0E02             LSRS     R2,R0,#+24
   \   00000002   0x700A             STRB     R2,[R1, #+0]
     28          	HexBuf[1] = int_num >> 16;
   \   00000004   0x0C02             LSRS     R2,R0,#+16
   \   00000006   0x704A             STRB     R2,[R1, #+1]
     29          	HexBuf[2] = int_num >> 8;
   \   00000008   0x0A02             LSRS     R2,R0,#+8
   \   0000000A   0x708A             STRB     R2,[R1, #+2]
     30          	HexBuf[3] = int_num;
   \   0000000C   0x70C8             STRB     R0,[R1, #+3]
     31          
     32          	return RETURN_SUCC;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x4770             BX       LR               ;; return
     33          }
     34          
     35          /***************************************************************************
     36          * Subroutine:	SHA256_Init
     37          * Function:		Init SHA256 struct.
     38          * Input:		ctx-struct for SHA256
     39                          is224- if is 1 ,then the Hash is SHA224,or is SHA256
     40          * Output:		ctx-struct for SHA256;
     41          * Description:
     42          * Date:			2010.09.02
     43          * ModifyRecord:
     44          * *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     45          static void SHA256_Init( SHA256_CONTEXT *ctx, unsigned char  is224 )
     46          {
     47              ctx->total[0] = 0;
   \                     SHA256_Init: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x6002             STR      R2,[R0, #+0]
     48              ctx->total[1] = 0;
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x6042             STR      R2,[R0, #+4]
     49          
     50              if( is224 == 0 )
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD110             BNE.N    ??SHA256_Init_0
     51              {
     52                  /* SHA-256 */
     53                  ctx->state[0] = 0x6A09E667;
   \   0000000E   0x....             LDR.N    R2,??DataTable1  ;; 0x6a09e667
   \   00000010   0x6082             STR      R2,[R0, #+8]
     54                  ctx->state[1] = 0xBB67AE85;
   \   00000012   0x....             LDR.N    R2,??DataTable1_1  ;; 0xbb67ae85
   \   00000014   0x60C2             STR      R2,[R0, #+12]
     55                  ctx->state[2] = 0x3C6EF372;
   \   00000016   0x....             LDR.N    R2,??DataTable1_2  ;; 0x3c6ef372
   \   00000018   0x6102             STR      R2,[R0, #+16]
     56                  ctx->state[3] = 0xA54FF53A;
   \   0000001A   0x....             LDR.N    R2,??DataTable1_3  ;; 0xa54ff53a
   \   0000001C   0x6142             STR      R2,[R0, #+20]
     57                  ctx->state[4] = 0x510E527F;
   \   0000001E   0x....             LDR.N    R2,??DataTable1_4  ;; 0x510e527f
   \   00000020   0x6182             STR      R2,[R0, #+24]
     58                  ctx->state[5] = 0x9B05688C;
   \   00000022   0x....             LDR.N    R2,??DataTable1_5  ;; 0x9b05688c
   \   00000024   0x61C2             STR      R2,[R0, #+28]
     59                  ctx->state[6] = 0x1F83D9AB;
   \   00000026   0x....             LDR.N    R2,??DataTable1_6  ;; 0x1f83d9ab
   \   00000028   0x6202             STR      R2,[R0, #+32]
     60                  ctx->state[7] = 0x5BE0CD19;
   \   0000002A   0x....             LDR.N    R2,??DataTable1_7  ;; 0x5be0cd19
   \   0000002C   0x6242             STR      R2,[R0, #+36]
   \   0000002E   0xE00F             B.N      ??SHA256_Init_1
     61              }
     62              else
     63              {
     64                  /* SHA-224 */
     65                  ctx->state[0] = 0xC1059ED8;
   \                     ??SHA256_Init_0: (+1)
   \   00000030   0x....             LDR.N    R2,??DataTable1_8  ;; 0xc1059ed8
   \   00000032   0x6082             STR      R2,[R0, #+8]
     66                  ctx->state[1] = 0x367CD507;
   \   00000034   0x....             LDR.N    R2,??DataTable1_9  ;; 0x367cd507
   \   00000036   0x60C2             STR      R2,[R0, #+12]
     67                  ctx->state[2] = 0x3070DD17;
   \   00000038   0x....             LDR.N    R2,??DataTable1_10  ;; 0x3070dd17
   \   0000003A   0x6102             STR      R2,[R0, #+16]
     68                  ctx->state[3] = 0xF70E5939;
   \   0000003C   0x....             LDR.N    R2,??DataTable1_11  ;; 0xf70e5939
   \   0000003E   0x6142             STR      R2,[R0, #+20]
     69                  ctx->state[4] = 0xFFC00B31;
   \   00000040   0x....             LDR.N    R2,??DataTable1_12  ;; 0xffc00b31
   \   00000042   0x6182             STR      R2,[R0, #+24]
     70                  ctx->state[5] = 0x68581511;
   \   00000044   0x....             LDR.N    R2,??DataTable1_13  ;; 0x68581511
   \   00000046   0x61C2             STR      R2,[R0, #+28]
     71                  ctx->state[6] = 0x64F98FA7;
   \   00000048   0x....             LDR.N    R2,??DataTable1_14  ;; 0x64f98fa7
   \   0000004A   0x6202             STR      R2,[R0, #+32]
     72                  ctx->state[7] = 0xBEFA4FA4;
   \   0000004C   0x....             LDR.N    R2,??DataTable1_15  ;; 0xbefa4fa4
   \   0000004E   0x6242             STR      R2,[R0, #+36]
     73              }
     74          
     75              ctx->is224 = is224;
   \                     ??SHA256_Init_1: (+1)
   \   00000050   0xF880 0x10E8      STRB     R1,[R0, #+232]
     76          }
   \   00000054   0x4770             BX       LR               ;; return
     77          
     78          #define  SHR(x,n) ((x & 0xFFFFFFFF) >> n)
     79          #define ROTR(x,n) (SHR(x,n) | (x << (32 - n)))
     80          

   \                                 In section .text, align 2, keep-with-next
     81          static unsigned int S(unsigned int x,char n)
     82          {
     83              switch(n)
   \                     S: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD003             BEQ.N    ??S_0
   \   00000006   0x2902             CMP      R1,#+2
   \   00000008   0xD00F             BEQ.N    ??S_1
   \   0000000A   0xD307             BCC.N    ??S_2
   \   0000000C   0xE014             B.N      ??S_3
     84              {
     85              case 0:
     86                  return (ROTR(x, 7) ^ ROTR(x,18) ^  SHR(x, 3));
   \                     ??S_0: (+1)
   \   0000000E   0xEA5F 0x41B0      RORS     R1,R0,#+18
   \   00000012   0xEA91 0x11F0      EORS     R1,R1,R0, ROR #+7
   \   00000016   0xEA91 0x00D0      EORS     R0,R1,R0, LSR #+3
   \   0000001A   0xE013             B.N      ??S_4
     87              case 1:
     88                  return (ROTR(x,17) ^ ROTR(x,19) ^  SHR(x,10));
   \                     ??S_2: (+1)
   \   0000001C   0xEA5F 0x41F0      RORS     R1,R0,#+19
   \   00000020   0xEA91 0x4170      EORS     R1,R1,R0, ROR #+17
   \   00000024   0xEA91 0x2090      EORS     R0,R1,R0, LSR #+10
   \   00000028   0xE00C             B.N      ??S_4
     89              case 2:
     90                  return (ROTR(x, 2) ^ ROTR(x,13) ^ ROTR(x,22));
   \                     ??S_1: (+1)
   \   0000002A   0xEA5F 0x3170      RORS     R1,R0,#+13
   \   0000002E   0xEA91 0x01B0      EORS     R1,R1,R0, ROR #+2
   \   00000032   0xEA91 0x50B0      EORS     R0,R1,R0, ROR #+22
   \   00000036   0xE005             B.N      ??S_4
     91              default:
     92                  return (ROTR(x, 6) ^ ROTR(x,11) ^ ROTR(x,25));
   \                     ??S_3: (+1)
   \   00000038   0xEA5F 0x21F0      RORS     R1,R0,#+11
   \   0000003C   0xEA91 0x11B0      EORS     R1,R1,R0, ROR #+6
   \   00000040   0xEA91 0x6070      EORS     R0,R1,R0, ROR #+25
   \                     ??S_4: (+1)
   \   00000044   0x4770             BX       LR               ;; return
     93              }
     94          }
     95          
     96          #define F0(x,y,z) ((x & y) | (z & (x | y)))
     97          #define F1(x,y,z) (z ^ (x & (y ^ z)))
     98          

   \                                 In section .text, align 2, keep-with-next
     99          static void P(unsigned int a,unsigned int b,unsigned int c,unsigned int* d,unsigned int e,unsigned int f,unsigned int g,unsigned int* h,unsigned int x,unsigned int K)
    100          {
   \                     P: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x9028      LDR      R9,[SP, #+40]
   \   00000010   0xF8DD 0xA030      LDR      R10,[SP, #+48]
   \   00000014   0xF8DD 0x8034      LDR      R8,[SP, #+52]
    101              unsigned int  temp1;
    102              temp1 = *h + S(e,3) + F1(e,f,g) + K + x;
   \   00000018   0xF8D8 0xB000      LDR      R11,[R8, #+0]
   \   0000001C   0x2103             MOVS     R1,#+3
   \   0000001E   0x4648             MOV      R0,R9
   \   00000020   0x.... 0x....      BL       S
   \   00000024   0xEB10 0x000B      ADDS     R0,R0,R11
   \   00000028   0x990B             LDR      R1,[SP, #+44]
   \   0000002A   0xEA9A 0x0101      EORS     R1,R10,R1
   \   0000002E   0xEA11 0x0109      ANDS     R1,R1,R9
   \   00000032   0xEA91 0x010A      EORS     R1,R1,R10
   \   00000036   0x1808             ADDS     R0,R1,R0
   \   00000038   0x990F             LDR      R1,[SP, #+60]
   \   0000003A   0x1808             ADDS     R0,R1,R0
   \   0000003C   0x990E             LDR      R1,[SP, #+56]
   \   0000003E   0xEB11 0x0900      ADDS     R9,R1,R0
    103              *d += temp1;
   \   00000042   0x6838             LDR      R0,[R7, #+0]
   \   00000044   0xEB19 0x0000      ADDS     R0,R9,R0
   \   00000048   0x6038             STR      R0,[R7, #+0]
    104              *h = temp1 + S(a,2) + F0(a,b,c);
   \   0000004A   0x2102             MOVS     R1,#+2
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       S
   \   00000052   0xEB10 0x0009      ADDS     R0,R0,R9
   \   00000056   0xEA15 0x0104      ANDS     R1,R5,R4
   \   0000005A   0xEA55 0x0204      ORRS     R2,R5,R4
   \   0000005E   0x4032             ANDS     R2,R2,R6
   \   00000060   0x4311             ORRS     R1,R2,R1
   \   00000062   0x1808             ADDS     R0,R1,R0
   \   00000064   0xF8C8 0x0000      STR      R0,[R8, #+0]
    105          }
   \   00000068   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    106          

   \                                 In section .rodata, align 4
    107          static const unsigned int KnumA[16]=
   \                     KnumA:
   \   00000000   0x428A2F98         DC32 1116352408, 1899447441, 3049323471, 3921009573, 961987163
   \              0x71374491   
   \              0xB5C0FBCF   
   \              0xE9B5DBA5   
   \              0x3956C25B   
   \   00000014   0x59F111F1         DC32 1508970993, 2453635748, 2870763221, 3624381080, 310598401
   \              0x923F82A4   
   \              0xAB1C5ED5   
   \              0xD807AA98   
   \              0x12835B01   
   \   00000028   0x243185BE         DC32 607225278, 1426881987, 1925078388, 2162078206, 2614888103
   \              0x550C7DC3   
   \              0x72BE5D74   
   \              0x80DEB1FE   
   \              0x9BDC06A7   
   \   0000003C   0xC19BF174         DC32 3248222580
    108          {
    109              0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,
    110              0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174
    111          };

   \                                 In section .rodata, align 4
    112          static const unsigned int KnumB[48]=
   \                     KnumB:
   \   00000000   0xE49B69C1         DC32 3835390401, 4022224774, 264347078, 604807628, 770255983
   \              0xEFBE4786   
   \              0x0FC19DC6   
   \              0x240CA1CC   
   \              0x2DE92C6F   
   \   00000014   0x4A7484AA         DC32 1249150122, 1555081692, 1996064986, 2554220882, 2821834349
   \              0x5CB0A9DC   
   \              0x76F988DA   
   \              0x983E5152   
   \              0xA831C66D   
   \   00000028   0xB00327C8         DC32 2952996808, 3210313671, 3336571891, 3584528711, 113926993
   \              0xBF597FC7   
   \              0xC6E00BF3   
   \              0xD5A79147   
   \              0x06CA6351   
   \   0000003C   0x14292967         DC32 338241895, 666307205, 773529912, 1294757372, 1396182291
   \              0x27B70A85   
   \              0x2E1B2138   
   \              0x4D2C6DFC   
   \              0x53380D13   
   \   00000050   0x650A7354         DC32 1695183700, 1986661051, 2177026350, 2456956037, 2730485921
   \              0x766A0ABB   
   \              0x81C2C92E   
   \              0x92722C85   
   \              0xA2BFE8A1   
   \   00000064   0xA81A664B         DC32 2820302411, 3259730800, 3345764771, 3516065817, 3600352804
   \              0xC24B8B70   
   \              0xC76C51A3   
   \              0xD192E819   
   \              0xD6990624   
   \   00000078   0xF40E3585         DC32 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877
   \              0x106AA070   
   \              0x19A4C116   
   \              0x1E376C08   
   \              0x2748774C   
   \              0x34B0BCB5   
   \   00000090   0x391C0CB3         DC32 958139571, 1322822218, 1537002063, 1747873779, 1955562222
   \              0x4ED8AA4A   
   \              0x5B9CCA4F   
   \              0x682E6FF3   
   \              0x748F82EE   
   \   000000A4   0x78A5636F         DC32 2024104815, 2227730452, 2361852424, 2428436474, 2756734187
   \              0x84C87814   
   \              0x8CC70208   
   \              0x90BEFFFA   
   \              0xA4506CEB   
   \   000000B8   0xBEF9A3F7         DC32 3204031479, 3329325298
   \              0xC67178F2   
    113          {
    114              0xE49B69C1,0xEFBE4786,0x0FC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,
    115              0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x06CA6351,0x14292967,
    116              0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,
    117              0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,
    118              0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,
    119              0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2
    120          };
    121          /***************************************************************************
    122          * Subroutine:	SHA256_Process
    123          * Function:		Process SHA256
    124          * Input:		None
    125          * Output:		None;
    126          * Description:
    127          * Date:			2010.09.02
    128          * ModifyRecord:
    129          * *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    130          static void SHA256_Process( SHA256_CONTEXT *ctx, unsigned char  data[64] )
    131          {
   \                     SHA256_Process: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0CF             SUB      SP,SP,#+316
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    132              unsigned int  temp1, temp2, W[64];
    133              unsigned int stateN[8];
    134              unsigned int indexA,indexB,indexC;
    135          
    136              for(temp1=0; temp1<16; temp1++)
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xE007             B.N      ??SHA256_Process_0
    137              {
    138                  W[temp1] = HexToInt(data+temp1*4);
   \                     ??SHA256_Process_1: (+1)
   \   0000000C   0xEB15 0x0086      ADDS     R0,R5,R6, LSL #+2
   \   00000010   0x.... 0x....      BL       HexToInt
   \   00000014   0xA90E             ADD      R1,SP,#+56
   \   00000016   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
    139              }
   \   0000001A   0x1C76             ADDS     R6,R6,#+1
   \                     ??SHA256_Process_0: (+1)
   \   0000001C   0x2E10             CMP      R6,#+16
   \   0000001E   0xD3F5             BCC.N    ??SHA256_Process_1
    140          
    141          #define R(t) (W[t] = S(W[t -  2],1) + W[t -  7] + S(W[t - 15],0) + W[t - 16])
    142          
    143              memcpy(stateN,ctx->state,8*sizeof(unsigned int));
   \   00000020   0x2220             MOVS     R2,#+32
   \   00000022   0xF114 0x0108      ADDS     R1,R4,#+8
   \   00000026   0xA806             ADD      R0,SP,#+24
   \   00000028   0x.... 0x....      BL       memcpy
    144              
    145              for(indexA=0;indexA<2;indexA++)
   \   0000002C   0x2500             MOVS     R5,#+0
   \   0000002E   0xE065             B.N      ??SHA256_Process_2
    146              {
    147                  for(indexB=0;indexB<8;indexB++)
    148                  {
    149                      P( stateN[(8-indexB)%8], stateN[(9-indexB)%8], stateN[(10-indexB)%8], &stateN[(11-indexB)%8], stateN[(12-indexB)%8], stateN[(13-indexB)%8], stateN[(14-indexB)%8], &stateN[(15-indexB)%8], W[indexA*8+indexB], KnumA[indexA*8+indexB]);
   \                     ??SHA256_Process_3: (+1)
   \   00000030   0xEB16 0x00C5      ADDS     R0,R6,R5, LSL #+3
   \   00000034   0x....             LDR.N    R1,??DataTable1_16
   \   00000036   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000003A   0x9005             STR      R0,[SP, #+20]
   \   0000003C   0xEB16 0x00C5      ADDS     R0,R6,R5, LSL #+3
   \   00000040   0xA90E             ADD      R1,SP,#+56
   \   00000042   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000046   0x9004             STR      R0,[SP, #+16]
   \   00000048   0xF1D6 0x000F      RSBS     R0,R6,#+15
   \   0000004C   0x2108             MOVS     R1,#+8
   \   0000004E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000052   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000056   0xA806             ADD      R0,SP,#+24
   \   00000058   0xEB10 0x0082      ADDS     R0,R0,R2, LSL #+2
   \   0000005C   0x9003             STR      R0,[SP, #+12]
   \   0000005E   0xF1D6 0x000E      RSBS     R0,R6,#+14
   \   00000062   0x2108             MOVS     R1,#+8
   \   00000064   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000068   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000006C   0xA806             ADD      R0,SP,#+24
   \   0000006E   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   00000072   0x9002             STR      R0,[SP, #+8]
   \   00000074   0xF1D6 0x000D      RSBS     R0,R6,#+13
   \   00000078   0x2108             MOVS     R1,#+8
   \   0000007A   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000007E   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000082   0xA806             ADD      R0,SP,#+24
   \   00000084   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   00000088   0x9001             STR      R0,[SP, #+4]
   \   0000008A   0xF1D6 0x000C      RSBS     R0,R6,#+12
   \   0000008E   0x2108             MOVS     R1,#+8
   \   00000090   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000094   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000098   0xA806             ADD      R0,SP,#+24
   \   0000009A   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \   000000A0   0xF1D6 0x000B      RSBS     R0,R6,#+11
   \   000000A4   0x2108             MOVS     R1,#+8
   \   000000A6   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000AA   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000AE   0xA806             ADD      R0,SP,#+24
   \   000000B0   0xEB10 0x0382      ADDS     R3,R0,R2, LSL #+2
   \   000000B4   0xF1D6 0x000A      RSBS     R0,R6,#+10
   \   000000B8   0x2108             MOVS     R1,#+8
   \   000000BA   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000BE   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000C2   0xA806             ADD      R0,SP,#+24
   \   000000C4   0xF850 0x2022      LDR      R2,[R0, R2, LSL #+2]
   \   000000C8   0xF1D6 0x0009      RSBS     R0,R6,#+9
   \   000000CC   0x2108             MOVS     R1,#+8
   \   000000CE   0xFBB0 0xF7F1      UDIV     R7,R0,R1
   \   000000D2   0xFB07 0x0711      MLS      R7,R7,R1,R0
   \   000000D6   0xA806             ADD      R0,SP,#+24
   \   000000D8   0xF850 0x1027      LDR      R1,[R0, R7, LSL #+2]
   \   000000DC   0xF1D6 0x0008      RSBS     R0,R6,#+8
   \   000000E0   0x2708             MOVS     R7,#+8
   \   000000E2   0xFBB0 0xFCF7      UDIV     R12,R0,R7
   \   000000E6   0xFB0C 0x0C17      MLS      R12,R12,R7,R0
   \   000000EA   0xA806             ADD      R0,SP,#+24
   \   000000EC   0xF850 0x002C      LDR      R0,[R0, R12, LSL #+2]
   \   000000F0   0x.... 0x....      BL       P
    150                  }
   \   000000F4   0x1C76             ADDS     R6,R6,#+1
   \                     ??SHA256_Process_4: (+1)
   \   000000F6   0x2E08             CMP      R6,#+8
   \   000000F8   0xD39A             BCC.N    ??SHA256_Process_3
   \   000000FA   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SHA256_Process_2: (+1)
   \   000000FC   0x2D02             CMP      R5,#+2
   \   000000FE   0xD201             BCS.N    ??SHA256_Process_5
   \   00000100   0x2600             MOVS     R6,#+0
   \   00000102   0xE7F8             B.N      ??SHA256_Process_4
    151              }
    152              
    153              for(indexA=0;indexA<6;indexA++)
   \                     ??SHA256_Process_5: (+1)
   \   00000104   0x2500             MOVS     R5,#+0
   \   00000106   0xE087             B.N      ??SHA256_Process_6
    154              {
    155                  for(indexB=0;indexB<8;indexB++)
    156                  {
    157                      P( stateN[(8-indexB)%8], stateN[(9-indexB)%8], stateN[(10-indexB)%8], &stateN[(11-indexB)%8], stateN[(12-indexB)%8], stateN[(13-indexB)%8], stateN[(14-indexB)%8], &stateN[(15-indexB)%8], R(indexA*8+indexB+16), KnumB[indexA*8+indexB]);
   \                     ??SHA256_Process_7: (+1)
   \   00000108   0x2101             MOVS     R1,#+1
   \   0000010A   0xEB16 0x00C5      ADDS     R0,R6,R5, LSL #+3
   \   0000010E   0xAA0E             ADD      R2,SP,#+56
   \   00000110   0xEB12 0x0080      ADDS     R0,R2,R0, LSL #+2
   \   00000114   0x6B80             LDR      R0,[R0, #+56]
   \   00000116   0x.... 0x....      BL       S
   \   0000011A   0xEB16 0x01C5      ADDS     R1,R6,R5, LSL #+3
   \   0000011E   0xAA0E             ADD      R2,SP,#+56
   \   00000120   0xEB12 0x0181      ADDS     R1,R2,R1, LSL #+2
   \   00000124   0x6A49             LDR      R1,[R1, #+36]
   \   00000126   0x180F             ADDS     R7,R1,R0
   \   00000128   0x2100             MOVS     R1,#+0
   \   0000012A   0xEB16 0x00C5      ADDS     R0,R6,R5, LSL #+3
   \   0000012E   0xAA0E             ADD      R2,SP,#+56
   \   00000130   0xEB12 0x0080      ADDS     R0,R2,R0, LSL #+2
   \   00000134   0x6840             LDR      R0,[R0, #+4]
   \   00000136   0x.... 0x....      BL       S
   \   0000013A   0x19C0             ADDS     R0,R0,R7
   \   0000013C   0xEB16 0x01C5      ADDS     R1,R6,R5, LSL #+3
   \   00000140   0xAA0E             ADD      R2,SP,#+56
   \   00000142   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \   00000146   0x1808             ADDS     R0,R1,R0
   \   00000148   0xEB16 0x01C5      ADDS     R1,R6,R5, LSL #+3
   \   0000014C   0xAA0E             ADD      R2,SP,#+56
   \   0000014E   0xEB12 0x0181      ADDS     R1,R2,R1, LSL #+2
   \   00000152   0x6408             STR      R0,[R1, #+64]
   \   00000154   0xEB16 0x01C5      ADDS     R1,R6,R5, LSL #+3
   \   00000158   0x....             LDR.N    R2,??DataTable1_17
   \   0000015A   0xF852 0x1021      LDR      R1,[R2, R1, LSL #+2]
   \   0000015E   0x9105             STR      R1,[SP, #+20]
   \   00000160   0x9004             STR      R0,[SP, #+16]
   \   00000162   0xF1D6 0x000F      RSBS     R0,R6,#+15
   \   00000166   0x2108             MOVS     R1,#+8
   \   00000168   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000016C   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000170   0xA806             ADD      R0,SP,#+24
   \   00000172   0xEB10 0x0082      ADDS     R0,R0,R2, LSL #+2
   \   00000176   0x9003             STR      R0,[SP, #+12]
   \   00000178   0xF1D6 0x000E      RSBS     R0,R6,#+14
   \   0000017C   0x2108             MOVS     R1,#+8
   \   0000017E   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000182   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000186   0xA806             ADD      R0,SP,#+24
   \   00000188   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   0000018C   0x9002             STR      R0,[SP, #+8]
   \   0000018E   0xF1D6 0x000D      RSBS     R0,R6,#+13
   \   00000192   0x2108             MOVS     R1,#+8
   \   00000194   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000198   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000019C   0xA806             ADD      R0,SP,#+24
   \   0000019E   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   000001A2   0x9001             STR      R0,[SP, #+4]
   \   000001A4   0xF1D6 0x000C      RSBS     R0,R6,#+12
   \   000001A8   0x2108             MOVS     R1,#+8
   \   000001AA   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000001AE   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000001B2   0xA806             ADD      R0,SP,#+24
   \   000001B4   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   000001B8   0x9000             STR      R0,[SP, #+0]
   \   000001BA   0xF1D6 0x000B      RSBS     R0,R6,#+11
   \   000001BE   0x2108             MOVS     R1,#+8
   \   000001C0   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000001C4   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000001C8   0xA806             ADD      R0,SP,#+24
   \   000001CA   0xEB10 0x0382      ADDS     R3,R0,R2, LSL #+2
   \   000001CE   0xF1D6 0x000A      RSBS     R0,R6,#+10
   \   000001D2   0x2108             MOVS     R1,#+8
   \   000001D4   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000001D8   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000001DC   0xA806             ADD      R0,SP,#+24
   \   000001DE   0xF850 0x2022      LDR      R2,[R0, R2, LSL #+2]
   \   000001E2   0xF1D6 0x0009      RSBS     R0,R6,#+9
   \   000001E6   0x2108             MOVS     R1,#+8
   \   000001E8   0xFBB0 0xF7F1      UDIV     R7,R0,R1
   \   000001EC   0xFB07 0x0711      MLS      R7,R7,R1,R0
   \   000001F0   0xA806             ADD      R0,SP,#+24
   \   000001F2   0xF850 0x1027      LDR      R1,[R0, R7, LSL #+2]
   \   000001F6   0xF1D6 0x0008      RSBS     R0,R6,#+8
   \   000001FA   0x2708             MOVS     R7,#+8
   \   000001FC   0xFBB0 0xFCF7      UDIV     R12,R0,R7
   \   00000200   0xFB0C 0x0C17      MLS      R12,R12,R7,R0
   \   00000204   0xA806             ADD      R0,SP,#+24
   \   00000206   0xF850 0x002C      LDR      R0,[R0, R12, LSL #+2]
   \   0000020A   0x.... 0x....      BL       P
    158                  }
   \   0000020E   0x1C76             ADDS     R6,R6,#+1
   \                     ??SHA256_Process_8: (+1)
   \   00000210   0x2E08             CMP      R6,#+8
   \   00000212   0xF4FF 0xAF79      BCC.W    ??SHA256_Process_7
   \   00000216   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SHA256_Process_6: (+1)
   \   00000218   0x2D06             CMP      R5,#+6
   \   0000021A   0xD201             BCS.N    ??SHA256_Process_9
   \   0000021C   0x2600             MOVS     R6,#+0
   \   0000021E   0xE7F7             B.N      ??SHA256_Process_8
    159              }
    160              
    161              for(indexA=0;indexA<8;indexA++)
   \                     ??SHA256_Process_9: (+1)
   \   00000220   0x2500             MOVS     R5,#+0
   \   00000222   0xE00A             B.N      ??SHA256_Process_10
    162              {
    163                  ctx->state[indexA] += stateN[indexA];
   \                     ??SHA256_Process_11: (+1)
   \   00000224   0xEB14 0x0085      ADDS     R0,R4,R5, LSL #+2
   \   00000228   0x6880             LDR      R0,[R0, #+8]
   \   0000022A   0xA906             ADD      R1,SP,#+24
   \   0000022C   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \   00000230   0x1808             ADDS     R0,R1,R0
   \   00000232   0xEB14 0x0185      ADDS     R1,R4,R5, LSL #+2
   \   00000236   0x6088             STR      R0,[R1, #+8]
    164              }
   \   00000238   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SHA256_Process_10: (+1)
   \   0000023A   0x2D08             CMP      R5,#+8
   \   0000023C   0xD3F2             BCC.N    ??SHA256_Process_11
    165          }
   \   0000023E   0xB04F             ADD      SP,SP,#+316
   \   00000240   0xBDF0             POP      {R4-R7,PC}       ;; return
    166          
    167          /*********************************************************
    168          函数定义：PubCrypt_SHA256Update
    169          函数功能： SHA-256 HASH算法
    170          参数
    171          	hd(in/out)	sha256结构体
    172          	inbuf(in)	写入的数据
    173          	inlen(in)	写入数据的长度
    174          返回值
    175          	RETURN_SUCC 成功
    176          	RETURN_FAIL 失败
    177          	RETURN_ERR_PARAM 参数错
    178          *********************************************************/

   \                                 In section .text, align 2, keep-with-next
    179          int PubCrypt_SHA256Update( SHA256_CONTEXT *hd, unsigned char *inbuf, unsigned int inlen)
    180          {
   \                     PubCrypt_SHA256Update: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    181              int  fill;
    182              unsigned int  left;
    183              //去掉判断，减少代码空间
    184              //if(hd==NULL || inbuf==NULL || inlen <= 0)
    185              //{
    186              //    return RETURN_ERR_PARAM;
    187              //}
    188          
    189              left = hd->total[0] & 0x3F;
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0xF010 0x073F      ANDS     R7,R0,#0x3F
    190              fill = 64 - left;
   \   00000010   0xF1D7 0x0840      RSBS     R8,R7,#+64
    191          
    192              hd->total[0] += inlen;
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0x1830             ADDS     R0,R6,R0
   \   00000018   0x6020             STR      R0,[R4, #+0]
    193              hd->total[0] &= 0xFFFFFFFF;
   \   0000001A   0x6820             LDR      R0,[R4, #+0]
   \   0000001C   0x6020             STR      R0,[R4, #+0]
    194          
    195              if(hd->total[0] < (unsigned long) inlen )
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xD202             BCS.N    ??PubCrypt_SHA256Update_0
    196              {
    197                  hd->total[1]++;
   \   00000024   0x6860             LDR      R0,[R4, #+4]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x6060             STR      R0,[R4, #+4]
    198              }
    199          
    200              if(left && inlen >= fill )
   \                     ??PubCrypt_SHA256Update_0: (+1)
   \   0000002A   0x2F00             CMP      R7,#+0
   \   0000002C   0xD018             BEQ.N    ??PubCrypt_SHA256Update_1
   \   0000002E   0x4546             CMP      R6,R8
   \   00000030   0xD316             BCC.N    ??PubCrypt_SHA256Update_1
    201              {
    202                  memcpy((void *) (hd->buffer + left),(void *) inbuf, fill );
   \   00000032   0x4642             MOV      R2,R8
   \   00000034   0x0029             MOVS     R1,R5
   \   00000036   0x1938             ADDS     R0,R7,R4
   \   00000038   0x3028             ADDS     R0,R0,#+40
   \   0000003A   0x.... 0x....      BL       memcpy
    203                  SHA256_Process(hd, hd->buffer );
   \   0000003E   0xF114 0x0128      ADDS     R1,R4,#+40
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x.... 0x....      BL       SHA256_Process
    204                  inbuf += fill;
   \   00000048   0xEB18 0x0505      ADDS     R5,R8,R5
    205                  inlen  -= fill;
   \   0000004C   0xEBB6 0x0608      SUBS     R6,R6,R8
    206                  left = 0;
   \   00000050   0x2700             MOVS     R7,#+0
   \   00000052   0xE005             B.N      ??PubCrypt_SHA256Update_1
    207              }
    208          
    209              while(inlen >= 64 )
    210              {
    211                  SHA256_Process(hd, inbuf );
   \                     ??PubCrypt_SHA256Update_2: (+1)
   \   00000054   0x0029             MOVS     R1,R5
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0x.... 0x....      BL       SHA256_Process
    212                  inbuf += 64;
   \   0000005C   0x3540             ADDS     R5,R5,#+64
    213                  inlen  -= 64;
   \   0000005E   0x3E40             SUBS     R6,R6,#+64
    214              }
   \                     ??PubCrypt_SHA256Update_1: (+1)
   \   00000060   0x2E40             CMP      R6,#+64
   \   00000062   0xD2F7             BCS.N    ??PubCrypt_SHA256Update_2
    215          
    216              if(inlen > 0 )
   \   00000064   0x2E00             CMP      R6,#+0
   \   00000066   0xD005             BEQ.N    ??PubCrypt_SHA256Update_3
    217              {
    218                  memcpy((void *) (hd->buffer + left),(void *) inbuf, inlen );
   \   00000068   0x0032             MOVS     R2,R6
   \   0000006A   0x0029             MOVS     R1,R5
   \   0000006C   0x1938             ADDS     R0,R7,R4
   \   0000006E   0x3028             ADDS     R0,R0,#+40
   \   00000070   0x.... 0x....      BL       memcpy
    219              }
    220              return RETURN_SUCC;
   \                     ??PubCrypt_SHA256Update_3: (+1)
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    221          }
    222          
    223          /*********************************************************
    224          函数定义：PubCrypt_SHA256Final
    225          函数功能： SHA-256 HASH算法
    226          参数
    227          	hd(in)			sha256结构体
    228          	strHash(out)	最终的hash值
    229          返回值
    230          	RETURN_SUCC 成功
    231          	RETURN_FAIL 失败
    232          	RETURN_ERR_PARAM 参数错
    233          *********************************************************/

   \                                 In section .text, align 2, keep-with-next
    234          int PubCrypt_SHA256Final(SHA256_CONTEXT *hd,unsigned char *strHash)
    235          {
   \                     PubCrypt_SHA256Final: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    236              unsigned int  last, padn;
    237              unsigned int  high, low;
    238              unsigned char  msglen[8];
    239              unsigned char *sha2_padding;
    240              //去掉判断，减少代码空间
    241              //if(hd==NULL || strHash==NULL)
    242              //{
    243              //    return RETURN_ERR_PARAM;
    244              //}
    245          
    246              high = ( hd->total[0] >> 29 ) | ( hd->total[1] <<  3 );
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x6861             LDR      R1,[R4, #+4]
   \   0000000C   0x00C9             LSLS     R1,R1,#+3
   \   0000000E   0xEA51 0x7050      ORRS     R0,R1,R0, LSR #+29
    247              low  = ( hd->total[0] <<  3 );
   \   00000012   0x6821             LDR      R1,[R4, #+0]
   \   00000014   0x00CE             LSLS     R6,R1,#+3
    248          
    249              IntToHex( high, msglen);
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0x.... 0x....      BL       IntToHex
    250              IntToHex( low,  msglen+4);
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0x.... 0x....      BL       IntToHex
    251          
    252              last = hd->total[0] & 0x3F;
   \   00000024   0x7820             LDRB     R0,[R4, #+0]
   \   00000026   0xF010 0x003F      ANDS     R0,R0,#0x3F
    253              padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
   \   0000002A   0x2838             CMP      R0,#+56
   \   0000002C   0xD202             BCS.N    ??PubCrypt_SHA256Final_0
   \   0000002E   0xF1D0 0x0638      RSBS     R6,R0,#+56
   \   00000032   0xE001             B.N      ??PubCrypt_SHA256Final_1
   \                     ??PubCrypt_SHA256Final_0: (+1)
   \   00000034   0xF1D0 0x0678      RSBS     R6,R0,#+120
    254          
    255              sha2_padding=(unsigned char *)malloc(padn);
   \                     ??PubCrypt_SHA256Final_1: (+1)
   \   00000038   0x0030             MOVS     R0,R6
   \   0000003A   0x.... 0x....      BL       malloc
   \   0000003E   0x0007             MOVS     R7,R0
    256              if(sha2_padding==NULL)
   \   00000040   0x2F00             CMP      R7,#+0
   \   00000042   0xD101             BNE.N    ??PubCrypt_SHA256Final_2
    257              {
    258                  return RETURN_FAIL;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xE029             B.N      ??PubCrypt_SHA256Final_3
    259              }
    260              memset(sha2_padding,0,padn);
   \                     ??PubCrypt_SHA256Final_2: (+1)
   \   00000048   0x0032             MOVS     R2,R6
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x0038             MOVS     R0,R7
   \   0000004E   0x.... 0x....      BL       memset
    261              sha2_padding[0]=0x80;
   \   00000052   0x2080             MOVS     R0,#+128
   \   00000054   0x7038             STRB     R0,[R7, #+0]
    262              PubCrypt_SHA256Update( hd, (unsigned char *) sha2_padding, padn );
   \   00000056   0x0032             MOVS     R2,R6
   \   00000058   0x0039             MOVS     R1,R7
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0x.... 0x....      BL       PubCrypt_SHA256Update
    263              free(sha2_padding);
   \   00000060   0x0038             MOVS     R0,R7
   \   00000062   0x.... 0x....      BL       free
    264              PubCrypt_SHA256Update( hd, msglen, 8 );
   \   00000066   0x2208             MOVS     R2,#+8
   \   00000068   0xA900             ADD      R1,SP,#+0
   \   0000006A   0x0020             MOVS     R0,R4
   \   0000006C   0x.... 0x....      BL       PubCrypt_SHA256Update
    265          
    266              for(padn=0;padn<7;padn++)
   \   00000070   0x2600             MOVS     R6,#+0
   \   00000072   0xE007             B.N      ??PubCrypt_SHA256Final_4
    267              {
    268                  IntToHex( hd->state[padn], strHash+padn*4);
   \                     ??PubCrypt_SHA256Final_5: (+1)
   \   00000074   0xEB15 0x0186      ADDS     R1,R5,R6, LSL #+2
   \   00000078   0xEB14 0x0086      ADDS     R0,R4,R6, LSL #+2
   \   0000007C   0x6880             LDR      R0,[R0, #+8]
   \   0000007E   0x.... 0x....      BL       IntToHex
    269              }
   \   00000082   0x1C76             ADDS     R6,R6,#+1
   \                     ??PubCrypt_SHA256Final_4: (+1)
   \   00000084   0x2E07             CMP      R6,#+7
   \   00000086   0xD3F5             BCC.N    ??PubCrypt_SHA256Final_5
    270          
    271              if( hd->is224 == 0 )
   \   00000088   0xF894 0x00E8      LDRB     R0,[R4, #+232]
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD104             BNE.N    ??PubCrypt_SHA256Final_6
    272              {
    273                  IntToHex( hd->state[7], strHash+28 );
   \   00000090   0xF115 0x011C      ADDS     R1,R5,#+28
   \   00000094   0x6A60             LDR      R0,[R4, #+36]
   \   00000096   0x.... 0x....      BL       IntToHex
    274              }
    275              return RETURN_SUCC;
   \                     ??PubCrypt_SHA256Final_6: (+1)
   \   0000009A   0x2001             MOVS     R0,#+1
   \                     ??PubCrypt_SHA256Final_3: (+1)
   \   0000009C   0xBDFE             POP      {R1-R7,PC}       ;; return
    276          }
    277          
    278          /*********************************************************
    279          函数定义：PubCrypt_SHA256
    280          函数功能： SHA-256 HASH算法
    281          参数
    282          	pData(in)             --生成SHA的数据
    283          	pLen(in)              --数据长度
    284          	strHash(out)          --生成的HASH值(32字节)
    285          返回值
    286          	RETURN_SUCC 成功
    287          	RETURN_FAIL 失败
    288          	RETURN_ERR_PARAM 参数错误
    289          *********************************************************/

   \                                 In section .text, align 2, keep-with-next
    290          int PubCrypt_SHA256(const unsigned char *pData,unsigned int pLen,unsigned char *strHash)
    291          {
   \                     PubCrypt_SHA256: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    292              SHA256_CONTEXT *ctx;
    293              //去掉判断，减少代码空间
    294              //if(pData==NULL || strHash==NULL)
    295              //{
    296              //	return RETURN_ERR_PARAM;
    297              //}
    298              ctx=(SHA256_CONTEXT *)malloc(sizeof(SHA256_CONTEXT));
   \   00000008   0x20EC             MOVS     R0,#+236
   \   0000000A   0x.... 0x....      BL       malloc
   \   0000000E   0x0007             MOVS     R7,R0
    299              if(ctx==NULL)
   \   00000010   0x2F00             CMP      R7,#+0
   \   00000012   0xD101             BNE.N    ??PubCrypt_SHA256_0
    300              {
    301                  return RETURN_FAIL;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE010             B.N      ??PubCrypt_SHA256_1
    302              }
    303              SHA256_Init (ctx,0);
   \                     ??PubCrypt_SHA256_0: (+1)
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x0038             MOVS     R0,R7
   \   0000001C   0x.... 0x....      BL       SHA256_Init
    304              PubCrypt_SHA256Update (ctx, (unsigned char *)pData, pLen);
   \   00000020   0x002A             MOVS     R2,R5
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0x0038             MOVS     R0,R7
   \   00000026   0x.... 0x....      BL       PubCrypt_SHA256Update
    305              PubCrypt_SHA256Final (ctx,strHash);
   \   0000002A   0x0031             MOVS     R1,R6
   \   0000002C   0x0038             MOVS     R0,R7
   \   0000002E   0x.... 0x....      BL       PubCrypt_SHA256Final
    306              free(ctx);
   \   00000032   0x0038             MOVS     R0,R7
   \   00000034   0x.... 0x....      BL       free
    307              return RETURN_SUCC;
   \   00000038   0x2001             MOVS     R0,#+1
   \                     ??PubCrypt_SHA256_1: (+1)
   \   0000003A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    308          }
    309          
    310          /*********************************************************
    311          函数定义：PubCrypt_SHA256Init
    312          函数功能： SHA-256 HASH算法
    313          参数
    314          	hd(in/out)	sha256结构体
    315          返回值
    316          	RETURN_SUCC 成功
    317          	RETURN_FAIL 失败
    318          	RETURN_ERR_PARAM 参数错误
    319          *********************************************************/

   \                                 In section .text, align 2, keep-with-next
    320          int PubCrypt_SHA256Init( SHA256_CONTEXT *hd )
    321          {
   \                     PubCrypt_SHA256Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    322              //去掉判断，减少代码空间
    323              //if(hd==NULL)
    324              //{
    325              //    return RETURN_ERR_PARAM;
    326              //}
    327              SHA256_Init( hd ,0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      BL       SHA256_Init
    328              return RETURN_SUCC;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    329          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x6A09E667         DC32     0x6a09e667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xBB67AE85         DC32     0xbb67ae85

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x3C6EF372         DC32     0x3c6ef372

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xA54FF53A         DC32     0xa54ff53a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x510E527F         DC32     0x510e527f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x9B05688C         DC32     0x9b05688c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x1F83D9AB         DC32     0x1f83d9ab

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x5BE0CD19         DC32     0x5be0cd19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0xC1059ED8         DC32     0xc1059ed8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x367CD507         DC32     0x367cd507

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x3070DD17         DC32     0x3070dd17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0xF70E5939         DC32     0xf70e5939

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0xFFC00B31         DC32     0xffc00b31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x68581511         DC32     0x68581511

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x64F98FA7         DC32     0x64f98fa7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0xBEFA4FA4         DC32     0xbefa4fa4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x........         DC32     KnumA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x........         DC32     KnumB
    330          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HexToInt
       0   IntToHex
      40   P
        40   -> S
      24   PubCrypt_SHA256
        24   -> PubCrypt_SHA256Final
        24   -> PubCrypt_SHA256Update
        24   -> SHA256_Init
        24   -> free
        24   -> malloc
      32   PubCrypt_SHA256Final
        32   -> IntToHex
        32   -> PubCrypt_SHA256Update
        32   -> free
        32   -> malloc
        32   -> memset
       8   PubCrypt_SHA256Init
         8   -> SHA256_Init
      24   PubCrypt_SHA256Update
        24   -> SHA256_Process
        24   -> memcpy
       0   S
       0   SHA256_Init
     336   SHA256_Process
       336   -> HexToInt
       336   -> P
       336   -> S
       336   -> memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      22  HexToInt
      18  IntToHex
      64  KnumA
     192  KnumB
     108  P
      60  PubCrypt_SHA256
     158  PubCrypt_SHA256Final
      12  PubCrypt_SHA256Init
     122  PubCrypt_SHA256Update
      70  S
      86  SHA256_Init
     578  SHA256_Process

 
   256 bytes in section .rodata
 1 306 bytes in section .text
 
 1 306 bytes of CODE  memory
   256 bytes of CONST memory

Errors: none
Warnings: 2
