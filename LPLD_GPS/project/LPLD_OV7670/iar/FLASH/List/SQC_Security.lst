###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        23/Apr/2015  14:23:25
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  G:\test\LPLD_OSKinetis_V3_now02\lib\SQC\SQC_Security.c
#    Command line =  
#        G:\test\LPLD_OSKinetis_V3_now02\lib\SQC\SQC_Security.c -D LPLD_K60
#        -lCN
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\
#        -lB
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\ -o
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        E:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\app\ -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\CPU\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\common\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\HW\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\FatFs\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\FatFs\option\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\common\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\driver\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\descriptor\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\class\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\Security\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\SQC\
#        -Ol -I E:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\SQC_Security.lst
#    Object file  =  
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\Obj\SQC_Security.o
#
###############################################################################

G:\test\LPLD_OSKinetis_V3_now02\lib\SQC\SQC_Security.c
      1          /**
      2           * @file SQC_Security.c
      3           * @version 1.0[By finley]
      4           * @date 2015-04-16
      5           * @brief 数据加密相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:宿迁学院物联网实验室
     10           * http://www.sqc.edu.cn
     11           *
     12           * @par
     13           * 本代码由宿迁学院[SQC]开发并维护，并向所有使用者开放源代码。
     14           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     15           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     16           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     17           * 宿迁学院不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     18           * 宿迁学院无义务解释、说明本代码的具体原理、功能、实现方法。
     19           * 除非宿迁学院[SQC]授权，开发者不得将本代码用于商业产品。
     20           */
     21          #include "common.h"
     22          #include "SQC_Security.h"
     23          #include "SHA256.h"
     24          #include "aes256.h"
     25          
     26          
     27          //获取unique id(128bit)

   \                                 In section .text, align 2, keep-with-next
     28          uint8 * SQC_SEC_GetID()
     29          {
   \                     SQC_SEC_GetID: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     30            uint32* uniqueid = (uint32*)malloc(sizeof(uint32)*4);
   \   00000002   0x2010             MOVS     R0,#+16
   \   00000004   0x.... 0x....      BL       malloc
     31            uniqueid[0] = SIM->UIDH;
   \   00000008   0x....             LDR.N    R1,??DataTable0  ;; 0x40048054
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     32            uniqueid[1] = SIM->UIDMH;
   \   0000000E   0x....             LDR.N    R1,??DataTable0_1  ;; 0x40048058
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0x6041             STR      R1,[R0, #+4]
     33            uniqueid[2] = SIM->UIDML;
   \   00000014   0x....             LDR.N    R1,??DataTable0_2  ;; 0x4004805c
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0x6081             STR      R1,[R0, #+8]
     34            uniqueid[3] = SIM->UIDL;
   \   0000001A   0x....             LDR.N    R1,??DataTable0_3  ;; 0x40048060
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0x60C1             STR      R1,[R0, #+12]
     35            return (uint8*)uniqueid;
   \   00000020   0xBD02             POP      {R1,PC}          ;; return
     36          }
     37          
     38          //生成sha256哈希值

   \                                 In section .text, align 2, keep-with-next
     39          uint8 SQC_SEC_Sha256(uint8* input,uint16 len,uint8* key)
     40          {
   \                     SQC_SEC_Sha256: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     41            return PubCrypt_SHA256(input,len,key);
   \   00000002   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000004   0x.... 0x....      BL       PubCrypt_SHA256
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
     42          }
     43          
     44          //加密数据(256bit密钥）
     45          //返回密文的长度（字节），参数为（密钥，密文指针（返回），明文指针，明文长度）

   \                                 In section .text, align 2, keep-with-next
     46          uint16 SQC_SEC_AESenc(uint8* key,uint8** cry,uint8* data,uint16 len)
     47          {
   \                     SQC_SEC_AESenc: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB099             SUB      SP,SP,#+100
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000C             MOVS     R4,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
     48            uint16 relen;
     49            uint8  fill,t1,t2,t3;
     50            aes256_context ctx;
     51            
     52            t1 = len%16;
   \   0000000E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000010   0x2110             MOVS     R1,#+16
   \   00000012   0xFB97 0xF0F1      SDIV     R0,R7,R1
   \   00000016   0xFB00 0x7011      MLS      R0,R0,R1,R7
     53            if(t1 == 0)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD104             BNE.N    ??SQC_SEC_AESenc_0
     54            {
     55              fill = 16;
   \   00000020   0xF05F 0x0910      MOVS     R9,#+16
     56              relen = len + 16;
   \   00000024   0xF117 0x0810      ADDS     R8,R7,#+16
   \   00000028   0xE003             B.N      ??SQC_SEC_AESenc_1
     57            }
     58            else
     59            {
     60              fill = 16 - t1;
   \                     ??SQC_SEC_AESenc_0: (+1)
   \   0000002A   0xF1D0 0x0910      RSBS     R9,R0,#+16
     61              relen = len + fill;
   \   0000002E   0xFA57 0xF889      UXTAB    R8,R7,R9
     62            }
     63            *cry = (uint8*)malloc(sizeof(uint8)*relen);
   \                     ??SQC_SEC_AESenc_1: (+1)
   \   00000032   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000036   0x4640             MOV      R0,R8
   \   00000038   0x.... 0x....      BL       malloc
   \   0000003C   0x6020             STR      R0,[R4, #+0]
     64            for(t2=0;t2<relen;t2++)
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE004             B.N      ??SQC_SEC_AESenc_2
     65            {
     66              if(t2<len)
     67                (*cry)[t2] = data[t2];
     68              else
     69                (*cry)[t2] = fill;
   \                     ??SQC_SEC_AESenc_3: (+1)
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x6821             LDR      R1,[R4, #+0]
   \   00000046   0xF800 0x9001      STRB     R9,[R0, R1]
   \                     ??SQC_SEC_AESenc_4: (+1)
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \                     ??SQC_SEC_AESenc_2: (+1)
   \   0000004C   0x0001             MOVS     R1,R0
   \   0000004E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000050   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000052   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000056   0x4541             CMP      R1,R8
   \   00000058   0xD20B             BCS.N    ??SQC_SEC_AESenc_5
   \   0000005A   0x0001             MOVS     R1,R0
   \   0000005C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000060   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000062   0x42B9             CMP      R1,R7
   \   00000064   0xD2ED             BCS.N    ??SQC_SEC_AESenc_3
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0x5D81             LDRB     R1,[R0, R6]
   \   0000006A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0x6822             LDR      R2,[R4, #+0]
   \   0000006E   0x5481             STRB     R1,[R0, R2]
   \   00000070   0xE7EB             B.N      ??SQC_SEC_AESenc_4
     70            }
     71            
     72            aes256_init(&ctx, key);
   \                     ??SQC_SEC_AESenc_5: (+1)
   \   00000072   0x0029             MOVS     R1,R5
   \   00000074   0xA800             ADD      R0,SP,#+0
   \   00000076   0x.... 0x....      BL       aes256_init
     73            for(t3 = 0;t3 < relen/16;t3++)
   \   0000007A   0x2500             MOVS     R5,#+0
   \   0000007C   0xE007             B.N      ??SQC_SEC_AESenc_6
     74            {
     75              aes256_encrypt_ecb(&ctx, ((*cry)+t3*16));
   \                     ??SQC_SEC_AESenc_7: (+1)
   \   0000007E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000080   0x6820             LDR      R0,[R4, #+0]
   \   00000082   0xEB10 0x1105      ADDS     R1,R0,R5, LSL #+4
   \   00000086   0xA800             ADD      R0,SP,#+0
   \   00000088   0x.... 0x....      BL       aes256_encrypt_ecb
     76            }
   \   0000008C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SQC_SEC_AESenc_6: (+1)
   \   0000008E   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000092   0x2010             MOVS     R0,#+16
   \   00000094   0xFB98 0xF0F0      SDIV     R0,R8,R0
   \   00000098   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009A   0x4285             CMP      R5,R0
   \   0000009C   0xDBEF             BLT.N    ??SQC_SEC_AESenc_7
     77            return relen;
   \   0000009E   0x4640             MOV      R0,R8
   \   000000A0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A2   0xB019             ADD      SP,SP,#+100
   \   000000A4   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
     78          }
     79                
     80          //解密数据(256bit密钥）
     81          //返回明文的长度（字节），参数为（密钥，明文指针（返回），密文指针，密文长度）

   \                                 In section .text, align 2, keep-with-next
     82          uint16 SQC_SEC_AESdec(uint8* key,uint8** data,uint8* cry,uint16 len)
     83          {
   \                     SQC_SEC_AESdec: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB099             SUB      SP,SP,#+100
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
     84            uint16 relen;
     85            uint8  fill,t3;
     86            aes256_context ctx;
     87            
     88            aes256_init(&ctx, key);
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       aes256_init
     89            
     90            for(t3 = 0;t3 < len/16;t3++)
   \   00000012   0x2700             MOVS     R7,#+0
   \   00000014   0xE006             B.N      ??SQC_SEC_AESdec_0
     91            {
     92              aes256_decrypt_ecb(&ctx,(cry+t3*16));
   \                     ??SQC_SEC_AESdec_1: (+1)
   \   00000016   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000018   0xEB15 0x1107      ADDS     R1,R5,R7, LSL #+4
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0x.... 0x....      BL       aes256_decrypt_ecb
     93            }
   \   00000022   0x1C7F             ADDS     R7,R7,#+1
   \                     ??SQC_SEC_AESdec_0: (+1)
   \   00000024   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000026   0x2010             MOVS     R0,#+16
   \   00000028   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   0000002C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002E   0x4287             CMP      R7,R0
   \   00000030   0xDBF1             BLT.N    ??SQC_SEC_AESdec_1
     94            fill = cry[len-1];
   \   00000032   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000034   0x1970             ADDS     R0,R6,R5
   \   00000036   0xF810 0x0C01      LDRB     R0,[R0, #-1]
     95            relen = len - fill;
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x1A36             SUBS     R6,R6,R0
     96            (*data) = (uint8*)malloc(sizeof(uint8)*relen);
   \   0000003E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000040   0x0030             MOVS     R0,R6
   \   00000042   0x.... 0x....      BL       malloc
   \   00000046   0x6020             STR      R0,[R4, #+0]
     97            strncpy((*data),cry,relen);
   \   00000048   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000004A   0x0032             MOVS     R2,R6
   \   0000004C   0x0029             MOVS     R1,R5
   \   0000004E   0x6820             LDR      R0,[R4, #+0]
   \   00000050   0x.... 0x....      BL       strncpy
     98            return relen;
   \   00000054   0x0030             MOVS     R0,R6
   \   00000056   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000058   0xB019             ADD      SP,SP,#+100
   \   0000005A   0xBDF0             POP      {R4-R7,PC}       ;; return
     99          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40048054         DC32     0x40048054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x40048058         DC32     0x40048058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x4004805C         DC32     0x4004805c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x40048060         DC32     0x40048060

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     120   SQC_SEC_AESdec
       120   -> aes256_decrypt_ecb
       120   -> aes256_init
       120   -> malloc
       120   -> strncpy
     128   SQC_SEC_AESenc
       128   -> aes256_encrypt_ecb
       128   -> aes256_init
       128   -> malloc
       8   SQC_SEC_GetID
         8   -> malloc
       8   SQC_SEC_Sha256
         8   -> PubCrypt_SHA256


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
      92  SQC_SEC_AESdec
     168  SQC_SEC_AESenc
      34  SQC_SEC_GetID
      12  SQC_SEC_Sha256

 
 322 bytes in section .text
 
 322 bytes of CODE memory

Errors: none
Warnings: 2
