###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        23/Apr/2015  14:23:12
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  G:\test\LPLD_OSKinetis_V3_now02\lib\LPLD\DEV\DEV_LCD.c
#    Command line =  
#        G:\test\LPLD_OSKinetis_V3_now02\lib\LPLD\DEV\DEV_LCD.c -D LPLD_K60
#        -lCN
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\
#        -lB
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\ -o
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        E:\iar\arm\INC\c\DLib_Config_Normal.h -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\app\ -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\CPU\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\common\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\HW\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\FatFs\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\FatFs\option\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\common\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\driver\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\descriptor\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\USB\class\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\Security\
#        -I
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\..\..\..\lib\SQC\
#        -Ol -I E:\iar\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\List\DEV_LCD.lst
#    Object file  =  
#        G:\test\LPLD_OSKinetis_V3_now02\project\LPLD_OV7670\iar\FLASH\Obj\DEV_LCD.o
#
###############################################################################

G:\test\LPLD_OSKinetis_V3_now02\lib\LPLD\DEV\DEV_LCD.c
      1          /**
      2           * @file DEV_LCD.c
      3           * @version 0.2[By LPLD]
      4           * @date 2013-10-21
      5           * @brief LCD设备驱动程序
      6           *
      7           * 更改建议:可根据实际硬件修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           *
     22           * 0.2-2013-10-21 优化初始化函数、字符串数字显示函数
     23           */
     24          #include "DEV_LCD.h"
     25          #include "Font_ASC.h"

   \                                 In section .rodata, align 4
   \   __absolute unsigned char const asc2_1608[95][16]
   \                     asc2_1608:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x08    
   \              0x08 0x08    
   \              0x08         
   \   00000017   0x08 0x08          DC8 8, 8, 8, 0, 0, 24, 24, 0, 0, 0, 72, 108, 36, 18, 0, 0, 0, 0, 0, 0
   \              0x08 0x00    
   \              0x00 0x18    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x48 0x6C    
   \              0x24 0x12    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000002B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 36, 127, 18, 18, 18, 127, 18, 18
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x24 0x24    
   \              0x24 0x7F    
   \              0x12 0x12    
   \              0x12 0x7F    
   \              0x12 0x12    
   \   0000003D   0x12 0x00          DC8 18, 0, 0, 0, 0, 8, 28, 42, 42, 10, 12, 24, 40, 40, 42, 42, 28, 8, 8
   \              0x00 0x00    
   \              0x00 0x08    
   \              0x1C 0x2A    
   \              0x2A 0x0A    
   \              0x0C 0x18    
   \              0x28 0x28    
   \              0x2A 0x2A    
   \              0x1C 0x08    
   \              0x08         
   \   00000050   0x00 0x00          DC8 0, 0, 0, 34, 37, 21, 21, 21, 42, 88, 84, 84, 84, 34, 0, 0, 0, 0, 0
   \              0x00 0x22    
   \              0x25 0x15    
   \              0x15 0x15    
   \              0x2A 0x58    
   \              0x54 0x54    
   \              0x54 0x22    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000063   0x0C 0x12          DC8 12, 18, 18, 18, 10, 118, 37, 41, 17, 145, 110, 0, 0, 0, 6, 6, 4, 3
   \              0x12 0x12    
   \              0x0A 0x76    
   \              0x25 0x29    
   \              0x11 0x91    
   \              0x6E 0x00    
   \              0x00 0x00    
   \              0x06 0x06    
   \              0x04 0x03    
   \   00000075   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 32, 16, 16, 8, 8, 8, 8, 8
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40 0x20    
   \              0x10 0x10    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08         
   \   0000008A   0x08 0x10          DC8 8, 16, 16, 32, 64, 0, 0, 2, 4, 8, 8, 16, 16, 16, 16, 16, 16, 8, 8
   \              0x10 0x20    
   \              0x40 0x00    
   \              0x00 0x02    
   \              0x04 0x08    
   \              0x08 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x08    
   \              0x08         
   \   0000009D   0x04 0x02          DC8 4, 2, 0, 0, 0, 0, 0, 8, 8, 107, 28, 28, 107, 8, 8, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x08    
   \              0x08 0x6B    
   \              0x1C 0x1C    
   \              0x6B 0x08    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B2   0x00 0x00          DC8 0, 0, 8, 8, 8, 8, 127, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x7F 0x08    
   \              0x08 0x08    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C8   0x00 0x00          DC8 0, 0, 0, 0, 6, 6, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x06 0x06    
   \              0x04 0x03    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFE 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000DE   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 128, 64
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x06 0x06    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x40    
   \   000000F4   0x40 0x20          DC8 64, 32, 32, 16, 16, 8, 8, 4, 4, 2, 2, 0, 0, 0, 0, 24, 36, 66, 66
   \              0x20 0x10    
   \              0x10 0x08    
   \              0x08 0x04    
   \              0x04 0x02    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \              0x24 0x42    
   \              0x42         
   \   00000107   0x42 0x42          DC8 66, 66, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 8, 14, 8, 8, 8, 8, 8, 8
   \              0x42 0x42    
   \              0x42 0x24    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x0E    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \   0000011B   0x08 0x08          DC8 8, 8, 62, 0, 0, 0, 0, 0, 60, 66, 66, 66, 32, 32, 16, 8, 4, 66, 126
   \              0x3E 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3C 0x42    
   \              0x42 0x42    
   \              0x20 0x20    
   \              0x10 0x08    
   \              0x04 0x42    
   \              0x7E         
   \   0000012E   0x00 0x00          DC8 0, 0, 0, 0, 0, 60, 66, 66, 32, 24, 32, 64, 64, 66, 34, 28, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x3C    
   \              0x42 0x42    
   \              0x20 0x18    
   \              0x20 0x40    
   \              0x40 0x42    
   \              0x22 0x1C    
   \              0x00 0x00    
   \              0x00         
   \   00000141   0x00 0x00          DC8 0, 0, 32, 48, 40, 36, 36, 34, 34, 126, 32, 32, 120, 0, 0, 0, 0, 0
   \              0x20 0x30    
   \              0x28 0x24    
   \              0x24 0x22    
   \              0x22 0x7E    
   \              0x20 0x20    
   \              0x78 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000153   0x7E 0x02          DC8 126, 2, 2, 2, 26, 38, 64, 64, 66, 34, 28, 0, 0, 0, 0, 0, 56, 36, 2
   \              0x02 0x02    
   \              0x1A 0x26    
   \              0x40 0x40    
   \              0x42 0x22    
   \              0x1C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x38 0x24    
   \              0x02         
   \   00000166   0x02 0x1A          DC8 2, 26, 38, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 126, 34, 34, 16, 16
   \              0x26 0x42    
   \              0x42 0x42    
   \              0x24 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7E    
   \              0x22 0x22    
   \              0x10 0x10    
   \   00000178   0x08 0x08          DC8 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 60, 66, 66, 66, 36, 24, 36, 66, 66
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3C    
   \              0x42 0x42    
   \              0x42 0x24    
   \              0x18 0x24    
   \              0x42 0x42    
   \   0000018C   0x42 0x3C          DC8 66, 60, 0, 0, 0, 0, 0, 24, 36, 66, 66, 66, 100, 88, 64, 64, 36, 28
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \              0x24 0x42    
   \              0x42 0x42    
   \              0x64 0x58    
   \              0x40 0x40    
   \              0x24 0x1C    
   \   0000019E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x18 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x18 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001B3   0x00 0x00          DC8 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 8, 4, 0, 0, 0, 64, 32, 16, 8, 4, 2
   \              0x00 0x00    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x08    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x40 0x20    
   \              0x10 0x08    
   \              0x04 0x02    
   \   000001C9   0x04 0x08          DC8 4, 8, 16, 32, 64, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 127, 0, 0
   \              0x10 0x20    
   \              0x40 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7F    
   \              0x00 0x00    
   \              0x00 0x7F    
   \              0x00 0x00    
   \   000001DD   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 64, 32, 16, 8, 4, 2, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x04    
   \              0x08 0x10    
   \              0x20 0x40    
   \              0x20 0x10    
   \              0x08 0x04    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001F2   0x00 0x3C          DC8 0, 60, 66, 66, 70, 64, 32, 16, 16, 0, 24, 24, 0, 0, 0, 0, 0, 28, 34
   \              0x42 0x42    
   \              0x46 0x40    
   \              0x20 0x10    
   \              0x10 0x00    
   \              0x18 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1C    
   \              0x22         
   \   00000205   0x5A 0x55          DC8 90, 85, 85, 85, 85, 45, 66, 34, 28, 0, 0, 0, 0, 0, 8, 8, 24, 20, 20
   \              0x55 0x55    
   \              0x55 0x2D    
   \              0x42 0x22    
   \              0x1C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x08    
   \              0x18 0x14    
   \              0x14         
   \   00000218   0x24 0x3C          DC8 36, 60, 34, 66, 66, 231, 0, 0, 0, 0, 0, 31, 34, 34, 34, 30, 34, 66
   \              0x22 0x42    
   \              0x42 0xE7    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1F    
   \              0x22 0x22    
   \              0x22 0x1E    
   \              0x22 0x42    
   \   0000022A   0x42 0x42          DC8 66, 66, 34, 31, 0, 0, 0, 0, 0, 124, 66, 66, 1, 1, 1, 1, 1, 66, 34
   \              0x22 0x1F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7C    
   \              0x42 0x42    
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x01 0x42    
   \              0x22         
   \   0000023D   0x1C 0x00          DC8 28, 0, 0, 0, 0, 0, 31, 34, 66, 66, 66, 66, 66, 66, 66, 34, 31, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1F 0x22    
   \              0x42 0x42    
   \              0x42 0x42    
   \              0x42 0x42    
   \              0x42 0x22    
   \              0x1F 0x00    
   \              0x00         
   \   00000250   0x00 0x00          DC8 0, 0, 0, 63, 66, 18, 18, 30, 18, 18, 2, 66, 66, 63, 0, 0, 0, 0, 0
   \              0x00 0x3F    
   \              0x42 0x12    
   \              0x12 0x1E    
   \              0x12 0x12    
   \              0x02 0x42    
   \              0x42 0x3F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000263   0x3F 0x42          DC8 63, 66, 18, 18, 30, 18, 18, 2, 2, 2, 7, 0, 0, 0, 0, 0, 60, 34, 34
   \              0x12 0x12    
   \              0x1E 0x12    
   \              0x12 0x02    
   \              0x02 0x02    
   \              0x07 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3C 0x22    
   \              0x22         
   \   00000276   0x01 0x01          DC8 1, 1, 1, 113, 33, 34, 34, 28, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66
   \              0x01 0x71    
   \              0x21 0x22    
   \              0x22 0x1C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE7    
   \              0x42 0x42    
   \              0x42 0x42    
   \   00000288   0x7E 0x42          DC8 126, 66, 66, 66, 66, 231, 0, 0, 0, 0, 0, 62, 8, 8, 8, 8, 8, 8, 8, 8
   \              0x42 0x42    
   \              0x42 0xE7    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3E    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \   0000029C   0x08 0x3E          DC8 8, 62, 0, 0, 0, 0, 0, 124, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7C    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \   000002AE   0x11 0x0F          DC8 17, 15, 0, 0, 0, 119, 34, 18, 10, 14, 10, 18, 18, 34, 34, 119, 0, 0
   \              0x00 0x00    
   \              0x00 0x77    
   \              0x22 0x12    
   \              0x0A 0x0E    
   \              0x0A 0x12    
   \              0x12 0x22    
   \              0x22 0x77    
   \              0x00 0x00    
   \   000002C0   0x00 0x00          DC8 0, 0, 0, 7, 2, 2, 2, 2, 2, 2, 2, 2, 66, 127, 0, 0, 0, 0, 0, 119, 54
   \              0x00 0x07    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x42 0x7F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x77    
   \              0x36         
   \   000002D5   0x36 0x36          DC8 54, 54, 54, 42, 42, 42, 42, 42, 107, 0, 0, 0, 0, 0, 227, 70, 70, 74
   \              0x36 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x6B 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xE3 0x46    
   \              0x46 0x4A    
   \   000002E7   0x4A 0x52          DC8 74, 82, 82, 82, 98, 98, 71, 0, 0, 0, 0, 0, 28, 34, 65, 65, 65, 65
   \              0x52 0x52    
   \              0x62 0x62    
   \              0x47 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1C 0x22    
   \              0x41 0x41    
   \              0x41 0x41    
   \   000002F9   0x41 0x41          DC8 65, 65, 65, 34, 28, 0, 0, 0, 0, 0, 63, 66, 66, 66, 66, 62, 2, 2, 2
   \              0x41 0x22    
   \              0x1C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3F 0x42    
   \              0x42 0x42    
   \              0x42 0x3E    
   \              0x02 0x02    
   \              0x02         
   \   0000030C   0x02 0x07          DC8 2, 7, 0, 0, 0, 0, 0, 28, 34, 65, 65, 65, 65, 65, 77, 83, 50, 28, 96
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1C    
   \              0x22 0x41    
   \              0x41 0x41    
   \              0x41 0x41    
   \              0x4D 0x53    
   \              0x32 0x1C    
   \              0x60         
   \   0000031F   0x00 0x00          DC8 0, 0, 0, 0, 63, 66, 66, 66, 62, 18, 18, 34, 34, 66, 199, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x3F 0x42    
   \              0x42 0x42    
   \              0x3E 0x12    
   \              0x12 0x22    
   \              0x22 0x42    
   \              0xC7 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000332   0x00 0x7C          DC8 0, 124, 66, 66, 2, 4, 24, 32, 64, 66, 66, 62, 0, 0, 0, 0, 0, 127
   \              0x42 0x42    
   \              0x02 0x04    
   \              0x18 0x20    
   \              0x40 0x42    
   \              0x42 0x3E    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7F    
   \   00000344   0x49 0x08          DC8 73, 8, 8, 8, 8, 8, 8, 8, 8, 28, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x1C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE7    
   \              0x42 0x42    
   \              0x42 0x42    
   \   00000358   0x42 0x42          DC8 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0, 231, 66, 66, 34, 36, 36, 20
   \              0x42 0x42    
   \              0x42 0x3C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE7    
   \              0x42 0x42    
   \              0x22 0x24    
   \              0x24 0x14    
   \   0000036A   0x14 0x18          DC8 20, 24, 8, 8, 0, 0, 0, 0, 0, 107, 73, 73, 73, 73, 85, 85, 54, 34
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x6B    
   \              0x49 0x49    
   \              0x49 0x49    
   \              0x55 0x55    
   \              0x36 0x22    
   \   0000037C   0x22 0x22          DC8 34, 34, 0, 0, 0, 0, 0, 231, 66, 36, 36, 24, 24, 24, 36, 36, 66, 231
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE7    
   \              0x42 0x24    
   \              0x24 0x18    
   \              0x18 0x18    
   \              0x24 0x24    
   \              0x42 0xE7    
   \   0000038E   0x00 0x00          DC8 0, 0, 0, 0, 0, 119, 34, 34, 20, 20, 8, 8, 8, 8, 8, 28, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x77    
   \              0x22 0x22    
   \              0x14 0x14    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x1C    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003A2   0x00 0x7E          DC8 0, 126, 33, 32, 16, 16, 8, 4, 4, 66, 66, 63, 0, 0, 0, 120, 8, 8, 8
   \              0x21 0x20    
   \              0x10 0x10    
   \              0x08 0x04    
   \              0x04 0x42    
   \              0x42 0x3F    
   \              0x00 0x00    
   \              0x00 0x78    
   \              0x08 0x08    
   \              0x08         
   \   000003B5   0x08 0x08          DC8 8, 8, 8, 8, 8, 8, 8, 8, 8, 120, 0, 0, 0, 2, 2, 4, 4, 8, 8, 8, 16
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08 0x78    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x02 0x04    
   \              0x04 0x08    
   \              0x08 0x08    
   \              0x10         
   \   000003CA   0x10 0x20          DC8 16, 32, 32, 32, 64, 64, 0, 30, 16, 16, 16, 16, 16, 16, 16, 16, 16
   \              0x20 0x20    
   \              0x40 0x40    
   \              0x00 0x1E    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10         
   \   000003DB   0x10 0x10          DC8 16, 16, 16, 30, 0, 0, 56, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x10 0x1E    
   \              0x00 0x00    
   \              0x38 0x44    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000003F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 6, 8, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFF    
   \              0x00 0x06    
   \              0x08 0x00    
   \              0x00 0x00    
   \   00000406   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 120, 68
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3C    
   \              0x42 0x78    
   \              0x44         
   \   0000041B   0x42 0x42          DC8 66, 66, 252, 0, 0, 0, 0, 0, 3, 2, 2, 2, 26, 38, 66, 66, 66, 38, 26
   \              0xFC 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x02    
   \              0x02 0x02    
   \              0x1A 0x26    
   \              0x42 0x42    
   \              0x42 0x26    
   \              0x1A         
   \   0000042E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 68, 2, 2, 2, 68, 56, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x38    
   \              0x44 0x02    
   \              0x02 0x02    
   \              0x44 0x38    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000443   0x60 0x40          DC8 96, 64, 64, 64, 120, 68, 66, 66, 66, 100, 216, 0, 0, 0, 0, 0, 0, 0
   \              0x40 0x40    
   \              0x78 0x44    
   \              0x42 0x42    
   \              0x42 0x64    
   \              0xD8 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000455   0x00 0x00          DC8 0, 0, 60, 66, 126, 2, 2, 66, 60, 0, 0, 0, 0, 0, 240, 136, 8, 8, 126
   \              0x3C 0x42    
   \              0x7E 0x02    
   \              0x02 0x42    
   \              0x3C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xF0 0x88    
   \              0x08 0x08    
   \              0x7E         
   \   00000468   0x08 0x08          DC8 8, 8, 8, 8, 8, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 34, 34, 28, 2
   \              0x08 0x08    
   \              0x08 0x3E    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7C    
   \              0x22 0x22    
   \              0x1C 0x02    
   \   0000047C   0x3C 0x42          DC8 60, 66, 66, 60, 0, 0, 0, 3, 2, 2, 2, 58, 70, 66, 66, 66, 66, 231, 0
   \              0x42 0x3C    
   \              0x00 0x00    
   \              0x00 0x03    
   \              0x02 0x02    
   \              0x02 0x3A    
   \              0x46 0x42    
   \              0x42 0x42    
   \              0x42 0xE7    
   \              0x00         
   \   0000048F   0x00 0x00          DC8 0, 0, 0, 0, 12, 12, 0, 0, 14, 8, 8, 8, 8, 8, 62, 0, 0, 0, 0, 0, 48
   \              0x00 0x00    
   \              0x0C 0x0C    
   \              0x00 0x00    
   \              0x0E 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x3E 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x30         
   \   000004A4   0x30 0x00          DC8 48, 0, 0, 56, 32, 32, 32, 32, 32, 32, 34, 30, 0, 0, 0, 3, 2, 2, 2
   \              0x00 0x38    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x22 0x1E    
   \              0x00 0x00    
   \              0x00 0x03    
   \              0x02 0x02    
   \              0x02         
   \   000004B7   0x72 0x12          DC8 114, 18, 10, 22, 18, 34, 119, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8
   \              0x0A 0x16    
   \              0x12 0x22    
   \              0x77 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x0E 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x08         
   \   000004CA   0x08 0x08          DC8 8, 8, 8, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 146, 146, 146, 146
   \              0x08 0x3E    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7F    
   \              0x92 0x92    
   \              0x92 0x92    
   \   000004DC   0x92 0xB7          DC8 146, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 70, 66, 66, 66, 66, 231, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3B    
   \              0x46 0x42    
   \              0x42 0x42    
   \              0x42 0xE7    
   \              0x00         
   \   000004EF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3C 0x42    
   \              0x42 0x42    
   \              0x42 0x42    
   \              0x3C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000503   0x00 0x00          DC8 0, 0, 0, 0, 27, 38, 66, 66, 66, 34, 30, 2, 7, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x1B 0x26    
   \              0x42 0x42    
   \              0x42 0x22    
   \              0x1E 0x02    
   \              0x07 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000517   0x78 0x44          DC8 120, 68, 66, 66, 66, 68, 120, 64, 224, 0, 0, 0, 0, 0, 0, 0, 119, 76
   \              0x42 0x42    
   \              0x42 0x44    
   \              0x78 0x40    
   \              0xE0 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x77 0x4C    
   \   00000529   0x04 0x04          DC8 4, 4, 4, 4, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 66, 2, 60, 64, 66
   \              0x04 0x04    
   \              0x1F 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7C 0x42    
   \              0x02 0x3C    
   \              0x40 0x42    
   \   0000053D   0x3E 0x00          DC8 62, 0, 0, 0, 0, 0, 0, 0, 8, 8, 62, 8, 8, 8, 8, 8, 48, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x08    
   \              0x3E 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000553   0x00 0x00          DC8 0, 0, 0, 0, 99, 66, 66, 66, 66, 98, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x63 0x42    
   \              0x42 0x42    
   \              0x42 0x62    
   \              0xDC 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000567   0xE7 0x42          DC8 231, 66, 36, 36, 20, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 73, 73
   \              0x24 0x24    
   \              0x14 0x08    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xEB 0x49    
   \              0x49         
   \   0000057A   0x55 0x55          DC8 85, 85, 34, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 36, 24, 24, 24, 36
   \              0x22 0x22    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x76    
   \              0x24 0x18    
   \              0x18 0x18    
   \              0x24         
   \   0000058D   0x6E 0x00          DC8 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 66, 36, 36, 20, 24, 8, 8, 7, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xE7 0x42    
   \              0x24 0x24    
   \              0x14 0x18    
   \              0x08 0x08    
   \              0x07 0x00    
   \   000005A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 126, 34, 16, 8, 8, 68, 126, 0, 0, 0, 192, 32, 32
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7E 0x22    
   \              0x10 0x08    
   \              0x08 0x44    
   \              0x7E 0x00    
   \              0x00 0x00    
   \              0xC0 0x20    
   \              0x20         
   \   000005B4   0x20 0x20          DC8 32, 32, 32, 16, 32, 32, 32, 32, 32, 32, 192, 0, 16, 16, 16, 16, 16
   \              0x20 0x10    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0xC0 0x00    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10         
   \   000005C5   0x10 0x10          DC8 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 6, 8, 8, 8, 8, 8, 16
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x10    
   \              0x10 0x00    
   \              0x06 0x08    
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x10         
   \   000005D8   0x08 0x08          DC8 8, 8, 8, 8, 8, 8, 6, 0, 12, 50, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x06 0x00    
   \              0x0C 0x32    
   \              0xC2 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000005ED   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     26          #include "common.h"  
     27          
     28          extern const  unsigned char gImage_suqian[153600];
     29          static void LPLD_LCD_Reset(void);
     30          static void LPLD_LCD_FLEXBUS_Init(uint16 lcd_id);
     31          static void LPLD_LCD_IO_Cfg(void);
     32          static void LPLD_LCD_WriteIndex(uint16 index);
     33          static void LPLD_LCD_WriteData(uint16 data);
     34          static uint16 LPLD_LCD_ReadData(void);
     35          static void LPLD_LCD_WriteReg(uint16 LCD_Reg,uint16 LCD_RegValue);
     36          static uint16 LPLD_LCD_ReadReg(uint16 LCD_Reg);
     37          static void LPLD_LCD_SetCursor( uint16 Xpos, uint16 Ypos );
     38          static void LPLD_LCD_Delayms(uint16 ms);
     39          void LPLD_LCD_ShowStringno(uint16 Xpos, uint16 Ypos, uint8 *str,uint16 strColor );
     40          

   \                                 In section .bss, align 4
     41          LPLD_LCD_Info_t LPLD_LCD_INFO;
   \                     LPLD_LCD_INFO:
   \   00000000                      DS8 8

   \                                 In section .bss, align 2
     42          uint16 PreX=0, PreY=0;
   \                     PreX:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     PreY:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     43          uint16 *LCD_GRAM;
   \                     LCD_GRAM:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     44          uint16 CurX=0, CurY=0;
   \                     CurX:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     CurY:
   \   00000000                      DS8 2
     45          
     46          /*
     47           * LPLD_LCD_Delayms
     48           * LCD内部延时函数，内部调用
     49           */

   \                                 In section .text, align 4, keep-with-next
     50          static void LPLD_LCD_Delayms(uint16 n)
     51          {
     52            uint16 i;
     53            while(n--)
   \                     LPLD_LCD_Delayms: (+1)
   \                     ??LPLD_LCD_Delayms_0: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x1E48             SUBS     R0,R1,#+1
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD007             BEQ.N    ??LPLD_LCD_Delayms_1
     54            {
     55              for(i=0; i<400; i++)
   \   0000000A   0x2100             MOVS     R1,#+0
   \                     ??LPLD_LCD_Delayms_2: (+1)
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0xF5B1 0x7FC8      CMP      R1,#+400
   \   00000012   0xDAF5             BGE.N    ??LPLD_LCD_Delayms_0
     56              {
     57                asm("nop");
   \   00000014   0xBF00             nop
     58              }
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0xE7F8             B.N      ??LPLD_LCD_Delayms_2
     59            }
     60          }
   \                     ??LPLD_LCD_Delayms_1: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
     61          
     62          /*
     63           * LPLD_LCD_FLEXBUS_Init
     64           * LCD FlexBus初始化函数，内部调用
     65           * 
     66           * 说明:
     67           *    本初始化函数用来配置FlexBus与LCD的连接
     68           *    配置为16位端口大小
     69           *    地址与数据线复用
     70           *    数据及地址线为FB_AD[15:0]
     71           *    RS:FB_AD[16]
     72           *    CS:FB_CS0
     73           *    RW:FB_FB_RW
     74           *    RD:FB_OE 
     75           */

   \                                 In section .text, align 2, keep-with-next
     76          static void LPLD_LCD_FLEXBUS_Init(uint16 lcd_id)
     77          {
   \                     LPLD_LCD_FLEXBUS_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     78            FB_InitTypeDef fb_init;
     79            fb_init.FB_Fbx = FB0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0004      STRB     R0,[SP, #+4]
     80            fb_init.FB_ChipSelAddress = LCD_CMD_ADDRESS;
   \   0000000A   0xF05F 0x40C0      MOVS     R0,#+1610612736
   \   0000000E   0x9002             STR      R0,[SP, #+8]
     81            fb_init.FB_AutoAckEnable = TRUE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0012      STRB     R0,[SP, #+18]
     82            fb_init.FB_IsRightJustied = TRUE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF88D 0x0011      STRB     R0,[SP, #+17]
     83            fb_init.FB_WateStates = 0x02;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xF88D 0x0013      STRB     R0,[SP, #+19]
     84            fb_init.FB_PortSize = FB_SIZE_16BIT;
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0xF88D 0x0010      STRB     R0,[SP, #+16]
     85            fb_init.FB_AddressSpace = FB_SPACE_KB(512);   //128K
   \   00000028   0xF45F 0x2000      MOVS     R0,#+524288
   \   0000002C   0x9003             STR      R0,[SP, #+12]
     86            fb_init.FB_ReadAddrHold = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF88D 0x0014      STRB     R0,[SP, #+20]
     87            fb_init.FB_WriteAddrHold = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF88D 0x0015      STRB     R0,[SP, #+21]
     88            LPLD_FlexBus_Init(fb_init); 
   \   0000003A   0xA901             ADD      R1,SP,#+4
   \   0000003C   0xB084             SUB      SP,SP,#+16
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x2214             MOVS     R2,#+20
   \   00000042   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000046   0xBC0F             POP      {R0-R3}
   \   00000048   0x.... 0x....      BL       LPLD_FlexBus_Init
     89            PORTB->PCR[11] = PORT_PCR_MUX(5);
   \   0000004C   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable22  ;; 0x4004a02c
   \   00000054   0x6008             STR      R0,[R1, #+0]
     90          }
   \   00000056   0xB007             ADD      SP,SP,#+28
   \   00000058   0xBD00             POP      {PC}             ;; return
     91          
     92          /*
     93           * LPLD_LCD_IO_Cfg
     94           * LCD IO引脚初始化，内部调用
     95           *
     96           * 说明：
     97           * 此处初始化复位引脚，可根据实际硬件更改
     98           */

   \                                 In section .text, align 2, keep-with-next
     99          static void LPLD_LCD_IO_Cfg(void)
    100          {
   \                     LPLD_LCD_IO_Cfg: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    101            GPIO_InitTypeDef ptc_init;
    102            //RST 
    103            ptc_init.GPIO_PTx = PTC;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable22_1  ;; 0x400ff080
   \   00000008   0x9001             STR      R0,[SP, #+4]
    104            ptc_init.GPIO_Pins = GPIO_Pin12;
   \   0000000A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000000E   0x9002             STR      R0,[SP, #+8]
    105            ptc_init.GPIO_Dir = DIR_OUTPUT;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0010      STRB     R0,[SP, #+16]
    106            ptc_init.GPIO_Output = OUTPUT_H;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF88D 0x0011      STRB     R0,[SP, #+17]
    107            ptc_init.GPIO_PinControl = IRQC_DIS; 
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9003             STR      R0,[SP, #+12]
    108            LPLD_GPIO_Init(ptc_init);    
   \   00000020   0xA901             ADD      R1,SP,#+4
   \   00000022   0xB084             SUB      SP,SP,#+16
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x2214             MOVS     R2,#+20
   \   00000028   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002C   0xBC0F             POP      {R0-R3}
   \   0000002E   0x.... 0x....      BL       LPLD_GPIO_Init
    109          }
   \   00000032   0xB007             ADD      SP,SP,#+28
   \   00000034   0xBD00             POP      {PC}             ;; return
    110          
    111          /*
    112           * LPLD_LCD_WriteIndex
    113           * LCD写控制命令，内部调用
    114           */

   \                                 In section .text, align 2, keep-with-next
    115          static void LPLD_LCD_WriteIndex(uint16 index)
    116          {
    117            *(vuint16*)LCD_CMD_ADDRESS = index;  //write
   \                     LPLD_LCD_WriteIndex: (+1)
   \   00000000   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    118          }
   \   00000006   0x4770             BX       LR               ;; return
    119          
    120          /*
    121           * LPLD_LCD_WriteData
    122           * LCD写数据，内部调用
    123           */

   \                                 In section .text, align 2, keep-with-next
    124          void LPLD_LCD_WriteData(uint16 data)
    125          {
    126            *(vuint16*)LCD_DATA_ADDRESS = data;  //write
   \                     LPLD_LCD_WriteData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable22_2  ;; 0x60040000
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    127          }
   \   00000006   0x4770             BX       LR               ;; return
    128          
    129          /*
    130           * LPLD_LCD_ReadData
    131           * LCD读数据，内部调用
    132           */

   \                                 In section .text, align 2, keep-with-next
    133          static uint16 LPLD_LCD_ReadData(void)
    134          { 
    135            uint16 value;
    136            value = *(vuint16*)LCD_DATA_ADDRESS;  //read
   \                     LPLD_LCD_ReadData: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_2  ;; 0x60040000
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
    137            return value;
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x4770             BX       LR               ;; return
    138          }
    139          
    140          /*
    141           * LPLD_LCD_WriteReg
    142           * LCD写寄存器，内部调用
    143           */

   \                                 In section .text, align 2, keep-with-next
    144          static void LPLD_LCD_WriteReg(uint16 LCD_Reg,uint16 LCD_RegValue)
    145          { 
   \                     LPLD_LCD_WriteReg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    146            /* Write 16-bit Index, then Write Reg */  
    147            LPLD_LCD_WriteIndex(LCD_Reg);         
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x.... 0x....      BL       LPLD_LCD_WriteIndex
    148            /* Write 16-bit Reg */
    149            LPLD_LCD_WriteData(LCD_RegValue);  
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      BL       LPLD_LCD_WriteData
    150          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    151          
    152          /*
    153           * LPLD_LCD_ReadReg
    154           * LCD读寄存器，内部调用
    155           */
    156          static uint16 LPLD_LCD_ReadReg(uint16 LCD_Reg)
    157          {
    158            uint16 LCD_RAM;
    159            /* Write 16-bit Index (then Read Reg) */
    160            LPLD_LCD_WriteIndex(LCD_Reg);
    161            /* Read 16-bit Reg */
    162            LCD_RAM = LPLD_LCD_ReadData();      	
    163            return LCD_RAM;
    164          }
    165          
    166          /*
    167           * LPLD_LCD_SetCursor
    168           * 设置LCD内部GRAM光标位置，内部调用
    169           */

   \                                 In section .text, align 2, keep-with-next
    170          static void LPLD_LCD_SetCursor( uint16 Xpos, uint16 Ypos )
    171          {
   \                     LPLD_LCD_SetCursor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    172          #if(HORIZONTAL)
    173              
    174            uint16 temp = Xpos;
   \   00000004   0x0001             MOVS     R1,R0
    175            Xpos = Ypos;
   \   00000006   0x0020             MOVS     R0,R4
    176            Ypos = temp;  
   \   00000008   0x000C             MOVS     R4,R1
    177          
    178          #else
    179                      
    180          #endif
    181            LPLD_LCD_WriteReg(LPLD_LCD_INFO.X_GRAM, Xpos );      
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable22_3
   \   00000012   0x8880             LDRH     R0,[R0, #+4]
   \   00000014   0x.... 0x....      BL       LPLD_LCD_WriteReg
    182            LPLD_LCD_WriteReg(LPLD_LCD_INFO.Y_GRAM, Ypos );          
   \   00000018   0x0021             MOVS     R1,R4
   \   0000001A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable22_3
   \   00000020   0x88C0             LDRH     R0,[R0, #+6]
   \   00000022   0x.... 0x....      BL       LPLD_LCD_WriteReg
    183          }
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    184          
    185          
    186          /*
    187           * LPLD_LCD_Reset
    188           * 复位LCD控制器，内部调用
    189           */

   \                                 In section .text, align 2, keep-with-next
    190          static void LPLD_LCD_Reset(void)
    191          {
   \                     LPLD_LCD_Reset: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    192            LCD_CLR_RST;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable22_4  ;; 0x43fe1030
   \   00000008   0x6008             STR      R0,[R1, #+0]
    193            LPLD_LCD_Delayms(10); //延时
   \   0000000A   0x200A             MOVS     R0,#+10
   \   0000000C   0x.... 0x....      BL       LPLD_LCD_Delayms
    194            LCD_SET_RST;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable22_4  ;; 0x43fe1030
   \   00000016   0x6008             STR      R0,[R1, #+0]
    195          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    196          
    197          /*
    198           * LPLD_LCD_Init
    199           * LCD初始化
    200           * 
    201           * 参数:
    202           *    无
    203           *
    204           * 输出:
    205           *    LCD控制型号
    206           *    0x9320--9320
    207           *    0x8989--8989
    208           */

   \                                 In section .text, align 2, keep-with-next
    209          uint16 LPLD_LCD_Init(void)
    210          {
   \                     LPLD_LCD_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    211            uint16 dID;
    212             
    213            LPLD_LCD_FLEXBUS_Init(0);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       LPLD_LCD_FLEXBUS_Init
    214            LPLD_LCD_IO_Cfg();
   \   00000008   0x.... 0x....      BL       LPLD_LCD_IO_Cfg
    215            LPLD_LCD_Delayms(50);
   \   0000000C   0x2032             MOVS     R0,#+50
   \   0000000E   0x.... 0x....      BL       LPLD_LCD_Delayms
    216            
    217            LPLD_LCD_Reset();                 //硬件复位
   \   00000012   0x.... 0x....      BL       LPLD_LCD_Reset
    218            
    219           // dID = LPLD_LCD_ReadReg(0x0000);   //获取LCD控制器设备ID
    220              
    221           // LPLD_LCD_INFO.Lcd_Id = dID;
    222            dID=0x8989;
   \   00000016   0xF648 0x1489      MOVW     R4,#+35209
    223            if(dID == 0x9320)
   \   0000001A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001C   0xF249 0x3020      MOVW     R0,#+37664
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xF040 0x80FA      BNE.W    ??LPLD_LCD_Init_0
    224            {
    225              LPLD_LCD_INFO.Write_GRAM = 0x0022;
   \   00000026   0x2022             MOVS     R0,#+34
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   0000002C   0x8048             STRH     R0,[R1, #+2]
    226              LPLD_LCD_INFO.X_GRAM = 0x0020;
   \   0000002E   0x2020             MOVS     R0,#+32
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   00000034   0x8088             STRH     R0,[R1, #+4]
    227              LPLD_LCD_INFO.Y_GRAM = 0x0021;
   \   00000036   0x2021             MOVS     R0,#+33
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   0000003C   0x80C8             STRH     R0,[R1, #+6]
    228              
    229              LPLD_LCD_WriteReg(0x00,0x0001);   //开启LCD内部晶振，并等待10ms稳定
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       LPLD_LCD_WriteReg
    230              LPLD_LCD_Delayms(10);
   \   00000046   0x200A             MOVS     R0,#+10
   \   00000048   0x.... 0x....      BL       LPLD_LCD_Delayms
    231              
    232              LPLD_LCD_WriteReg(0x01,0x0000);   //Driver Output Control
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x.... 0x....      BL       LPLD_LCD_WriteReg
    233              LPLD_LCD_WriteReg(0x02,0x0700);   //LCD Driving Wave Control
   \   00000054   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000058   0x2002             MOVS     R0,#+2
   \   0000005A   0x.... 0x....      BL       LPLD_LCD_WriteReg
    234              LPLD_LCD_WriteReg(0x03,0x1008);   //Entry Mode
   \   0000005E   0xF241 0x0108      MOVW     R1,#+4104
   \   00000062   0x2003             MOVS     R0,#+3
   \   00000064   0x.... 0x....      BL       LPLD_LCD_WriteReg
    235              LPLD_LCD_WriteReg(0x04,0x0000);   //Resizing Control
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x2004             MOVS     R0,#+4
   \   0000006C   0x.... 0x....      BL       LPLD_LCD_WriteReg
    236              LPLD_LCD_WriteReg(0x08,0x0202);   //Display Control 2
   \   00000070   0xF240 0x2102      MOVW     R1,#+514
   \   00000074   0x2008             MOVS     R0,#+8
   \   00000076   0x.... 0x....      BL       LPLD_LCD_WriteReg
    237              LPLD_LCD_WriteReg(0x09,0x0000);   //Display Contral 3.(0x0000)
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x2009             MOVS     R0,#+9
   \   0000007E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    238              LPLD_LCD_WriteReg(0x0a,0x0000);//Frame Cycle Contal.(0x0000)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x200A             MOVS     R0,#+10
   \   00000086   0x.... 0x....      BL       LPLD_LCD_WriteReg
    239              LPLD_LCD_WriteReg(0x0c,0x0001);//Extern Display Interface Contral 1.(0x0000)
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x200C             MOVS     R0,#+12
   \   0000008E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    240              LPLD_LCD_WriteReg(0x0d,0x0000);//Frame Maker Position.
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x200D             MOVS     R0,#+13
   \   00000096   0x.... 0x....      BL       LPLD_LCD_WriteReg
    241              LPLD_LCD_WriteReg(0x0f,0x0000);//Extern Display Interface Contral 2.
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x200F             MOVS     R0,#+15
   \   0000009E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    242              
    243              LPLD_LCD_WriteReg(0x10,0x0000);//Power Control 1.(0x16b0)
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x2010             MOVS     R0,#+16
   \   000000A6   0x.... 0x....      BL       LPLD_LCD_WriteReg
    244              LPLD_LCD_WriteReg(0x11,0x0000);//Power Control 2.(0x0001)	
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x2011             MOVS     R0,#+17
   \   000000AE   0x.... 0x....      BL       LPLD_LCD_WriteReg
    245              LPLD_LCD_WriteReg(0x12,0x0000);//Power Control 3.(0x0138)
   \   000000B2   0x2100             MOVS     R1,#+0
   \   000000B4   0x2012             MOVS     R0,#+18
   \   000000B6   0x.... 0x....      BL       LPLD_LCD_WriteReg
    246              LPLD_LCD_WriteReg(0x13,0x0000);
   \   000000BA   0x2100             MOVS     R1,#+0
   \   000000BC   0x2013             MOVS     R0,#+19
   \   000000BE   0x.... 0x....      BL       LPLD_LCD_WriteReg
    247              //LPLD_LCD_Delayms(200);	
    248              
    249              LPLD_LCD_WriteReg(0x10,0x17b0);//Power Control 1.(0x16b0)
   \   000000C2   0xF241 0x71B0      MOVW     R1,#+6064
   \   000000C6   0x2010             MOVS     R0,#+16
   \   000000C8   0x.... 0x....      BL       LPLD_LCD_WriteReg
    250              LPLD_LCD_WriteReg(0x11,0x0137);//Power Control 2.(0x0001)
   \   000000CC   0xF240 0x1137      MOVW     R1,#+311
   \   000000D0   0x2011             MOVS     R0,#+17
   \   000000D2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    251              LPLD_LCD_Delayms(5);
   \   000000D6   0x2005             MOVS     R0,#+5
   \   000000D8   0x.... 0x....      BL       LPLD_LCD_Delayms
    252              LPLD_LCD_WriteReg(0x12,0x0139);//Power Control 3.(0x0138)
   \   000000DC   0xF240 0x1139      MOVW     R1,#+313
   \   000000E0   0x2012             MOVS     R0,#+18
   \   000000E2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    253              LPLD_LCD_Delayms(5);	
   \   000000E6   0x2005             MOVS     R0,#+5
   \   000000E8   0x.... 0x....      BL       LPLD_LCD_Delayms
    254              LPLD_LCD_WriteReg(0x13,0x1700);	 
   \   000000EC   0xF44F 0x51B8      MOV      R1,#+5888
   \   000000F0   0x2013             MOVS     R0,#+19
   \   000000F2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    255             
    256              LPLD_LCD_WriteReg(0x29,0x0000);
   \   000000F6   0x2100             MOVS     R1,#+0
   \   000000F8   0x2029             MOVS     R0,#+41
   \   000000FA   0x.... 0x....      BL       LPLD_LCD_WriteReg
    257              LPLD_LCD_WriteReg(0x2B,0x0000);
   \   000000FE   0x2100             MOVS     R1,#+0
   \   00000100   0x202B             MOVS     R0,#+43
   \   00000102   0x.... 0x....      BL       LPLD_LCD_WriteReg
    258              LPLD_LCD_Delayms(5);						
   \   00000106   0x2005             MOVS     R0,#+5
   \   00000108   0x.... 0x....      BL       LPLD_LCD_Delayms
    259              
    260              LPLD_LCD_WriteReg(0x30,0x0000);					
   \   0000010C   0x2100             MOVS     R1,#+0
   \   0000010E   0x2030             MOVS     R0,#+48
   \   00000110   0x.... 0x....      BL       LPLD_LCD_WriteReg
    261              LPLD_LCD_WriteReg(0x31,0x0507);
   \   00000114   0xF240 0x5107      MOVW     R1,#+1287
   \   00000118   0x2031             MOVS     R0,#+49
   \   0000011A   0x.... 0x....      BL       LPLD_LCD_WriteReg
    262              LPLD_LCD_WriteReg(0x32,0x0104);	
   \   0000011E   0xF44F 0x7182      MOV      R1,#+260
   \   00000122   0x2032             MOVS     R0,#+50
   \   00000124   0x.... 0x....      BL       LPLD_LCD_WriteReg
    263              LPLD_LCD_WriteReg(0x35,0x0105);	
   \   00000128   0xF240 0x1105      MOVW     R1,#+261
   \   0000012C   0x2035             MOVS     R0,#+53
   \   0000012E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    264              LPLD_LCD_WriteReg(0x36,0x0404);
   \   00000132   0xF240 0x4104      MOVW     R1,#+1028
   \   00000136   0x2036             MOVS     R0,#+54
   \   00000138   0x.... 0x....      BL       LPLD_LCD_WriteReg
    265              LPLD_LCD_WriteReg(0x37,0x0603);	
   \   0000013C   0xF240 0x6103      MOVW     R1,#+1539
   \   00000140   0x2037             MOVS     R0,#+55
   \   00000142   0x.... 0x....      BL       LPLD_LCD_WriteReg
    266              LPLD_LCD_WriteReg(0x38,0x0004);	
   \   00000146   0x2104             MOVS     R1,#+4
   \   00000148   0x2038             MOVS     R0,#+56
   \   0000014A   0x.... 0x....      BL       LPLD_LCD_WriteReg
    267              LPLD_LCD_WriteReg(0x39,0x0007);
   \   0000014E   0x2107             MOVS     R1,#+7
   \   00000150   0x2039             MOVS     R0,#+57
   \   00000152   0x.... 0x....      BL       LPLD_LCD_WriteReg
    268              LPLD_LCD_WriteReg(0x3c,0x0501);	
   \   00000156   0xF240 0x5101      MOVW     R1,#+1281
   \   0000015A   0x203C             MOVS     R0,#+60
   \   0000015C   0x.... 0x....      BL       LPLD_LCD_WriteReg
    269              LPLD_LCD_WriteReg(0x3d,0x0404);
   \   00000160   0xF240 0x4104      MOVW     R1,#+1028
   \   00000164   0x203D             MOVS     R0,#+61
   \   00000166   0x.... 0x....      BL       LPLD_LCD_WriteReg
    270              
    271              LPLD_LCD_WriteReg(0x0050,0x0000);
   \   0000016A   0x2100             MOVS     R1,#+0
   \   0000016C   0x2050             MOVS     R0,#+80
   \   0000016E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    272              LPLD_LCD_WriteReg(0x0051,239);
   \   00000172   0x21EF             MOVS     R1,#+239
   \   00000174   0x2051             MOVS     R0,#+81
   \   00000176   0x.... 0x....      BL       LPLD_LCD_WriteReg
    273              LPLD_LCD_WriteReg(0x0052,0x0000);
   \   0000017A   0x2100             MOVS     R1,#+0
   \   0000017C   0x2052             MOVS     R0,#+82
   \   0000017E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    274              LPLD_LCD_WriteReg(0x0053,319);
   \   00000182   0xF240 0x113F      MOVW     R1,#+319
   \   00000186   0x2053             MOVS     R0,#+83
   \   00000188   0x.... 0x....      BL       LPLD_LCD_WriteReg
    275            
    276              LPLD_LCD_WriteReg(0x60,0x2700);//Driver Output Control.
   \   0000018C   0xF44F 0x511C      MOV      R1,#+9984
   \   00000190   0x2060             MOVS     R0,#+96
   \   00000192   0x.... 0x....      BL       LPLD_LCD_WriteReg
    277              LPLD_LCD_WriteReg(0x61,0x0001);//Driver Output Control.
   \   00000196   0x2101             MOVS     R1,#+1
   \   00000198   0x2061             MOVS     R0,#+97
   \   0000019A   0x.... 0x....      BL       LPLD_LCD_WriteReg
    278              LPLD_LCD_WriteReg(0x6a,0x0000);//Vertical Srcoll Control.
   \   0000019E   0x2100             MOVS     R1,#+0
   \   000001A0   0x206A             MOVS     R0,#+106
   \   000001A2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    279              
    280              LPLD_LCD_WriteReg(0x80,0x0000);//Display Position? Partial Display 1.
   \   000001A6   0x2100             MOVS     R1,#+0
   \   000001A8   0x2080             MOVS     R0,#+128
   \   000001AA   0x.... 0x....      BL       LPLD_LCD_WriteReg
    281              LPLD_LCD_WriteReg(0x81,0x0000);//RAM Address Start? Partial Display 1.
   \   000001AE   0x2100             MOVS     R1,#+0
   \   000001B0   0x2081             MOVS     R0,#+129
   \   000001B2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    282              LPLD_LCD_WriteReg(0x82,0x0000);//RAM Address End-Partial Display 1.
   \   000001B6   0x2100             MOVS     R1,#+0
   \   000001B8   0x2082             MOVS     R0,#+130
   \   000001BA   0x.... 0x....      BL       LPLD_LCD_WriteReg
    283              LPLD_LCD_WriteReg(0x83,0x0000);//Displsy Position? Partial Display 2.
   \   000001BE   0x2100             MOVS     R1,#+0
   \   000001C0   0x2083             MOVS     R0,#+131
   \   000001C2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    284              LPLD_LCD_WriteReg(0x84,0x0000);//RAM Address Start? Partial Display 2.
   \   000001C6   0x2100             MOVS     R1,#+0
   \   000001C8   0x2084             MOVS     R0,#+132
   \   000001CA   0x.... 0x....      BL       LPLD_LCD_WriteReg
    285              LPLD_LCD_WriteReg(0x85,0x0000);//RAM Address End? Partial Display 2.
   \   000001CE   0x2100             MOVS     R1,#+0
   \   000001D0   0x2085             MOVS     R0,#+133
   \   000001D2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    286              
    287              LPLD_LCD_WriteReg(0x90,0x0010);//Frame Cycle Contral.(0x0013)
   \   000001D6   0x2110             MOVS     R1,#+16
   \   000001D8   0x2090             MOVS     R0,#+144
   \   000001DA   0x.... 0x....      BL       LPLD_LCD_WriteReg
    288              LPLD_LCD_WriteReg(0x92,0x0000);//Panel Interface Contral 2.(0x0000)
   \   000001DE   0x2100             MOVS     R1,#+0
   \   000001E0   0x2092             MOVS     R0,#+146
   \   000001E2   0x.... 0x....      BL       LPLD_LCD_WriteReg
    289              LPLD_LCD_WriteReg(0x93,0x0003);//Panel Interface Contral 3.
   \   000001E6   0x2103             MOVS     R1,#+3
   \   000001E8   0x2093             MOVS     R0,#+147
   \   000001EA   0x.... 0x....      BL       LPLD_LCD_WriteReg
    290              LPLD_LCD_WriteReg(0x95,0x0110);//Frame Cycle Contral.(0x0110)
   \   000001EE   0xF44F 0x7188      MOV      R1,#+272
   \   000001F2   0x2095             MOVS     R0,#+149
   \   000001F4   0x.... 0x....      BL       LPLD_LCD_WriteReg
    291              LPLD_LCD_WriteReg(0x97,0x0000);//
   \   000001F8   0x2100             MOVS     R1,#+0
   \   000001FA   0x2097             MOVS     R0,#+151
   \   000001FC   0x.... 0x....      BL       LPLD_LCD_WriteReg
    292              LPLD_LCD_WriteReg(0x98,0x0000);//Frame Cycle Contral.
   \   00000200   0x2100             MOVS     R1,#+0
   \   00000202   0x2098             MOVS     R0,#+152
   \   00000204   0x.... 0x....      BL       LPLD_LCD_WriteReg
    293          
    294              LPLD_LCD_WriteReg(0x07,0x0133);
   \   00000208   0xF240 0x1133      MOVW     R1,#+307
   \   0000020C   0x2007             MOVS     R0,#+7
   \   0000020E   0x.... 0x....      BL       LPLD_LCD_WriteReg
    295              LPLD_LCD_Delayms(3);
   \   00000212   0x2003             MOVS     R0,#+3
   \   00000214   0x.... 0x....      BL       LPLD_LCD_Delayms
   \   00000218   0xE124             B.N      ??LPLD_LCD_Init_1
    296            }  
    297            else if(dID == 0x8989)
   \                     ??LPLD_LCD_Init_0: (+1)
   \   0000021A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000021C   0xF648 0x1089      MOVW     R0,#+35209
   \   00000220   0x4284             CMP      R4,R0
   \   00000222   0xF040 0x811F      BNE.W    ??LPLD_LCD_Init_1
    298            {
    299              LPLD_LCD_INFO.Write_GRAM = 0x0022;
   \   00000226   0x2022             MOVS     R0,#+34
   \   00000228   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   0000022C   0x8048             STRH     R0,[R1, #+2]
    300              LPLD_LCD_INFO.X_GRAM = 0x004e;
   \   0000022E   0x204E             MOVS     R0,#+78
   \   00000230   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   00000234   0x8088             STRH     R0,[R1, #+4]
    301              LPLD_LCD_INFO.Y_GRAM = 0x004f;
   \   00000236   0x204F             MOVS     R0,#+79
   \   00000238   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   0000023C   0x80C8             STRH     R0,[R1, #+6]
    302              
    303              //SSD1289;
    304              /* 打开晶振 */
    305              LPLD_LCD_WriteReg(0x0000,0x0001);    LPLD_LCD_Delayms(LCD_DELAY_TIME); 
   \   0000023E   0x2101             MOVS     R1,#+1
   \   00000240   0x2000             MOVS     R0,#+0
   \   00000242   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000246   0x2000             MOVS     R0,#+0
   \   00000248   0x.... 0x....      BL       LPLD_LCD_Delayms
    306           
    307              //启动频率设置为最大osc/16 消耗功率设置在large档位，提高显示画质
    308              //LPLD_LCD_WriteReg(0x0003,0xF8F8);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
    309              LPLD_LCD_WriteReg(0x0003,0xA8A4);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   //0210
   \   0000024C   0xF64A 0x01A4      MOVW     R1,#+43172
   \   00000250   0x2003             MOVS     R0,#+3
   \   00000252   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000256   0x2000             MOVS     R0,#+0
   \   00000258   0x.... 0x....      BL       LPLD_LCD_Delayms
    310              LPLD_LCD_WriteReg(0x000C,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   0000025C   0x2100             MOVS     R1,#+0
   \   0000025E   0x200C             MOVS     R0,#+12
   \   00000260   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000264   0x2000             MOVS     R0,#+0
   \   00000266   0x.... 0x....      BL       LPLD_LCD_Delayms
    311              LPLD_LCD_WriteReg(0x000D,0x080C);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   0000026A   0xF640 0x010C      MOVW     R1,#+2060
   \   0000026E   0x200D             MOVS     R0,#+13
   \   00000270   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000274   0x2000             MOVS     R0,#+0
   \   00000276   0x.... 0x....      BL       LPLD_LCD_Delayms
    312              LPLD_LCD_WriteReg(0x000E,0x2B00);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   0000027A   0xF44F 0x512C      MOV      R1,#+11008
   \   0000027E   0x200E             MOVS     R0,#+14
   \   00000280   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000284   0x2000             MOVS     R0,#+0
   \   00000286   0x.... 0x....      BL       LPLD_LCD_Delayms
    313              LPLD_LCD_WriteReg(0x001E,0x00B0);    LPLD_LCD_Delayms(LCD_DELAY_TIME); 
   \   0000028A   0x21B0             MOVS     R1,#+176
   \   0000028C   0x201E             MOVS     R0,#+30
   \   0000028E   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000292   0x2000             MOVS     R0,#+0
   \   00000294   0x.... 0x....      BL       LPLD_LCD_Delayms
    314              //驱动输出控制320*240 0x2B3F 
    315            //  LPLD_LCD_WriteReg(0x0001,0x2B3F);    LPLD_LCD_Delayms(LCD_DELAY_TIME); 
    316              
    317              //  693F   6B3F   2B3F   293F
    318              LPLD_LCD_WriteReg(0x0001,0x293F);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   00000298   0xF642 0x113F      MOVW     R1,#+10559
   \   0000029C   0x2001             MOVS     R0,#+1
   \   0000029E   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002A2   0x2000             MOVS     R0,#+0
   \   000002A4   0x.... 0x....      BL       LPLD_LCD_Delayms
    319            
    320              //驱动输出控制320*240 0x233F 将原来的第11位BGR清零这样输出是RGB就不会红色与蓝色颠倒 
    321              //LPLD_LCD_WriteReg(0x0001,0x233F);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
    322              LPLD_LCD_WriteReg(0x0002,0x0600);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000002A8   0xF44F 0x61C0      MOV      R1,#+1536
   \   000002AC   0x2002             MOVS     R0,#+2
   \   000002AE   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002B2   0x2000             MOVS     R0,#+0
   \   000002B4   0x.... 0x....      BL       LPLD_LCD_Delayms
    323              LPLD_LCD_WriteReg(0x0010,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000002B8   0x2100             MOVS     R1,#+0
   \   000002BA   0x2010             MOVS     R0,#+16
   \   000002BC   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002C0   0x2000             MOVS     R0,#+0
   \   000002C2   0x.... 0x....      BL       LPLD_LCD_Delayms
    324              /* 定义数据格式 16位色 横屏 0x6070 */
    325              // TY1（bit7） TY0 ID1 ID0 AM LG2 LG1 LG0
    326              //   0          0   1   1   1  0   0   0
    327              // type A  0 0
    328              // type B  0 1
    329              // type C  1 1
    330              // AM   指针自动增加
    331              // 65K颜色
    332              // 寄存器 4f/4e 定义窗口大小
    333              LPLD_LCD_WriteReg(0x0011,0x6028);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   000002C6   0xF246 0x0128      MOVW     R1,#+24616
   \   000002CA   0x2011             MOVS     R0,#+17
   \   000002CC   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002D0   0x2000             MOVS     R0,#+0
   \   000002D2   0x.... 0x....      BL       LPLD_LCD_Delayms
    334              //LPLD_LCD_WriteReg(0x0011,0x6070);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
    335              //
    336              LPLD_LCD_WriteReg(0x0005,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000002D6   0x2100             MOVS     R1,#+0
   \   000002D8   0x2005             MOVS     R0,#+5
   \   000002DA   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002DE   0x2000             MOVS     R0,#+0
   \   000002E0   0x.... 0x....      BL       LPLD_LCD_Delayms
    337              LPLD_LCD_WriteReg(0x0006,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000002E4   0x2100             MOVS     R1,#+0
   \   000002E6   0x2006             MOVS     R0,#+6
   \   000002E8   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002EC   0x2000             MOVS     R0,#+0
   \   000002EE   0x.... 0x....      BL       LPLD_LCD_Delayms
    338              LPLD_LCD_WriteReg(0x0016,0xEF1C);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000002F2   0xF64E 0x711C      MOVW     R1,#+61212
   \   000002F6   0x2016             MOVS     R0,#+22
   \   000002F8   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000002FC   0x2000             MOVS     R0,#+0
   \   000002FE   0x.... 0x....      BL       LPLD_LCD_Delayms
    339              LPLD_LCD_WriteReg(0x0017,0x0003);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000302   0x2103             MOVS     R1,#+3
   \   00000304   0x2017             MOVS     R0,#+23
   \   00000306   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000030A   0x2000             MOVS     R0,#+0
   \   0000030C   0x.... 0x....      BL       LPLD_LCD_Delayms
    340              //PT1 PT0 VLE2 VLE1 SPT 0  0 GON DTE CM 0 D1 D0
    341              //  0   0        1   0  0  0  1   1  0  0  1  1
    342              LPLD_LCD_WriteReg(0x0007,0x0233);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000310   0xF240 0x2133      MOVW     R1,#+563
   \   00000314   0x2007             MOVS     R0,#+7
   \   00000316   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000031A   0x2000             MOVS     R0,#+0
   \   0000031C   0x.... 0x....      BL       LPLD_LCD_Delayms
    343              //LPLD_LCD_WriteReg(0x0007,0x0133);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
    344              //NO1 NO0 SDT1 SDT0 0 EQ2 EQ1 EQ0 DIV1 DIV0 SDIV SRTN RTN3 RTN2 RTN1 RTN0
    345              //                                 1     1    0    0    0    0   0   0
    346              //将DIV设置成2分频
    347              //
    348              //LPLD_LCD_WriteReg(0x000B,0x0020);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
    349              LPLD_LCD_WriteReg(0x000B,0x0020);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000320   0x2120             MOVS     R1,#+32
   \   00000322   0x200B             MOVS     R0,#+11
   \   00000324   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000328   0x2000             MOVS     R0,#+0
   \   0000032A   0x.... 0x....      BL       LPLD_LCD_Delayms
    350              //配置扫描模式
    351              LPLD_LCD_WriteReg(0x000F,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);   
   \   0000032E   0x2100             MOVS     R1,#+0
   \   00000330   0x200F             MOVS     R0,#+15
   \   00000332   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000336   0x2000             MOVS     R0,#+0
   \   00000338   0x.... 0x....      BL       LPLD_LCD_Delayms
    352              /* 扫描开始地址 */
    353              //垂直控制
    354              LPLD_LCD_WriteReg(0x0041,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   0000033C   0x2100             MOVS     R1,#+0
   \   0000033E   0x2041             MOVS     R0,#+65
   \   00000340   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000344   0x2000             MOVS     R0,#+0
   \   00000346   0x.... 0x....      BL       LPLD_LCD_Delayms
    355              LPLD_LCD_WriteReg(0x0042,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   0000034A   0x2100             MOVS     R1,#+0
   \   0000034C   0x2042             MOVS     R0,#+66
   \   0000034E   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000352   0x2000             MOVS     R0,#+0
   \   00000354   0x.... 0x....      BL       LPLD_LCD_Delayms
    356              //水平RAMposition
    357              LPLD_LCD_WriteReg(0x0048,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000358   0x2100             MOVS     R1,#+0
   \   0000035A   0x2048             MOVS     R0,#+72
   \   0000035C   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000360   0x2000             MOVS     R0,#+0
   \   00000362   0x.... 0x....      BL       LPLD_LCD_Delayms
    358              LPLD_LCD_WriteReg(0x0049,0x013F);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000366   0xF240 0x113F      MOVW     R1,#+319
   \   0000036A   0x2049             MOVS     R0,#+73
   \   0000036C   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000370   0x2000             MOVS     R0,#+0
   \   00000372   0x.... 0x....      BL       LPLD_LCD_Delayms
    359              
    360              LPLD_LCD_WriteReg(0x004A,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000376   0x2100             MOVS     R1,#+0
   \   00000378   0x204A             MOVS     R0,#+74
   \   0000037A   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000037E   0x2000             MOVS     R0,#+0
   \   00000380   0x.... 0x....      BL       LPLD_LCD_Delayms
    361              LPLD_LCD_WriteReg(0x004B,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME); 
   \   00000384   0x2100             MOVS     R1,#+0
   \   00000386   0x204B             MOVS     R0,#+75
   \   00000388   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000038C   0x2000             MOVS     R0,#+0
   \   0000038E   0x.... 0x....      BL       LPLD_LCD_Delayms
    362           
    363             // LPLD_LCD_WriteReg(0x0044,0xEF00);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
    364             // LPLD_LCD_WriteReg(0x0045,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME); 
    365             // LPLD_LCD_WriteReg(0x0046,0x013F);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
    366              
    367              LPLD_LCD_WriteReg(0x0030,0x0707);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000392   0xF240 0x7107      MOVW     R1,#+1799
   \   00000396   0x2030             MOVS     R0,#+48
   \   00000398   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000039C   0x2000             MOVS     R0,#+0
   \   0000039E   0x.... 0x....      BL       LPLD_LCD_Delayms
    368              LPLD_LCD_WriteReg(0x0031,0x0204);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003A2   0xF44F 0x7101      MOV      R1,#+516
   \   000003A6   0x2031             MOVS     R0,#+49
   \   000003A8   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003AC   0x2000             MOVS     R0,#+0
   \   000003AE   0x.... 0x....      BL       LPLD_LCD_Delayms
    369              LPLD_LCD_WriteReg(0x0032,0x0204);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003B2   0xF44F 0x7101      MOV      R1,#+516
   \   000003B6   0x2032             MOVS     R0,#+50
   \   000003B8   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003BC   0x2000             MOVS     R0,#+0
   \   000003BE   0x.... 0x....      BL       LPLD_LCD_Delayms
    370              LPLD_LCD_WriteReg(0x0033,0x0502);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003C2   0xF240 0x5102      MOVW     R1,#+1282
   \   000003C6   0x2033             MOVS     R0,#+51
   \   000003C8   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003CC   0x2000             MOVS     R0,#+0
   \   000003CE   0x.... 0x....      BL       LPLD_LCD_Delayms
    371              LPLD_LCD_WriteReg(0x0034,0x0507);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003D2   0xF240 0x5107      MOVW     R1,#+1287
   \   000003D6   0x2034             MOVS     R0,#+52
   \   000003D8   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003DC   0x2000             MOVS     R0,#+0
   \   000003DE   0x.... 0x....      BL       LPLD_LCD_Delayms
    372              LPLD_LCD_WriteReg(0x0035,0x0204);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003E2   0xF44F 0x7101      MOV      R1,#+516
   \   000003E6   0x2035             MOVS     R0,#+53
   \   000003E8   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003EC   0x2000             MOVS     R0,#+0
   \   000003EE   0x.... 0x....      BL       LPLD_LCD_Delayms
    373              LPLD_LCD_WriteReg(0x0036,0x0204);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   000003F2   0xF44F 0x7101      MOV      R1,#+516
   \   000003F6   0x2036             MOVS     R0,#+54
   \   000003F8   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   000003FC   0x2000             MOVS     R0,#+0
   \   000003FE   0x.... 0x....      BL       LPLD_LCD_Delayms
    374              LPLD_LCD_WriteReg(0x0037,0x0502);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000402   0xF240 0x5102      MOVW     R1,#+1282
   \   00000406   0x2037             MOVS     R0,#+55
   \   00000408   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000040C   0x2000             MOVS     R0,#+0
   \   0000040E   0x.... 0x....      BL       LPLD_LCD_Delayms
    375              LPLD_LCD_WriteReg(0x003A,0x0302);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000412   0xF240 0x3102      MOVW     R1,#+770
   \   00000416   0x203A             MOVS     R0,#+58
   \   00000418   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000041C   0x2000             MOVS     R0,#+0
   \   0000041E   0x.... 0x....      BL       LPLD_LCD_Delayms
    376              LPLD_LCD_WriteReg(0x003B,0x0302);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000422   0xF240 0x3102      MOVW     R1,#+770
   \   00000426   0x203B             MOVS     R0,#+59
   \   00000428   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000042C   0x2000             MOVS     R0,#+0
   \   0000042E   0x.... 0x....      BL       LPLD_LCD_Delayms
    377              LPLD_LCD_WriteReg(0x0023,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000432   0x2100             MOVS     R1,#+0
   \   00000434   0x2023             MOVS     R0,#+35
   \   00000436   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   0000043A   0x2000             MOVS     R0,#+0
   \   0000043C   0x.... 0x....      BL       LPLD_LCD_Delayms
    378              LPLD_LCD_WriteReg(0x0024,0x0000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   00000440   0x2100             MOVS     R1,#+0
   \   00000442   0x2024             MOVS     R0,#+36
   \   00000444   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000448   0x2000             MOVS     R0,#+0
   \   0000044A   0x.... 0x....      BL       LPLD_LCD_Delayms
    379              /*0000 390K  50 
    380                0010 430K  55 
    381                0101 470K  60 
    382                1000 510K  65 
    383                1010 548K  70 
    384                1100 587K  75 
    385                1110 626K  80 */
    386              LPLD_LCD_WriteReg(0x0025,0x8000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
   \   0000044E   0xF44F 0x4100      MOV      R1,#+32768
   \   00000452   0x2025             MOVS     R0,#+37
   \   00000454   0x.... 0x....      BL       LPLD_LCD_WriteReg
   \   00000458   0x2000             MOVS     R0,#+0
   \   0000045A   0x.... 0x....      BL       LPLD_LCD_Delayms
    387           //   LPLD_LCD_WriteReg(0x0025,0xe000);    LPLD_LCD_Delayms(LCD_DELAY_TIME);
    388              
    389            //  LPLD_LCD_WriteReg(0x004f,0);
    390            //  LPLD_LCD_WriteReg(0x004e,0);//设定显示窗口       
    391              //LPLD_LCD_UpdateData();	//更新写入的数据使之生效*/
    392              LPLD_LCD_Delayms(20);         //等待LCD启动
   \   0000045E   0x2014             MOVS     R0,#+20
   \   00000460   0x.... 0x....      BL       LPLD_LCD_Delayms
    393            }
    394            
    395            return dID;
   \                     ??LPLD_LCD_Init_1: (+1)
   \   00000464   0x0020             MOVS     R0,R4
   \   00000466   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000468   0xBD10             POP      {R4,PC}          ;; return
    396          }
    397          
    398          /*
    399           * LPLD_LCD_FillBackground
    400           * 填充LCD背景色
    401           * 
    402           * 参数:
    403           *    Color--16位RGB颜色值
    404           *
    405           * 输出:
    406           *    无
    407           */

   \                                 In section .text, align 2, keep-with-next
    408          void LPLD_LCD_FillBackground(uint16 Color)
    409          {
   \                     LPLD_LCD_FillBackground: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    410            uint32_t index=0;
   \   00000004   0x2500             MOVS     R5,#+0
    411            LPLD_LCD_SetCursor(0,0); 
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       LPLD_LCD_SetCursor
    412            LPLD_LCD_WriteIndex(LPLD_LCD_INFO.Write_GRAM);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable22_3
   \   00000012   0x8840             LDRH     R0,[R0, #+2]
   \   00000014   0x.... 0x....      BL       LPLD_LCD_WriteIndex
    413            for( index = 0; index < MAX_X * MAX_Y; index++ )
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0005             MOVS     R5,R0
   \   0000001C   0xE004             B.N      ??LPLD_LCD_FillBackground_0
    414            {
    415              LPLD_LCD_WriteData(Color);
   \                     ??LPLD_LCD_FillBackground_1: (+1)
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000022   0x.... 0x....      BL       LPLD_LCD_WriteData
    416            }
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LPLD_LCD_FillBackground_0: (+1)
   \   00000028   0xF5B5 0x3F96      CMP      R5,#+76800
   \   0000002C   0xD3F7             BCC.N    ??LPLD_LCD_FillBackground_1
    417          }
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    418          
    419          /*
    420           * LPLD_LCD_FillBackgroundGRAM
    421           * 填充LCD背景色到LCD_GRAM
    422           * 
    423           * 参数:
    424           *    *Color--16位RGB颜色值数组，长度为LCD_GRAM数组的长度
    425           *
    426           * 输出:
    427           *    无
    428           */

   \                                 In section .text, align 2, keep-with-next
    429          void LPLD_LCD_FillBackgroundGRAM(uint16 *Color)
    430          {
   \                     LPLD_LCD_FillBackgroundGRAM: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    431            uint32_t index=0;
   \   00000004   0x2500             MOVS     R5,#+0
    432            LPLD_LCD_SetCursor(0,0); 
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       LPLD_LCD_SetCursor
    433            LPLD_LCD_WriteIndex(LPLD_LCD_INFO.Write_GRAM);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable22_3
   \   00000012   0x8840             LDRH     R0,[R0, #+2]
   \   00000014   0x.... 0x....      BL       LPLD_LCD_WriteIndex
    434            for( index = 0; index < MAX_X * MAX_Y; index++ )
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0005             MOVS     R5,R0
   \   0000001C   0xE004             B.N      ??LPLD_LCD_FillBackgroundGRAM_0
    435            {
    436              LPLD_LCD_WriteData(Color[index]);
   \                     ??LPLD_LCD_FillBackgroundGRAM_1: (+1)
   \   0000001E   0xF834 0x0015      LDRH     R0,[R4, R5, LSL #+1]
   \   00000022   0x.... 0x....      BL       LPLD_LCD_WriteData
    437            }
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LPLD_LCD_FillBackgroundGRAM_0: (+1)
   \   00000028   0xF5B5 0x3F96      CMP      R5,#+76800
   \   0000002C   0xD3F7             BCC.N    ??LPLD_LCD_FillBackgroundGRAM_1
    438          }
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    439          
    440          /*
    441           * LPLD_LCD_BGR2RGB
    442           * BGR颜色转RGB颜色
    443           * 
    444           * 参数:
    445           *    Color--16位BGR颜色值
    446           *
    447           * 输出:
    448           *    16位RGB颜色值
    449           */

   \                                 In section .text, align 2, keep-with-next
    450          uint16 LPLD_LCD_BGR2RGB(uint16 Color)
    451          {
    452            uint16  r, g, b, rgb;
    453            
    454            b = ( Color>>0 )  & 0x1f;
   \                     LPLD_LCD_BGR2RGB: (+1)
   \   00000000   0xF010 0x021F      ANDS     R2,R0,#0x1F
    455            g = ( Color>>5 )  & 0x3f;
   \   00000004   0xF3C0 0x1145      UBFX     R1,R0,#+5,#+6
    456            r = ( Color>>11 ) & 0x1f;
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x0AC0             LSRS     R0,R0,#+11
    457            
    458            rgb =  (b<<11) + (g<<5) + (r<<0);
   \   0000000C   0x0149             LSLS     R1,R1,#+5
   \   0000000E   0xEB11 0x21C2      ADDS     R1,R1,R2, LSL #+11
   \   00000012   0x1840             ADDS     R0,R0,R1
    459            
    460            return( rgb );
   \   00000014   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   0x4770             BX       LR               ;; return
    461          }
    462          
    463          /*
    464           * LPLD_LCD_U8GRAY2RGB
    465           * U8灰度颜色转为RGB颜色
    466           * 
    467           * 参数:
    468           *    Color--8位灰度颜色值
    469           *
    470           * 输出:
    471           *    16位RGB颜色值
    472           */

   \                                 In section .text, align 2, keep-with-next
    473          uint16 LPLD_LCD_U8GRAY2RGB(uint8 Color)
    474          {
    475            uint16  r, g, b, rgb;
    476            
    477            b = ( Color>>3 )  & 0x1f;
   \                     LPLD_LCD_U8GRAY2RGB: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x08C2             LSRS     R2,R0,#+3
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
    478            g = ( Color>>2 )  & 0x3f;
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x0881             LSRS     R1,R0,#+2
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
    479            r = ( Color>>3 )  & 0x1f;
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x08C0             LSRS     R0,R0,#+3
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
    480            
    481            rgb =  (b<<11) + (g<<5) + (r<<0);
   \   00000012   0x0149             LSLS     R1,R1,#+5
   \   00000014   0xEB11 0x21C2      ADDS     R1,R1,R2, LSL #+11
   \   00000018   0x1840             ADDS     R0,R0,R1
    482            
    483            return( rgb );
   \   0000001A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001C   0x4770             BX       LR               ;; return
    484          }
    485          
    486          /*
    487           * LPLD_LCD_GetPoint
    488           * 取得LCD某点的16位RGB值
    489           * 
    490           * 参数:
    491           *    Xpos--X轴坐标
    492           *    Ypos--Y轴坐标
    493           *
    494           * 输出:
    495           *    16位RGB颜色值
    496           */

   \                                 In section .text, align 2, keep-with-next
    497          uint16 LPLD_LCD_GetPoint(uint16 Xpos,uint16 Ypos)
    498          {
   \                     LPLD_LCD_GetPoint: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    499            uint16 dummy;
    500            
    501            LPLD_LCD_SetCursor(Xpos,Ypos);
   \   00000002   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x.... 0x....      BL       LPLD_LCD_SetCursor
    502            LPLD_LCD_WriteIndex(LPLD_LCD_INFO.Write_GRAM);  
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable22_3
   \   0000000E   0x8840             LDRH     R0,[R0, #+2]
   \   00000010   0x.... 0x....      BL       LPLD_LCD_WriteIndex
    503           
    504            dummy = LPLD_LCD_ReadData();   /* 空读一次 */
   \   00000014   0x.... 0x....      BL       LPLD_LCD_ReadData
   \   00000018   0x0004             MOVS     R4,R0
    505            dummy = LPLD_LCD_ReadData(); 
   \   0000001A   0x.... 0x....      BL       LPLD_LCD_ReadData
   \   0000001E   0x0004             MOVS     R4,R0
    506            return  dummy;	          
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    507          }
    508          
    509          /*
    510           * LPLD_LCD_SetPoint
    511           * 设置LCD某点的16位RGB值
    512           * 
    513           * 参数:
    514           *    Xpos--X轴坐标
    515           *    Ypos--Y轴坐标
    516           *    Color--16位RGB颜色值
    517           *
    518           * 输出:
    519           *    无
    520           */

   \                                 In section .text, align 2, keep-with-next
    521          void LPLD_LCD_SetPoint(uint16 Xpos,uint16 Ypos,uint16 Color)
    522          {
   \                     LPLD_LCD_SetPoint: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0014             MOVS     R4,R2
    523            if( Xpos >= MAX_X || Ypos >= MAX_Y )
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0xF5B0 0x7FA0      CMP      R0,#+320
   \   0000000A   0xDA02             BGE.N    ??LPLD_LCD_SetPoint_0
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0x29F0             CMP      R1,#+240
   \   00000010   0xDB00             BLT.N    ??LPLD_LCD_SetPoint_1
    524            {
    525              return;
   \                     ??LPLD_LCD_SetPoint_0: (+1)
   \   00000012   0xE00A             B.N      ??LPLD_LCD_SetPoint_2
    526            } 
    527            LPLD_LCD_SetCursor(Xpos,Ypos);
   \                     ??LPLD_LCD_SetPoint_1: (+1)
   \   00000014   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0x.... 0x....      BL       LPLD_LCD_SetCursor
    528            LPLD_LCD_WriteReg(LPLD_LCD_INFO.Write_GRAM,Color);
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable22_3
   \   00000024   0x8840             LDRH     R0,[R0, #+2]
   \   00000026   0x.... 0x....      BL       LPLD_LCD_WriteReg
    529          }
   \                     ??LPLD_LCD_SetPoint_2: (+1)
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    530          
    531          /*
    532           * LPLD_LCD_DrawLine
    533           * 在指定坐标显示直线
    534           * 
    535           * 参数:
    536           *    x0--X轴起始坐标
    537           *    y0--Y轴起始坐标
    538           *    x1--X轴结束坐标
    539           *    y1--Y轴结束坐标
    540           *    Color--16位RGB颜色值
    541           *
    542           * 输出:
    543           *    无
    544           */	 

   \                                 In section .text, align 2, keep-with-next
    545          void LPLD_LCD_DrawLine( uint16 x0, uint16 y0, uint16 x1, uint16 y1 , uint16 color )
    546          {
   \                     LPLD_LCD_DrawLine: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x4689             MOV      R9,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x469B             MOV      R11,R3
    547            short dx,dy;      /* 定义X Y轴上增加的变量值 */
    548            short temp;       /* 起点 终点大小比较 交换数据时的中间变量 */
    549            
    550            if( x0 > x1 )     /* X轴上起点大于终点 交换数据 */
   \   0000000C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000010   0x42AE             CMP      R6,R5
   \   00000012   0xD202             BCS.N    ??LPLD_LCD_DrawLine_0
    551            {
    552              temp = x1;
   \   00000014   0x46B2             MOV      R10,R6
    553              x1 = x0;
   \   00000016   0x002E             MOVS     R6,R5
    554              x0 = temp;   
   \   00000018   0x4655             MOV      R5,R10
    555            }
    556            if( y0 > y1 )     /* Y轴上起点大于终点 交换数据 */
   \                     ??LPLD_LCD_DrawLine_0: (+1)
   \   0000001A   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   0000001E   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000022   0x45CB             CMP      R11,R9
   \   00000024   0xD202             BCS.N    ??LPLD_LCD_DrawLine_1
    557            {
    558              temp = y1;
   \   00000026   0x46DA             MOV      R10,R11
    559              y1 = y0;
   \   00000028   0x46CB             MOV      R11,R9
    560              y0 = temp;   
   \   0000002A   0x46D1             MOV      R9,R10
    561            }
    562            
    563            dx = x1-x0;       /* X轴方向上的增量 */
   \                     ??LPLD_LCD_DrawLine_1: (+1)
   \   0000002C   0x1B77             SUBS     R7,R6,R5
    564            dy = y1-y0;       /* Y轴方向上的增量 */
   \   0000002E   0xEBBB 0x0809      SUBS     R8,R11,R9
   \   00000032   0x9C0A             LDR      R4,[SP, #+40]
    565            
    566            if( dx == 0 )     /* X轴上没有增量 画垂直线 */ 
   \   00000034   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000036   0x2F00             CMP      R7,#+0
   \   00000038   0xD110             BNE.N    ??LPLD_LCD_DrawLine_2
    567            {
    568              do
    569              { 
    570                LPLD_LCD_SetPoint(x0, y0, color);   /* 逐点显示 描垂直线 */
   \                     ??LPLD_LCD_DrawLine_3: (+1)
   \   0000003A   0x0022             MOVS     R2,R4
   \   0000003C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003E   0x4649             MOV      R1,R9
   \   00000040   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000046   0x.... 0x....      BL       LPLD_LCD_SetPoint
    571                y0++;
   \   0000004A   0xF119 0x0901      ADDS     R9,R9,#+1
    572              }
    573              while( y1 >= y0 ); 
   \   0000004E   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   00000052   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000056   0x45CB             CMP      R11,R9
   \   00000058   0xD2EF             BCS.N    ??LPLD_LCD_DrawLine_3
    574                return; 
   \   0000005A   0xE07E             B.N      ??LPLD_LCD_DrawLine_4
    575            }
    576            if( dy == 0 )     /* Y轴上没有增量 画水平直线 */ 
   \                     ??LPLD_LCD_DrawLine_2: (+1)
   \   0000005C   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000060   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000064   0xD10D             BNE.N    ??LPLD_LCD_DrawLine_5
    577            {
    578              do
    579              {
    580                LPLD_LCD_SetPoint(x0, y0, color);   /* 逐点显示 描水平线 */
   \                     ??LPLD_LCD_DrawLine_6: (+1)
   \   00000066   0x0022             MOVS     R2,R4
   \   00000068   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000006A   0x4649             MOV      R1,R9
   \   0000006C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0x.... 0x....      BL       LPLD_LCD_SetPoint
    581                x0++;
   \   00000076   0x1C6D             ADDS     R5,R5,#+1
    582              }
    583              while( x1 >= x0 ); 
   \   00000078   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000007C   0x42AE             CMP      R6,R5
   \   0000007E   0xD2F2             BCS.N    ??LPLD_LCD_DrawLine_6
    584                return;
   \   00000080   0xE06B             B.N      ??LPLD_LCD_DrawLine_4
    585            }
    586            /* 布兰森汉姆(Bresenham)算法画线 */
    587            if( dx > dy )                         /* 靠近X轴 */
   \                     ??LPLD_LCD_DrawLine_5: (+1)
   \   00000082   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000086   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000088   0x45B8             CMP      R8,R7
   \   0000008A   0xDA32             BGE.N    ??LPLD_LCD_DrawLine_7
    588            {
    589              temp = 2 * dy - dx;               /* 计算下个点的位置 */         
   \   0000008C   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000090   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000092   0xEBD7 0x0A48      RSBS     R10,R7,R8, LSL #+1
   \   00000096   0xE00A             B.N      ??LPLD_LCD_DrawLine_8
    590              while( x0 != x1 )
    591              {
    592                LPLD_LCD_SetPoint(x0,y0,color);    /* 画起点 */ 
    593                x0++;                         /* X轴上加1 */
    594                if( temp > 0 )                /* 判断下下个点的位置 */
    595                {
    596                  y0++;                     /* 为右上相邻点，即（x0+1,y0+1） */ 
   \                     ??LPLD_LCD_DrawLine_9: (+1)
   \   00000098   0xF119 0x0901      ADDS     R9,R9,#+1
    597                  temp += 2 * dy - 2 * dx; 
   \   0000009C   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   000000A0   0xEA5F 0x0048      LSLS     R0,R8,#+1
   \   000000A4   0xFA00 0xF08A      SXTAH    R0,R0,R10
   \   000000A8   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   000000AA   0xEBB0 0x0A47      SUBS     R10,R0,R7, LSL #+1
    598                }
   \                     ??LPLD_LCD_DrawLine_8: (+1)
   \   000000AE   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B0   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000B2   0x42B5             CMP      R5,R6
   \   000000B4   0xD014             BEQ.N    ??LPLD_LCD_DrawLine_10
   \   000000B6   0x0022             MOVS     R2,R4
   \   000000B8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000BA   0x4649             MOV      R1,R9
   \   000000BC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000BE   0x0028             MOVS     R0,R5
   \   000000C0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000C2   0x.... 0x....      BL       LPLD_LCD_SetPoint
   \   000000C6   0x1C6D             ADDS     R5,R5,#+1
   \   000000C8   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   000000CC   0xF1BA 0x0F01      CMP      R10,#+1
   \   000000D0   0xDAE2             BGE.N    ??LPLD_LCD_DrawLine_9
    599                else         
    600                {
    601                  temp += 2 * dy;           /* 判断下下个点的位置 */  
   \   000000D2   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   000000D6   0xEA5F 0x0048      LSLS     R0,R8,#+1
   \   000000DA   0xFA00 0xFA8A      SXTAH    R10,R0,R10
   \   000000DE   0xE7E6             B.N      ??LPLD_LCD_DrawLine_8
    602                }       
    603              }
    604              LPLD_LCD_SetPoint(x0,y0,color);
   \                     ??LPLD_LCD_DrawLine_10: (+1)
   \   000000E0   0x0022             MOVS     R2,R4
   \   000000E2   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000E4   0x4649             MOV      R1,R9
   \   000000E6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E8   0x0028             MOVS     R0,R5
   \   000000EA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000EC   0x.... 0x....      BL       LPLD_LCD_SetPoint
   \   000000F0   0xE033             B.N      ??LPLD_LCD_DrawLine_11
    605              }  
    606              else
    607              {
    608                temp = 2 * dx - dy;                      /* 靠近Y轴 */       
   \                     ??LPLD_LCD_DrawLine_7: (+1)
   \   000000F2   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   000000F4   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   000000F8   0xEBD8 0x0A47      RSBS     R10,R8,R7, LSL #+1
   \   000000FC   0xE009             B.N      ??LPLD_LCD_DrawLine_12
    609                while( y0 != y1 )
    610                {
    611                  LPLD_LCD_SetPoint(x0,y0,color);     
    612                  y0++;                 
    613                  if( temp > 0 )           
    614                  {
    615                    x0++;               
   \                     ??LPLD_LCD_DrawLine_13: (+1)
   \   000000FE   0x1C6D             ADDS     R5,R5,#+1
    616                    temp+=2*dy-2*dx; 
   \   00000100   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000104   0xEA5F 0x0048      LSLS     R0,R8,#+1
   \   00000108   0xFA00 0xF08A      SXTAH    R0,R0,R10
   \   0000010C   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   0000010E   0xEBB0 0x0A47      SUBS     R10,R0,R7, LSL #+1
    617                  }
   \                     ??LPLD_LCD_DrawLine_12: (+1)
   \   00000112   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000116   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   0000011A   0x45D9             CMP      R9,R11
   \   0000011C   0xD015             BEQ.N    ??LPLD_LCD_DrawLine_14
   \   0000011E   0x0022             MOVS     R2,R4
   \   00000120   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000122   0x4649             MOV      R1,R9
   \   00000124   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000126   0x0028             MOVS     R0,R5
   \   00000128   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000012A   0x.... 0x....      BL       LPLD_LCD_SetPoint
   \   0000012E   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000132   0xFA0F 0xFA8A      SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   00000136   0xF1BA 0x0F01      CMP      R10,#+1
   \   0000013A   0xDAE0             BGE.N    ??LPLD_LCD_DrawLine_13
    618                  else
    619                  {
    620                    temp += 2 * dy;
   \   0000013C   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000140   0xEA5F 0x0048      LSLS     R0,R8,#+1
   \   00000144   0xFA00 0xFA8A      SXTAH    R10,R0,R10
   \   00000148   0xE7E3             B.N      ??LPLD_LCD_DrawLine_12
    621                  }
    622               } 
    623            LPLD_LCD_SetPoint(x0,y0,color);
   \                     ??LPLD_LCD_DrawLine_14: (+1)
   \   0000014A   0x0022             MOVS     R2,R4
   \   0000014C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000014E   0x4649             MOV      R1,R9
   \   00000150   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000152   0x0028             MOVS     R0,R5
   \   00000154   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000156   0x.... 0x....      BL       LPLD_LCD_SetPoint
    624            }
    625          } 
   \                     ??LPLD_LCD_DrawLine_11: (+1)
   \                     ??LPLD_LCD_DrawLine_4: (+1)
   \   0000015A   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    626          
    627          
    628          /*
    629           * LPLD_LCD_DrawSquare
    630           * 在指定坐标显示正方形
    631           * 
    632           * 参数： 
    633           *    x0--正方形的起始横坐标 
    634           *    y0--正方形的起始纵坐标
    635           *    side_length--正方形的边长
    636           *    Line_color--正方形边的颜色
    637           *    Fill_color--正方形整体填充的颜色
    638           *
    639           * 输出:
    640           *    无
    641           */

   \                                 In section .text, align 2, keep-with-next
    642          void LPLD_LCD_DrawSquare(uint16 x0,uint16 y0,uint16 side_length,uint16 Line_color,uint16 Fill_color)
    643          {
   \                     LPLD_LCD_DrawSquare: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x001C             MOVS     R4,R3
    644            uint16 i,j;
    645            if(side_length > MAX_X || side_length > MAX_Y)
   \   0000000C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000000E   0xF5B7 0x7FA0      CMP      R7,#+320
   \   00000012   0xDC02             BGT.N    ??LPLD_LCD_DrawSquare_0
   \   00000014   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000016   0x2FF1             CMP      R7,#+241
   \   00000018   0xDB00             BLT.N    ??LPLD_LCD_DrawSquare_1
    646              return;
   \                     ??LPLD_LCD_DrawSquare_0: (+1)
   \   0000001A   0xE05D             B.N      ??LPLD_LCD_DrawSquare_2
    647            
    648            if(x0+side_length > MAX_X)
   \                     ??LPLD_LCD_DrawSquare_1: (+1)
   \   0000001C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000001E   0xFA17 0xF085      UXTAH    R0,R7,R5
   \   00000022   0xF5B0 0x7FA0      CMP      R0,#+320
   \   00000026   0xDC57             BGT.N    ??LPLD_LCD_DrawSquare_2
    649              return;
    650            else
    651              LPLD_LCD_DrawLine(x0,y0,x0+side_length,y0,Line_color);
   \                     ??LPLD_LCD_DrawSquare_3: (+1)
   \   00000028   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002A   0x9400             STR      R4,[SP, #+0]
   \   0000002C   0x0033             MOVS     R3,R6
   \   0000002E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000030   0x197A             ADDS     R2,R7,R5
   \   00000032   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000034   0x0031             MOVS     R1,R6
   \   00000036   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0x.... 0x....      BL       LPLD_LCD_DrawLine
    652            
    653            if(y0+side_length > MAX_Y)
   \   00000040   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000042   0xFA17 0xF086      UXTAH    R0,R7,R6
   \   00000046   0x28F1             CMP      R0,#+241
   \   00000048   0xDA46             BGE.N    ??LPLD_LCD_DrawSquare_2
    654              return;
    655            else
    656              LPLD_LCD_DrawLine(x0,y0,x0,y0+side_length,Line_color);
   \                     ??LPLD_LCD_DrawSquare_4: (+1)
   \   0000004A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000004C   0x9400             STR      R4,[SP, #+0]
   \   0000004E   0x19BB             ADDS     R3,R7,R6
   \   00000050   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000052   0x002A             MOVS     R2,R5
   \   00000054   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000056   0x0031             MOVS     R1,R6
   \   00000058   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005A   0x0028             MOVS     R0,R5
   \   0000005C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   0x.... 0x....      BL       LPLD_LCD_DrawLine
    657            
    658            LPLD_LCD_DrawLine(x0+side_length,y0,x0+side_length,y0+side_length,Line_color);
   \   00000062   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000064   0x9400             STR      R4,[SP, #+0]
   \   00000066   0x19BB             ADDS     R3,R7,R6
   \   00000068   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000006A   0x197A             ADDS     R2,R7,R5
   \   0000006C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000006E   0x0031             MOVS     R1,R6
   \   00000070   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000072   0x1978             ADDS     R0,R7,R5
   \   00000074   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000076   0x.... 0x....      BL       LPLD_LCD_DrawLine
    659            LPLD_LCD_DrawLine(x0,y0+side_length,x0+side_length,y0+side_length,Line_color);
   \   0000007A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000007C   0x9400             STR      R4,[SP, #+0]
   \   0000007E   0x19BB             ADDS     R3,R7,R6
   \   00000080   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000082   0x197A             ADDS     R2,R7,R5
   \   00000084   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000086   0x19B9             ADDS     R1,R7,R6
   \   00000088   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000008A   0x0028             MOVS     R0,R5
   \   0000008C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008E   0x.... 0x....      BL       LPLD_LCD_DrawLine
    660            
    661            for(i=0;i<side_length-1;i++)
   \   00000092   0xF05F 0x0800      MOVS     R8,#+0
   \   00000096   0x9C08             LDR      R4,[SP, #+32]
   \   00000098   0xE015             B.N      ??LPLD_LCD_DrawSquare_5
    662            {
    663              for(j=0;j<side_length-1;j++)
    664              {
    665                LPLD_LCD_SetPoint(x0+1+i,y0+1+j,Fill_color);
   \                     ??LPLD_LCD_DrawSquare_6: (+1)
   \   0000009A   0x0022             MOVS     R2,R4
   \   0000009C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000009E   0xEB19 0x0006      ADDS     R0,R9,R6
   \   000000A2   0x1C41             ADDS     R1,R0,#+1
   \   000000A4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A6   0xEB18 0x0005      ADDS     R0,R8,R5
   \   000000AA   0x1C40             ADDS     R0,R0,#+1
   \   000000AC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000AE   0x.... 0x....      BL       LPLD_LCD_SetPoint
    666              }
   \   000000B2   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LPLD_LCD_DrawSquare_7: (+1)
   \   000000B6   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000BA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000BC   0x1E78             SUBS     R0,R7,#+1
   \   000000BE   0x4581             CMP      R9,R0
   \   000000C0   0xDBEB             BLT.N    ??LPLD_LCD_DrawSquare_6
   \   000000C2   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LPLD_LCD_DrawSquare_5: (+1)
   \   000000C6   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000CA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000CC   0x1E78             SUBS     R0,R7,#+1
   \   000000CE   0x4580             CMP      R8,R0
   \   000000D0   0xDA02             BGE.N    ??LPLD_LCD_DrawSquare_8
   \   000000D2   0xF05F 0x0900      MOVS     R9,#+0
   \   000000D6   0xE7EE             B.N      ??LPLD_LCD_DrawSquare_7
    667            }
    668          }
   \                     ??LPLD_LCD_DrawSquare_8: (+1)
   \                     ??LPLD_LCD_DrawSquare_2: (+1)
   \   000000D8   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    669          
    670          /*
    671           * LPLD_LCD_DrawRectangle
    672           * 在指定坐标显示矩形
    673           * 
    674           * 参数： 
    675           *    x0--长方形的起始横坐标 
    676           *    y0--长方形的起始纵坐标
    677           *    side_xlength--长
    678           *    side_ylength--宽
    679           *    Line_color--长方形边的颜色
    680           *    Fill_color--长方形整体填充的颜色
    681           *
    682           * 输出:
    683           *    无
    684           */

   \                                 In section .text, align 2, keep-with-next
    685          void LPLD_LCD_DrawRectangle(uint16 x0,uint16 y0,uint16 side_xlength,uint16 side_ylength,uint16 Line_color,uint16 Fill_color)
    686          {
   \                     LPLD_LCD_DrawRectangle: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0017             MOVS     R7,R2
   \   0000000C   0x4698             MOV      R8,R3
    687            uint16 i,j;
    688            if(side_xlength > MAX_X || side_ylength > MAX_Y)
   \   0000000E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000010   0xF5B7 0x7FA0      CMP      R7,#+320
   \   00000014   0xDC04             BGT.N    ??LPLD_LCD_DrawRectangle_0
   \   00000016   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000001A   0xF1B8 0x0FF1      CMP      R8,#+241
   \   0000001E   0xDB00             BLT.N    ??LPLD_LCD_DrawRectangle_1
    689              return;
   \                     ??LPLD_LCD_DrawRectangle_0: (+1)
   \   00000020   0xE065             B.N      ??LPLD_LCD_DrawRectangle_2
    690            
    691            if(x0+side_xlength > MAX_X)
   \                     ??LPLD_LCD_DrawRectangle_1: (+1)
   \   00000022   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000024   0xFA17 0xF085      UXTAH    R0,R7,R5
   \   00000028   0xF5B0 0x7FA0      CMP      R0,#+320
   \   0000002C   0xDC5F             BGT.N    ??LPLD_LCD_DrawRectangle_2
    692              return;
   \                     ??LPLD_LCD_DrawRectangle_3: (+1)
   \   0000002E   0x9C0A             LDR      R4,[SP, #+40]
    693            else
    694              LPLD_LCD_DrawLine(x0,y0,x0+side_xlength,y0,Line_color);
   \   00000030   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000032   0x9400             STR      R4,[SP, #+0]
   \   00000034   0x0033             MOVS     R3,R6
   \   00000036   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000038   0x197A             ADDS     R2,R7,R5
   \   0000003A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003C   0x0031             MOVS     R1,R6
   \   0000003E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000044   0x.... 0x....      BL       LPLD_LCD_DrawLine
    695            
    696            if(y0+side_ylength > MAX_Y)
   \   00000048   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000004C   0xFA18 0xF086      UXTAH    R0,R8,R6
   \   00000050   0x28F1             CMP      R0,#+241
   \   00000052   0xDA4C             BGE.N    ??LPLD_LCD_DrawRectangle_2
    697              return;
    698            else
    699              LPLD_LCD_DrawLine(x0,y0,x0,y0+side_ylength,Line_color);
   \                     ??LPLD_LCD_DrawRectangle_4: (+1)
   \   00000054   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000056   0x9400             STR      R4,[SP, #+0]
   \   00000058   0xEB18 0x0306      ADDS     R3,R8,R6
   \   0000005C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000005E   0x002A             MOVS     R2,R5
   \   00000060   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000062   0x0031             MOVS     R1,R6
   \   00000064   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000066   0x0028             MOVS     R0,R5
   \   00000068   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006A   0x.... 0x....      BL       LPLD_LCD_DrawLine
    700            
    701            LPLD_LCD_DrawLine(x0+side_xlength,y0,x0+side_xlength,y0+side_ylength,Line_color);
   \   0000006E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000070   0x9400             STR      R4,[SP, #+0]
   \   00000072   0xEB18 0x0306      ADDS     R3,R8,R6
   \   00000076   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000078   0x197A             ADDS     R2,R7,R5
   \   0000007A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000007C   0x0031             MOVS     R1,R6
   \   0000007E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000080   0x1978             ADDS     R0,R7,R5
   \   00000082   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000084   0x.... 0x....      BL       LPLD_LCD_DrawLine
    702            LPLD_LCD_DrawLine(x0,y0+side_ylength,x0+side_xlength,y0+side_ylength,Line_color);
   \   00000088   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000008A   0x9400             STR      R4,[SP, #+0]
   \   0000008C   0xEB18 0x0306      ADDS     R3,R8,R6
   \   00000090   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000092   0x197A             ADDS     R2,R7,R5
   \   00000094   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000096   0xEB18 0x0106      ADDS     R1,R8,R6
   \   0000009A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000009C   0x0028             MOVS     R0,R5
   \   0000009E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A0   0x.... 0x....      BL       LPLD_LCD_DrawLine
    703            
    704            for(i=0;i<side_xlength-1;i++)
   \   000000A4   0xF05F 0x0900      MOVS     R9,#+0
   \   000000A8   0x9C0B             LDR      R4,[SP, #+44]
   \   000000AA   0xE017             B.N      ??LPLD_LCD_DrawRectangle_5
    705            {
    706              for(j=0;j<side_ylength-1;j++)
    707              {
    708                LPLD_LCD_SetPoint(x0+1+i,y0+1+j,Fill_color);
   \                     ??LPLD_LCD_DrawRectangle_6: (+1)
   \   000000AC   0x0022             MOVS     R2,R4
   \   000000AE   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000B0   0xEB1A 0x0006      ADDS     R0,R10,R6
   \   000000B4   0x1C41             ADDS     R1,R0,#+1
   \   000000B6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B8   0xEB19 0x0005      ADDS     R0,R9,R5
   \   000000BC   0x1C40             ADDS     R0,R0,#+1
   \   000000BE   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000C0   0x.... 0x....      BL       LPLD_LCD_SetPoint
    709              }
   \   000000C4   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \                     ??LPLD_LCD_DrawRectangle_7: (+1)
   \   000000C8   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000CC   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000D0   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \   000000D4   0x4582             CMP      R10,R0
   \   000000D6   0xDBE9             BLT.N    ??LPLD_LCD_DrawRectangle_6
   \   000000D8   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LPLD_LCD_DrawRectangle_5: (+1)
   \   000000DC   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000E0   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000E2   0x1E78             SUBS     R0,R7,#+1
   \   000000E4   0x4581             CMP      R9,R0
   \   000000E6   0xDA02             BGE.N    ??LPLD_LCD_DrawRectangle_8
   \   000000E8   0xF05F 0x0A00      MOVS     R10,#+0
   \   000000EC   0xE7EC             B.N      ??LPLD_LCD_DrawRectangle_7
    710            }
    711          }
   \                     ??LPLD_LCD_DrawRectangle_8: (+1)
   \                     ??LPLD_LCD_DrawRectangle_2: (+1)
   \   000000EE   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
    712          
    713          /*
    714           * LPLD_LCD_GRAMFillRec
    715           * 填充指定颜色的矩形到LCD_GRAM
    716           * 
    717           * 参数： 
    718           *    x0--X轴起始坐标
    719           *    y0--Y轴起始坐标
    720           *    x1--X轴结束坐标
    721           *    y1--Y轴结束坐标
    722           *    Color--16位RGB颜色值
    723           *
    724           * 输出:
    725           *    无
    726           */

   \                                 In section .text, align 2, keep-with-next
    727          void LPLD_LCD_GRAMFillRec(uint16 x0,uint16 y0,uint16 x1,uint16 y1,uint16 Color)
    728          {          
   \                     LPLD_LCD_GRAMFillRec: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    729            uint16 i,j;   
    730            for(i=y0;i<=y1;i++)
   \   00000002   0x9C04             LDR      R4,[SP, #+16]
   \   00000004   0xE012             B.N      ??LPLD_LCD_GRAMFillRec_0
    731            {
    732              for(j=x0; j<x1; j++)
    733              {
    734                LCD_GRAM[MAX_X*MAX_Y - (j-1)*MAX_Y - (i)] = Color;
   \                     ??LPLD_LCD_GRAMFillRec_1: (+1)
   \   00000006   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000008   0x1E6E             SUBS     R6,R5,#+1
   \   0000000A   0x27F0             MOVS     R7,#+240
   \   0000000C   0x437E             MULS     R6,R7,R6
   \   0000000E   0xF5D6 0x3696      RSBS     R6,R6,#+76800
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x1A76             SUBS     R6,R6,R1
   \   00000016   0x.... 0x....      LDR.W    R7,??DataTable22_5
   \   0000001A   0x683F             LDR      R7,[R7, #+0]
   \   0000001C   0xF827 0x4016      STRH     R4,[R7, R6, LSL #+1]
    735              }    
   \   00000020   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LPLD_LCD_GRAMFillRec_2: (+1)
   \   00000022   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000024   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000026   0x4295             CMP      R5,R2
   \   00000028   0xD3ED             BCC.N    ??LPLD_LCD_GRAMFillRec_1
   \   0000002A   0x1C49             ADDS     R1,R1,#+1
   \                     ??LPLD_LCD_GRAMFillRec_0: (+1)
   \   0000002C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000002E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   0x428B             CMP      R3,R1
   \   00000032   0xD301             BCC.N    ??LPLD_LCD_GRAMFillRec_3
   \   00000034   0x0005             MOVS     R5,R0
   \   00000036   0xE7F4             B.N      ??LPLD_LCD_GRAMFillRec_2
    736            }
    737          } 
   \                     ??LPLD_LCD_GRAMFillRec_3: (+1)
   \   00000038   0xBCF0             POP      {R4-R7}
   \   0000003A   0x4770             BX       LR               ;; return
    738          
    739          /*
    740           * LPLD_LCD_GRAMDrawHLine
    741           * 填充指定颜色的横线到LCD_GRAM
    742           * 
    743           * 参数： 
    744           *    x0--X轴起始坐标
    745           *    y0--Y轴起始坐标
    746           *    len--横线长度
    747           *    Color--16位RGB颜色值
    748           *
    749           * 输出:
    750           *    无
    751           */

   \                                 In section .text, align 2, keep-with-next
    752          void LPLD_LCD_GRAMDrawHLine(uint16 x0,uint16 y0,uint16 len,uint16 Color)
    753          {
   \                     LPLD_LCD_GRAMDrawHLine: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    754            uint16 i;
    755            for(i=0; i<len; i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE00F             B.N      ??LPLD_LCD_GRAMDrawHLine_0
    756            {
    757              LCD_GRAM[MAX_X*MAX_Y - (x0+i-1)*MAX_Y - (y0)] = Color;
   \                     ??LPLD_LCD_GRAMDrawHLine_1: (+1)
   \   00000006   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000008   0xFA14 0xF580      UXTAH    R5,R4,R0
   \   0000000C   0x1E6D             SUBS     R5,R5,#+1
   \   0000000E   0x26F0             MOVS     R6,#+240
   \   00000010   0x4375             MULS     R5,R6,R5
   \   00000012   0xF5D5 0x3596      RSBS     R5,R5,#+76800
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0x1A6D             SUBS     R5,R5,R1
   \   0000001A   0x.... 0x....      LDR.W    R6,??DataTable22_5
   \   0000001E   0x6836             LDR      R6,[R6, #+0]
   \   00000020   0xF826 0x3015      STRH     R3,[R6, R5, LSL #+1]
    758            }
   \   00000024   0x1C64             ADDS     R4,R4,#+1
   \                     ??LPLD_LCD_GRAMDrawHLine_0: (+1)
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002A   0x4294             CMP      R4,R2
   \   0000002C   0xD3EB             BCC.N    ??LPLD_LCD_GRAMDrawHLine_1
    759          }
   \   0000002E   0xBC70             POP      {R4-R6}
   \   00000030   0x4770             BX       LR               ;; return
    760          
    761          /*
    762           * LPLD_LCD_GRAMDrawHLine
    763           * 显示一幅指定大小的U8灰度图像
    764           * 
    765           * 参数： 
    766           *    *Color--8位灰度图像数组
    767           *    w--图像宽
    768           *    h--图像高
    769           *
    770           * 输出:
    771           *    无
    772           */

   \                                 In section .text, align 2, keep-with-next
    773          void LPLD_LCD_DrawU8Gray(uint8 *Color, uint16 w, uint16 h)
    774          {
   \                     LPLD_LCD_DrawU8Gray: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    775            uint16 i=0, j=0;
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    776           
    777            for(i=0; i<w; i++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0007             MOVS     R7,R0
   \   00000014   0xE013             B.N      ??LPLD_LCD_DrawU8Gray_0
    778            {  
    779              LPLD_LCD_SetCursor(w-i-1, 0); 
    780              LPLD_LCD_WriteIndex(LPLD_LCD_INFO.Write_GRAM);
    781              for(j=0; j<h; j++)
    782              {
    783                LPLD_LCD_WriteData(LPLD_LCD_U8GRAY2RGB(Color[j*w+i]));
   \                     ??LPLD_LCD_DrawU8Gray_1: (+1)
   \   00000016   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000001A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000001E   0xFB05 0x7008      MLA      R0,R5,R8,R7
   \   00000022   0x5D00             LDRB     R0,[R0, R4]
   \   00000024   0x.... 0x....      BL       LPLD_LCD_U8GRAY2RGB
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x.... 0x....      BL       LPLD_LCD_WriteData
    784              }   
   \   0000002E   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LPLD_LCD_DrawU8Gray_2: (+1)
   \   00000032   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000036   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000038   0x45B0             CMP      R8,R6
   \   0000003A   0xD3EC             BCC.N    ??LPLD_LCD_DrawU8Gray_1
   \   0000003C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LPLD_LCD_DrawU8Gray_0: (+1)
   \   0000003E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000040   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   0x42AF             CMP      R7,R5
   \   00000044   0xD20D             BCS.N    ??LPLD_LCD_DrawU8Gray_3
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x1BE8             SUBS     R0,R5,R7
   \   0000004A   0x1E40             SUBS     R0,R0,#+1
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0x.... 0x....      BL       LPLD_LCD_SetCursor
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable22_3
   \   00000056   0x8840             LDRH     R0,[R0, #+2]
   \   00000058   0x.... 0x....      BL       LPLD_LCD_WriteIndex
   \   0000005C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000060   0xE7E7             B.N      ??LPLD_LCD_DrawU8Gray_2
    785            }
    786          }
   \                     ??LPLD_LCD_DrawU8Gray_3: (+1)
   \   00000062   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    787          
    788          /*
    789           * LPLD_LCD_ShowChar
    790           * 在指定坐标显示字符
    791           * 
    792           * 参数： 
    793           *    Xpos--X轴坐标
    794           *    Ypos--Y轴坐标
    795           *    ASCI--ASCI码
    796           *    charColor--字符字体颜色
    797           *    bkColor--字符背景颜色
    798           *
    799           * 输出:
    800           *    无
    801           */

   \                                 In section .text, align 2, keep-with-next
    802          void LPLD_LCD_ShowChar( uint16 Xpos, uint16 Ypos, uint8 ASCI, uint16 charColor, uint16 bkColor )
    803          {
   \                     LPLD_LCD_ShowChar: (+1)
   \   00000000   0xE92D 0x4FF4      PUSH     {R2,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x001F             MOVS     R7,R3
    804            uint16 i, j,te1,te2;
    805            uint8 tmp_char;
    806            for( i=0; i<16; i++ )
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0x9C0C             LDR      R4,[SP, #+48]
   \   00000012   0xE001             B.N      ??LPLD_LCD_ShowChar_0
   \                     ??LPLD_LCD_ShowChar_1: (+1)
   \   00000014   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??LPLD_LCD_ShowChar_0: (+1)
   \   00000018   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000001C   0xF1B8 0x0F10      CMP      R8,#+16
   \   00000020   0xDA37             BGE.N    ??LPLD_LCD_ShowChar_2
    807            {
    808              tmp_char = asc2_1608[ASCI-32][i];
   \   00000022   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000026   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000002A   0x....             LDR.N    R1,??DataTable22_6
   \   0000002C   0xEB11 0x1000      ADDS     R0,R1,R0, LSL #+4
   \   00000030   0xEB18 0x0000      ADDS     R0,R8,R0
   \   00000034   0xF5B0 0x7000      SUBS     R0,R0,#+512
   \   00000038   0xF890 0x9000      LDRB     R9,[R0, #+0]
    809              for( j=0; j<8; j++ )
   \   0000003C   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000040   0xE011             B.N      ??LPLD_LCD_ShowChar_3
    810              {
    811                if( (tmp_char >> j) & 0x01 == 0x01 )
    812                {
    813                  LPLD_LCD_SetPoint( Xpos + j, Ypos + i, charColor );  /* 字符颜色 */
    814                }
    815                else
    816                {
    817                  te1=Xpos + j;
   \                     ??LPLD_LCD_ShowChar_4: (+1)
   \   00000042   0xEB1A 0x0005      ADDS     R0,R10,R5
   \   00000046   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    818                  te2 = Ypos + i;
   \   0000004A   0xEB18 0x0B06      ADDS     R11,R8,R6
    819                   LPLD_LCD_SetPoint( Xpos + j, Ypos + i, bkColor );  /* 背景颜色 */
   \   0000004E   0x0022             MOVS     R2,R4
   \   00000050   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000052   0xEB18 0x0106      ADDS     R1,R8,R6
   \   00000056   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000058   0xEB1A 0x0005      ADDS     R0,R10,R5
   \   0000005C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   0x.... 0x....      BL       LPLD_LCD_SetPoint
    820                }
   \                     ??LPLD_LCD_ShowChar_5: (+1)
   \   00000062   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \                     ??LPLD_LCD_ShowChar_3: (+1)
   \   00000066   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000006A   0xF1BA 0x0F08      CMP      R10,#+8
   \   0000006E   0xDAD1             BGE.N    ??LPLD_LCD_ShowChar_1
   \   00000070   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000074   0xFA59 0xF00A      ASRS     R0,R9,R10
   \   00000078   0x07C0             LSLS     R0,R0,#+31
   \   0000007A   0xD5E2             BPL.N    ??LPLD_LCD_ShowChar_4
   \   0000007C   0x003A             MOVS     R2,R7
   \   0000007E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000080   0xEB18 0x0106      ADDS     R1,R8,R6
   \   00000084   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000086   0xEB1A 0x0005      ADDS     R0,R10,R5
   \   0000008A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008C   0x.... 0x....      BL       LPLD_LCD_SetPoint
   \   00000090   0xE7E7             B.N      ??LPLD_LCD_ShowChar_5
    821              }
    822            }
    823          }
   \                     ??LPLD_LCD_ShowChar_2: (+1)
   \   00000092   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    824          
    825          //不开窗写函数

   \                                 In section .text, align 2, keep-with-next
    826          void LPLD_LCD_ShowCharno( uint16 Xpos, uint16 Ypos, uint8 ASCI, uint16 charColor )
    827          {
   \                     LPLD_LCD_ShowCharno: (+1)
   \   00000000   0xE92D 0x4FF4      PUSH     {R2,R4-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x001E             MOVS     R6,R3
    828            uint16 i, j,coloer,te1,te2;
    829            uint8 tmp_char;
    830            for( i=0; i<16; i++ )
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xE000             B.N      ??LPLD_LCD_ShowCharno_0
   \                     ??LPLD_LCD_ShowCharno_1: (+1)
   \   0000000E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LPLD_LCD_ShowCharno_0: (+1)
   \   00000010   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000012   0x2F10             CMP      R7,#+16
   \   00000014   0xDA51             BGE.N    ??LPLD_LCD_ShowCharno_2
    831            {
    832              tmp_char = asc2_1608[ASCI-32][i];
   \   00000016   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable22_6
   \   0000001E   0xEB11 0x1000      ADDS     R0,R1,R0, LSL #+4
   \   00000022   0x1838             ADDS     R0,R7,R0
   \   00000024   0xF5B0 0x7000      SUBS     R0,R0,#+512
   \   00000028   0xF890 0x8000      LDRB     R8,[R0, #+0]
    833              for( j=0; j<8; j++ )
   \   0000002C   0xF05F 0x0900      MOVS     R9,#+0
   \   00000030   0xE02E             B.N      ??LPLD_LCD_ShowCharno_3
    834              {
    835                if( (tmp_char >> j) & 0x01 == 0x01 )
    836                {
    837                  LPLD_LCD_SetPoint( Xpos + j, Ypos + i, charColor );  /* 字符颜色 */
    838                }
    839                else
    840                {
    841                  te1=Xpos + j;
   \                     ??LPLD_LCD_ShowCharno_4: (+1)
   \   00000032   0xEB19 0x0A04      ADDS     R10,R9,R4
    842                  te2 = Ypos + i;
   \   00000036   0xEB17 0x0B05      ADDS     R11,R7,R5
    843                  coloer=gImage_suqian[((Xpos + j)+(Ypos + i)*320)*2];
   \   0000003A   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000003E   0xFA19 0xF084      UXTAH    R0,R9,R4
   \   00000042   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000044   0xFA17 0xF185      UXTAH    R1,R7,R5
   \   00000048   0xF44F 0x72A0      MOV      R2,#+320
   \   0000004C   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000050   0x....             LDR.N    R1,??DataTable22_7
   \   00000052   0xF811 0x2010      LDRB     R2,[R1, R0, LSL #+1]
    844                  coloer<<=8;
   \   00000056   0x0212             LSLS     R2,R2,#+8
    845                  coloer=coloer&0xff00;
   \   00000058   0xF412 0x427F      ANDS     R2,R2,#0xFF00
    846                  coloer |= gImage_suqian[((Xpos + j)+(Ypos + i)*320)*2+1];        
   \   0000005C   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000060   0xFA19 0xF084      UXTAH    R0,R9,R4
   \   00000064   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000066   0xFA17 0xF185      UXTAH    R1,R7,R5
   \   0000006A   0xF44F 0x73A0      MOV      R3,#+320
   \   0000006E   0xFB03 0x0001      MLA      R0,R3,R1,R0
   \   00000072   0x....             LDR.N    R1,??DataTable22_7
   \   00000074   0xEB11 0x0040      ADDS     R0,R1,R0, LSL #+1
   \   00000078   0x7840             LDRB     R0,[R0, #+1]
   \   0000007A   0x4302             ORRS     R2,R0,R2
    847                  LPLD_LCD_SetPoint( Xpos + j, Ypos + i, coloer );
   \   0000007C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000007E   0x1979             ADDS     R1,R7,R5
   \   00000080   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000082   0xEB19 0x0004      ADDS     R0,R9,R4
   \   00000086   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000088   0x.... 0x....      BL       LPLD_LCD_SetPoint
    848                }
   \                     ??LPLD_LCD_ShowCharno_5: (+1)
   \   0000008C   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??LPLD_LCD_ShowCharno_3: (+1)
   \   00000090   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000094   0xF1B9 0x0F08      CMP      R9,#+8
   \   00000098   0xDAB9             BGE.N    ??LPLD_LCD_ShowCharno_1
   \   0000009A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000009E   0xFA58 0xF009      ASRS     R0,R8,R9
   \   000000A2   0x07C0             LSLS     R0,R0,#+31
   \   000000A4   0xD5C5             BPL.N    ??LPLD_LCD_ShowCharno_4
   \   000000A6   0x0032             MOVS     R2,R6
   \   000000A8   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000AA   0x1979             ADDS     R1,R7,R5
   \   000000AC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000AE   0xEB19 0x0004      ADDS     R0,R9,R4
   \   000000B2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B4   0x.... 0x....      BL       LPLD_LCD_SetPoint
   \   000000B8   0xE7E8             B.N      ??LPLD_LCD_ShowCharno_5
    849              }
    850            }
    851          }
   \                     ??LPLD_LCD_ShowCharno_2: (+1)
   \   000000BA   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    852          
    853          
    854          

   \                                 In section .text, align 2, keep-with-next
    855          uint32 mypow(uint8 m,uint8 n)
    856          {
    857          	uint32 result=1;	 
   \                     mypow: (+1)
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002   0xE001             B.N      ??mypow_0
    858          	while(n--)result*=m;    
   \                     ??mypow_1: (+1)
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x4342             MULS     R2,R0,R2
   \                     ??mypow_0: (+1)
   \   00000008   0x000B             MOVS     R3,R1
   \   0000000A   0x1E59             SUBS     R1,R3,#+1
   \   0000000C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000E   0x2B00             CMP      R3,#+0
   \   00000010   0xD1F8             BNE.N    ??mypow_1
    859          	return result;
   \   00000012   0x0010             MOVS     R0,R2
   \   00000014   0x4770             BX       LR               ;; return
    860          }
    861          
    862          /*
    863           * LPLD_LCD_ShowNum
    864           * 在指定坐标显示数字
    865           * 
    866           * 参数： 
    867           *    Xpos--X轴坐标
    868           *    Ypos--Y轴坐标
    869           *    num--数字
    870           *    len--数字长度
    871           *    charColor--字符字体颜色
    872           *    bkColor--字符背景颜色
    873           *
    874           * 输出:
    875           *    无
    876           */

   \                                 In section .text, align 2, keep-with-next
    877          void LPLD_LCD_ShowNum(uint16 Xpos, uint16 Ypos, uint16 num, uint8 len, uint16 charColor, uint16 bkColor )
    878          {         	
   \                     LPLD_LCD_ShowNum: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0006             MOVS     R6,R0
   \   00000008   0x000F             MOVS     R7,R1
   \   0000000A   0x4690             MOV      R8,R2
   \   0000000C   0x4699             MOV      R9,R3
    879            uint8 t,temp;						   
    880            for(t=0;t<len;t++)
   \   0000000E   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000012   0x9C0A             LDR      R4,[SP, #+40]
   \   00000014   0x9D0B             LDR      R5,[SP, #+44]
   \   00000016   0xE028             B.N      ??LPLD_LCD_ShowNum_0
    881            {
    882              temp=(num/mypow(10,len-t-1))%10;
   \                     ??LPLD_LCD_ShowNum_1: (+1)
   \   00000018   0xEBB9 0x000A      SUBS     R0,R9,R10
   \   0000001C   0x1E41             SUBS     R1,R0,#+1
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x200A             MOVS     R0,#+10
   \   00000022   0x.... 0x....      BL       mypow
   \   00000026   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000002A   0xFBB8 0xF0F0      UDIV     R0,R8,R0
   \   0000002E   0x210A             MOVS     R1,#+10
   \   00000030   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000034   0xFB01 0x0012      MLS      R0,R1,R2,R0
    883              LPLD_LCD_ShowChar(Xpos+(8)*t,Ypos,temp+'0',charColor,bkColor); 
   \   00000038   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003A   0x9500             STR      R5,[SP, #+0]
   \   0000003C   0x0023             MOVS     R3,R4
   \   0000003E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000040   0xF110 0x0230      ADDS     R2,R0,#+48
   \   00000044   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000046   0x0039             MOVS     R1,R7
   \   00000048   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000004E   0xEA5F 0x00CA      LSLS     R0,R10,#+3
   \   00000052   0xFA10 0xF086      UXTAH    R0,R0,R6
   \   00000056   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000058   0x.... 0x....      BL       LPLD_LCD_ShowChar
    884              CurX = CurX + 8;  
   \   0000005C   0x....             LDR.N    R0,??DataTable22_8
   \   0000005E   0x8800             LDRH     R0,[R0, #+0]
   \   00000060   0x3008             ADDS     R0,R0,#+8
   \   00000062   0x....             LDR.N    R1,??DataTable22_8
   \   00000064   0x8008             STRH     R0,[R1, #+0]
    885            }
   \   00000066   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \                     ??LPLD_LCD_ShowNum_0: (+1)
   \   0000006A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000006E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000072   0x45CA             CMP      R10,R9
   \   00000074   0xD3D0             BCC.N    ??LPLD_LCD_ShowNum_1
    886          } 
   \   00000076   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
    887          
    888          /*
    889           * LPLD_LCD_ShowString
    890           * 在指定坐标显示字符串
    891           * 
    892           * 参数： 
    893           *    Xpos--X轴坐标
    894           *    Ypos--Y轴坐标
    895           *    *str--字符串
    896           *    strColor--字符串字体颜色
    897           *    bkColor--字符背景颜色
    898           *
    899           * 输出:
    900           *    无
    901           */

   \                                 In section .text, align 2, keep-with-next
    902          void LPLD_LCD_ShowString(uint16 Xpos, uint16 Ypos, uint8 *str,uint16 strColor, uint16 bkColor)
    903          {
   \                     LPLD_LCD_ShowString: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0007             MOVS     R7,R0
   \   00000008   0x4688             MOV      R8,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001D             MOVS     R5,R3
   \   0000000E   0x9C08             LDR      R4,[SP, #+32]
    904            uint8 TempChar;
    905            do
    906            {
    907              TempChar = *str++;  
   \                     ??LPLD_LCD_ShowString_0: (+1)
   \   00000010   0x7832             LDRB     R2,[R6, #+0]
   \   00000012   0x1C76             ADDS     R6,R6,#+1
    908              LPLD_LCD_ShowChar( Xpos, Ypos, TempChar, strColor, bkColor );    
   \   00000014   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000016   0x9400             STR      R4,[SP, #+0]
   \   00000018   0x002B             MOVS     R3,R5
   \   0000001A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x4641             MOV      R1,R8
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x0038             MOVS     R0,R7
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x.... 0x....      BL       LPLD_LCD_ShowChar
    909              if( Xpos <= MAX_X - 8 )
   \   0000002A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002C   0xF5B7 0x7F9C      CMP      R7,#+312
   \   00000030   0xDC01             BGT.N    ??LPLD_LCD_ShowString_1
    910              {
    911                Xpos += 8;
   \   00000032   0x3708             ADDS     R7,R7,#+8
   \   00000034   0xE00B             B.N      ??LPLD_LCD_ShowString_2
    912              } 
    913              else if ( Ypos <= MAX_Y - 16 )
   \                     ??LPLD_LCD_ShowString_1: (+1)
   \   00000036   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003A   0xF1B8 0x0FE1      CMP      R8,#+225
   \   0000003E   0xDA03             BGE.N    ??LPLD_LCD_ShowString_3
    914              {
    915                Xpos = 0;
   \   00000040   0x2700             MOVS     R7,#+0
    916                Ypos += 16;
   \   00000042   0xF118 0x0810      ADDS     R8,R8,#+16
   \   00000046   0xE002             B.N      ??LPLD_LCD_ShowString_2
    917              }   
    918              else
    919              {
    920                Xpos = 0;
   \                     ??LPLD_LCD_ShowString_3: (+1)
   \   00000048   0x2700             MOVS     R7,#+0
    921                Ypos = 0;
   \   0000004A   0xF05F 0x0800      MOVS     R8,#+0
    922              } 
    923              CurX = CurX + 8;  
   \                     ??LPLD_LCD_ShowString_2: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable22_8
   \   00000050   0x8800             LDRH     R0,[R0, #+0]
   \   00000052   0x3008             ADDS     R0,R0,#+8
   \   00000054   0x....             LDR.N    R1,??DataTable22_8
   \   00000056   0x8008             STRH     R0,[R1, #+0]
    924            }
    925            while ( *str != 0 );
   \   00000058   0x7830             LDRB     R0,[R6, #+0]
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD1D8             BNE.N    ??LPLD_LCD_ShowString_0
    926          }
   \   0000005E   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    927          
    928          //不开窗

   \                                 In section .text, align 2, keep-with-next
    929          void LPLD_LCD_ShowStringno(uint16 Xpos, uint16 Ypos, uint8 *str,uint16 strColor )
    930          {
   \                     LPLD_LCD_ShowStringno: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001C             MOVS     R4,R3
    931            uint8 TempChar;
    932            do
    933            {
    934              TempChar = *str++;  
   \                     ??LPLD_LCD_ShowStringno_0: (+1)
   \   0000000A   0x782A             LDRB     R2,[R5, #+0]
   \   0000000C   0x1C6D             ADDS     R5,R5,#+1
    935              LPLD_LCD_ShowCharno( Xpos, Ypos, TempChar, strColor );    
   \   0000000E   0x0023             MOVS     R3,R4
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x0039             MOVS     R1,R7
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001C   0x.... 0x....      BL       LPLD_LCD_ShowCharno
    936              if( Xpos <= MAX_X - 8 )
   \   00000020   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000022   0xF5B6 0x7F9C      CMP      R6,#+312
   \   00000026   0xDC01             BGT.N    ??LPLD_LCD_ShowStringno_1
    937              {
    938                Xpos += 8;
   \   00000028   0x3608             ADDS     R6,R6,#+8
   \   0000002A   0xE007             B.N      ??LPLD_LCD_ShowStringno_2
    939              } 
    940              else if ( Ypos <= MAX_Y - 16 )
   \                     ??LPLD_LCD_ShowStringno_1: (+1)
   \   0000002C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002E   0x2FE1             CMP      R7,#+225
   \   00000030   0xDA02             BGE.N    ??LPLD_LCD_ShowStringno_3
    941              {
    942                Xpos = 0;
   \   00000032   0x2600             MOVS     R6,#+0
    943                Ypos += 16;
   \   00000034   0x3710             ADDS     R7,R7,#+16
   \   00000036   0xE001             B.N      ??LPLD_LCD_ShowStringno_2
    944              }   
    945              else
    946              {
    947                Xpos = 0;
   \                     ??LPLD_LCD_ShowStringno_3: (+1)
   \   00000038   0x2600             MOVS     R6,#+0
    948                Ypos = 0;
   \   0000003A   0x2700             MOVS     R7,#+0
    949              } 
    950              CurX = CurX + 8;  
   \                     ??LPLD_LCD_ShowStringno_2: (+1)
   \   0000003C   0x....             LDR.N    R0,??DataTable22_8
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0x3008             ADDS     R0,R0,#+8
   \   00000042   0x....             LDR.N    R1,??DataTable22_8
   \   00000044   0x8008             STRH     R0,[R1, #+0]
    951            }
    952            while ( *str != 0 );
   \   00000046   0x7828             LDRB     R0,[R5, #+0]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD1DE             BNE.N    ??LPLD_LCD_ShowStringno_0
    953          }
   \   0000004C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    954          
    955          
    956          
    957          
    958          
    959          
    960          /*
    961           * LPLD_LCD_PrintStringLine
    962           * 另起一行显示字符串
    963           * 
    964           * 参数： 
    965           *    *str--字符串
    966           *    strColor--字符串字体颜色
    967           *    bkColor--字符背景颜色
    968           *
    969           * 输出:
    970           *    无
    971           */

   \                                 In section .text, align 2, keep-with-next
    972          void LPLD_LCD_PrintStringLine(uint8 *str,uint16 strColor, uint16 bkColor)
    973          {
   \                     LPLD_LCD_PrintStringLine: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    974            CurX = 0;
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x....             LDR.N    R4,??DataTable22_8
   \   00000008   0x8023             STRH     R3,[R4, #+0]
    975            LPLD_LCD_ShowString(0, CurY*18, str, strColor, bkColor);
   \   0000000A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000C   0x9200             STR      R2,[SP, #+0]
   \   0000000E   0x000B             MOVS     R3,R1
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0x0002             MOVS     R2,R0
   \   00000014   0x....             LDR.N    R0,??DataTable22_9
   \   00000016   0x8800             LDRH     R0,[R0, #+0]
   \   00000018   0x2112             MOVS     R1,#+18
   \   0000001A   0xFB10 0xF101      SMULBB   R1,R0,R1
   \   0000001E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       LPLD_LCD_ShowString
    976            CurY++;
   \   00000026   0x....             LDR.N    R0,??DataTable22_9
   \   00000028   0x8800             LDRH     R0,[R0, #+0]
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x....             LDR.N    R1,??DataTable22_9
   \   0000002E   0x8008             STRH     R0,[R1, #+0]
    977            if((CurY+1)*18>MAX_Y)
   \   00000030   0x....             LDR.N    R0,??DataTable22_9
   \   00000032   0x8800             LDRH     R0,[R0, #+0]
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0x2112             MOVS     R1,#+18
   \   00000038   0x4348             MULS     R0,R1,R0
   \   0000003A   0x28F1             CMP      R0,#+241
   \   0000003C   0xDB02             BLT.N    ??LPLD_LCD_PrintStringLine_0
    978            {
    979              CurY=0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable22_9
   \   00000042   0x8008             STRH     R0,[R1, #+0]
    980            }
    981          }
   \                     ??LPLD_LCD_PrintStringLine_0: (+1)
   \   00000044   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    982          
    983          /*
    984           * LPLD_LCD_PrintString
    985           * 接着当前行显示字符串
    986           * 
    987           * 参数： 
    988           *    *str--字符串
    989           *    strColor--字符串字体颜色
    990           *    bkColor--字符背景颜色
    991           *
    992           * 输出:
    993           *    无
    994           */

   \                                 In section .text, align 2, keep-with-next
    995          void LPLD_LCD_PrintString(uint8 *str,uint16 Color, uint16 bkColor)
    996          {
   \                     LPLD_LCD_PrintString: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    997            LPLD_LCD_ShowString(CurX, (CurY-1)*18, str, Color, bkColor);
   \   00000002   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000004   0x9200             STR      R2,[SP, #+0]
   \   00000006   0x000B             MOVS     R3,R1
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0x0002             MOVS     R2,R0
   \   0000000C   0x....             LDR.N    R0,??DataTable22_9
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0x1E40             SUBS     R0,R0,#+1
   \   00000012   0x2112             MOVS     R1,#+18
   \   00000014   0xFB10 0xF101      SMULBB   R1,R0,R1
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x....             LDR.N    R0,??DataTable22_8
   \   0000001C   0x8800             LDRH     R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       LPLD_LCD_ShowString
    998          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
    999          
   1000          /*
   1001           * LPLD_LCD_PrintNumLine
   1002           * 另起一行显示数字
   1003           * 
   1004           * 参数： 
   1005           *    num--数字
   1006           *    len--数字长度
   1007           *    numColor--字符字体颜色
   1008           *    bkColor--字符背景颜色
   1009           *
   1010           * 输出:
   1011           *    无
   1012           */

   \                                 In section .text, align 2, keep-with-next
   1013          void LPLD_LCD_PrintNumLine(uint16 num,uint8 len,uint16 numColor, uint16 bkColor)
   1014          {
   \                     LPLD_LCD_PrintNumLine: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1015            CurX = 0;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x....             LDR.N    R5,??DataTable22_8
   \   00000008   0x802C             STRH     R4,[R5, #+0]
   1016            LPLD_LCD_ShowNum(0, CurY*18, num, len, numColor, bkColor);
   \   0000000A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000C   0x9301             STR      R3,[SP, #+4]
   \   0000000E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000010   0x9200             STR      R2,[SP, #+0]
   \   00000012   0x000B             MOVS     R3,R1
   \   00000014   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000016   0x0002             MOVS     R2,R0
   \   00000018   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001A   0x....             LDR.N    R0,??DataTable22_9
   \   0000001C   0x8800             LDRH     R0,[R0, #+0]
   \   0000001E   0x2112             MOVS     R1,#+18
   \   00000020   0xFB10 0xF101      SMULBB   R1,R0,R1
   \   00000024   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       LPLD_LCD_ShowNum
   1017            CurY++;
   \   0000002C   0x....             LDR.N    R0,??DataTable22_9
   \   0000002E   0x8800             LDRH     R0,[R0, #+0]
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x....             LDR.N    R1,??DataTable22_9
   \   00000034   0x8008             STRH     R0,[R1, #+0]
   1018            if((CurY+1)*18>MAX_Y)
   \   00000036   0x....             LDR.N    R0,??DataTable22_9
   \   00000038   0x8800             LDRH     R0,[R0, #+0]
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
   \   0000003C   0x2112             MOVS     R1,#+18
   \   0000003E   0x4348             MULS     R0,R1,R0
   \   00000040   0x28F1             CMP      R0,#+241
   \   00000042   0xDB02             BLT.N    ??LPLD_LCD_PrintNumLine_0
   1019            {
   1020              CurY=0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable22_9
   \   00000048   0x8008             STRH     R0,[R1, #+0]
   1021            }
   1022          }
   \                     ??LPLD_LCD_PrintNumLine_0: (+1)
   \   0000004A   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
   1023          
   1024          /*
   1025           * LPLD_LCD_PrintNum
   1026           * 接着当前行显示数字
   1027           * 
   1028           * 参数： 
   1029           *    num--数字
   1030           *    len--数字长度
   1031           *    numColor--字符字体颜色
   1032           *    bkColor--字符背景颜色
   1033           *
   1034           * 输出:
   1035           *    无
   1036           */

   \                                 In section .text, align 2, keep-with-next
   1037          void LPLD_LCD_PrintNum(uint16 num,uint8 len,uint16 Color, uint16 bkColor)
   1038          {
   \                     LPLD_LCD_PrintNum: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1039            LPLD_LCD_ShowNum(CurX, (CurY-1)*18, num,len, Color, bkColor);
   \   00000004   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000006   0x9301             STR      R3,[SP, #+4]
   \   00000008   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000A   0x9200             STR      R2,[SP, #+0]
   \   0000000C   0x000B             MOVS     R3,R1
   \   0000000E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000010   0x0002             MOVS     R2,R0
   \   00000012   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000014   0x....             LDR.N    R0,??DataTable22_9
   \   00000016   0x8800             LDRH     R0,[R0, #+0]
   \   00000018   0x1E40             SUBS     R0,R0,#+1
   \   0000001A   0x2112             MOVS     R1,#+18
   \   0000001C   0xFB10 0xF101      SMULBB   R1,R0,R1
   \   00000020   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000022   0x....             LDR.N    R0,??DataTable22_8
   \   00000024   0x8800             LDRH     R0,[R0, #+0]
   \   00000026   0x.... 0x....      BL       LPLD_LCD_ShowNum
   1040          }
   \   0000002A   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x4004A02C         DC32     0x4004a02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x60040000         DC32     0x60040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x........         DC32     LPLD_LCD_INFO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_4:
   \   00000000   0x43FE1030         DC32     0x43fe1030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_5:
   \   00000000   0x........         DC32     LCD_GRAM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_6:
   \   00000000   0x........         DC32     asc2_1608

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_7:
   \   00000000   0x........         DC32     gImage_suqian

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_8:
   \   00000000   0x........         DC32     CurX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_9:
   \   00000000   0x........         DC32     CurY
   1041          
   1042          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LPLD_LCD_BGR2RGB
       0   LPLD_LCD_Delayms
      40   LPLD_LCD_DrawLine
        40   -> LPLD_LCD_SetPoint
      40   LPLD_LCD_DrawRectangle
        40   -> LPLD_LCD_DrawLine
        40   -> LPLD_LCD_SetPoint
      32   LPLD_LCD_DrawSquare
        32   -> LPLD_LCD_DrawLine
        32   -> LPLD_LCD_SetPoint
      24   LPLD_LCD_DrawU8Gray
        24   -> LPLD_LCD_SetCursor
        24   -> LPLD_LCD_U8GRAY2RGB
        24   -> LPLD_LCD_WriteData
        24   -> LPLD_LCD_WriteIndex
      48   LPLD_LCD_FLEXBUS_Init
        32   -> LPLD_FlexBus_Init
        48   -> __aeabi_memcpy4
      16   LPLD_LCD_FillBackground
        16   -> LPLD_LCD_SetCursor
        16   -> LPLD_LCD_WriteData
        16   -> LPLD_LCD_WriteIndex
      16   LPLD_LCD_FillBackgroundGRAM
        16   -> LPLD_LCD_SetCursor
        16   -> LPLD_LCD_WriteData
        16   -> LPLD_LCD_WriteIndex
      12   LPLD_LCD_GRAMDrawHLine
      16   LPLD_LCD_GRAMFillRec
       8   LPLD_LCD_GetPoint
         8   -> LPLD_LCD_ReadData
         8   -> LPLD_LCD_SetCursor
         8   -> LPLD_LCD_WriteIndex
      48   LPLD_LCD_IO_Cfg
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       8   LPLD_LCD_Init
         8   -> LPLD_LCD_Delayms
         8   -> LPLD_LCD_FLEXBUS_Init
         8   -> LPLD_LCD_IO_Cfg
         8   -> LPLD_LCD_Reset
         8   -> LPLD_LCD_WriteReg
      16   LPLD_LCD_PrintNum
        16   -> LPLD_LCD_ShowNum
      24   LPLD_LCD_PrintNumLine
        24   -> LPLD_LCD_ShowNum
       8   LPLD_LCD_PrintString
         8   -> LPLD_LCD_ShowString
      16   LPLD_LCD_PrintStringLine
        16   -> LPLD_LCD_ShowString
       0   LPLD_LCD_ReadData
       8   LPLD_LCD_Reset
         8   -> LPLD_LCD_Delayms
       8   LPLD_LCD_SetCursor
         8   -> LPLD_LCD_WriteReg
       8   LPLD_LCD_SetPoint
         8   -> LPLD_LCD_SetCursor
         8   -> LPLD_LCD_WriteReg
      48   LPLD_LCD_ShowChar
        48   -> LPLD_LCD_SetPoint
      40   LPLD_LCD_ShowCharno
        40   -> LPLD_LCD_SetPoint
      40   LPLD_LCD_ShowNum
        40   -> LPLD_LCD_ShowChar
        40   -> mypow
      32   LPLD_LCD_ShowString
        32   -> LPLD_LCD_ShowChar
      24   LPLD_LCD_ShowStringno
        24   -> LPLD_LCD_ShowCharno
       0   LPLD_LCD_U8GRAY2RGB
       0   LPLD_LCD_WriteData
       0   LPLD_LCD_WriteIndex
       8   LPLD_LCD_WriteReg
         8   -> LPLD_LCD_WriteData
         8   -> LPLD_LCD_WriteIndex
       0   mypow


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable22_3
       4  ??DataTable22_4
       4  ??DataTable22_5
       4  ??DataTable22_6
       4  ??DataTable22_7
       4  ??DataTable22_8
       4  ??DataTable22_9
       2  CurX
       2  CurY
       4  LCD_GRAM
      24  LPLD_LCD_BGR2RGB
      28  LPLD_LCD_Delayms
     350  LPLD_LCD_DrawLine
     242  LPLD_LCD_DrawRectangle
     220  LPLD_LCD_DrawSquare
     102  LPLD_LCD_DrawU8Gray
      90  LPLD_LCD_FLEXBUS_Init
      48  LPLD_LCD_FillBackground
      48  LPLD_LCD_FillBackgroundGRAM
      50  LPLD_LCD_GRAMDrawHLine
      60  LPLD_LCD_GRAMFillRec
      38  LPLD_LCD_GetPoint
       8  LPLD_LCD_INFO
      54  LPLD_LCD_IO_Cfg
    1130  LPLD_LCD_Init
      44  LPLD_LCD_PrintNum
      76  LPLD_LCD_PrintNumLine
      36  LPLD_LCD_PrintString
      70  LPLD_LCD_PrintStringLine
      10  LPLD_LCD_ReadData
      26  LPLD_LCD_Reset
      40  LPLD_LCD_SetCursor
      44  LPLD_LCD_SetPoint
     150  LPLD_LCD_ShowChar
     190  LPLD_LCD_ShowCharno
     122  LPLD_LCD_ShowNum
      98  LPLD_LCD_ShowString
      78  LPLD_LCD_ShowStringno
      30  LPLD_LCD_U8GRAY2RGB
       8  LPLD_LCD_WriteData
       8  LPLD_LCD_WriteIndex
      20  LPLD_LCD_WriteReg
       2  PreX
       2  PreY
    1520  asc2_1608
      22  mypow

 
    20 bytes in section .bss
 1 520 bytes in section .rodata
 3 596 bytes in section .text
 
 3 596 bytes of CODE  memory
 1 520 bytes of CONST memory
    20 bytes of DATA  memory

Errors: none
Warnings: 5
