###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        26/Dec/2014  19:02:43
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\app\LPLD_OV7670.c
#    Command line =  
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\app\LPLD_OV7670.c -D
#        LPLD_K60 -lCN
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\RAM\List\ -lB
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\RAM\List\ -o
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\RAM\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\app\ -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\CPU\ -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\common\
#        -I D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\
#        -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\HW\
#        -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\uCOS-II\Source\
#        -I D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\FatFs\
#        -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\FatFs\option\
#        -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\USB\common\
#        -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\USB\driver\
#        -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\USB\descriptor\
#        -I
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\RAM\List\LPLD_OV7670.lst
#    Object file  =  
#        D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\iar\RAM\Obj\LPLD_OV7670.o
#
###############################################################################

D:\LPLD_OSKinetis_V3www\project\LPLD_OV7670\app\LPLD_OV7670.c
      1          /**
      2          * --------------基于"拉普兰德K60底层库V3"的工程（LPLD_OV7670）-----------------
      3          * @file LPLD_OV7670.c
      4          * @version 0.1
      5          * @date 2013-9-29
      6          * @brief 利用DMA模块，实现数字摄像头OV7670的图像读取。
      7          *
      8          * 版权所有:北京拉普兰德电子技术有限公司
      9          * http://www.lpld.cn
     10          * mail:support@lpld.cn
     11          * 硬件平台:  LPLD K60 Card / LPLD K60 Nano
     12          *
     13          * 本工程基于"拉普兰德K60底层库V3"开发，
     14          * 所有开源代码均在"lib"文件夹下，用户不必更改该目录下代码，
     15          * 所有用户工程需保存在"project"文件夹下，以工程名定义文件夹名，
     16          * 底层库使用方法见相关文档。 
     17          *
     18          */
     19          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000A   0x0940             LSRS     R0,R0,#+5
   \   0000000C   0x....             LDR.N    R2,??DataTable8  ;; 0xe000e100
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000A   0x0940             LSRS     R0,R0,#+5
   \   0000000C   0x....             LDR.N    R2,??DataTable8_1  ;; 0xe000e180
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return
     20          #include "DEV_SCCB.h"
     21          #include "DEV_LCD.h"
     22          
     23          /****************************************
     24          说明：
     25          *将MiniUSB线插入RUSH Kinetis开发板的USB
     26          插座，并连接至电脑USB接口。
     27          *将OV7670上位机波特率设置为115200
     28          *使用上位机查看运行结果
     29          ****************************************/
     30          
     31          //图像宽度
     32          #define H 250
     33          //图像高度
     34          #define V 200
     35          #define PHOTO_SIZE H*V
     36          
     37          void porta_isr(void);
     38          void portb_isr(void);
     39          void gpio_init(void);
     40          void dma_init(void);
     41          
     42          uint8 ov7670_init();
     43          void delay(void);
     44          

   \                                 In section .bss, align 4
     45          GPIO_InitTypeDef pta_init;
   \                     pta_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     46          GPIO_InitTypeDef ptb_init;
   \                     ptb_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     47          GPIO_InitTypeDef pte_init;
   \                     pte_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     48          GPIO_InitTypeDef ptd_init;
   \                     ptd_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     49          DMA_InitTypeDef dma_init_struct;
   \                     dma_init_struct:
   \   00000000                      DS8 44
     50          

   \                                 In section .bss, align 4
     51          uint8 Pix_Data[PHOTO_SIZE];       //采集50行 200列的图像数据  
   \                     Pix_Data:
   \   00000000                      DS8 50000

   \                                 In section .bss, align 4
     52          uint32 V_Cnt;                     //行采集计数
   \                     V_Cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     53          uint8 Is_DispPhoto;               //图像发送标志
   \                     Is_DispPhoto:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     54          uint16 coloer;
   \                     coloer:
   \   00000000                      DS8 2
     55          
     56          #define ov7670_wrst  PTA25_O         //输出   写指针复位
     57          #define ov7670_wr    PTA19_O         //输出   写使能
     58          #define ov7670_rrst  PTA26_O         //输出    读指针复位
     59          #define ov7670_rck   PTA17_O         //输出   读时钟  a16
     60          #define ov7670_oe    PTA24_O         //输出   读时钟  a24
     61          #define test         PTD8_O         //输出   读时钟
     62          
     63          uint16 read_fifo(void);
     64          void ov7670_show(void);
     65          void set_ov7670reg(void);
     66          
     67          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     68          void main (void)
     69          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     70            
     71            //关闭全局中断
     72            DisableInterrupts;
   \   00000002   0xB672             CPSID    I
     73            LPLD_LCD_Init(); 
   \   00000004   0x.... 0x....      BL       LPLD_LCD_Init
     74            ov7670_init();
   \   00000008   0x.... 0x....      BL       ov7670_init
     75            delay();
   \   0000000C   0x.... 0x....      BL       delay
     76            
     77            V_Cnt=0;          //行计数
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable8_2
   \   00000014   0x6008             STR      R0,[R1, #+0]
     78            Is_DispPhoto=1;   //显示图像
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable8_3
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
     79            
     80            gpio_init();
   \   0000001C   0x.... 0x....      BL       gpio_init
     81            dma_init();
   \   00000020   0x.... 0x....      BL       dma_init
     82            
     83            //使能PORTA、PORTB中断
     84            //enable_irq(PORTB_IRQn);
     85            enable_irq(PORTA_IRQn);
   \   00000024   0x2057             MOVS     R0,#+87
   \   00000026   0x.... 0x....      BL       NVIC_EnableIRQ
     86            //使能全局中断
     87            EnableInterrupts;
   \   0000002A   0xB662             CPSIE    I
     88            
     89            
     90            while(1)
     91            {
     92              
     93              if(Is_DispPhoto==3)
   \                     ??main_0: (+1)
   \   0000002C   0x....             LDR.N    R0,??DataTable8_3
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2803             CMP      R0,#+3
   \   00000032   0xD1FB             BNE.N    ??main_0
     94              {   
     95                
     96                //  Is_DispPhoto = 0;
     97                //显示或发送图像数据
     98                //可根据上位机软件自行修改此处
     99                ov7670_rrst=0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable8_4  ;; 0x43fe0068
   \   00000038   0x6008             STR      R0,[R1, #+0]
    100                ov7670_rck = 0;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x....             LDR.N    R1,??DataTable8_5  ;; 0x43fe0044
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    101                ov7670_rck=1;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x....             LDR.N    R1,??DataTable8_5  ;; 0x43fe0044
   \   00000044   0x6008             STR      R0,[R1, #+0]
    102                ov7670_rrst=1;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x....             LDR.N    R1,??DataTable8_4  ;; 0x43fe0068
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    103                ov7670_rck=0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x....             LDR.N    R1,??DataTable8_5  ;; 0x43fe0044
   \   00000050   0x6008             STR      R0,[R1, #+0]
    104                ov7670_rck=1;      
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x....             LDR.N    R1,??DataTable8_5  ;; 0x43fe0044
   \   00000056   0x6008             STR      R0,[R1, #+0]
    105                
    106                
    107                ov7670_show();
   \   00000058   0x.... 0x....      BL       ov7670_show
    108                //清PORTA中断标志
    109                LPLD_GPIO_ClearIntFlag(PORTA);
   \   0000005C   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000060   0x....             LDR.N    R1,??DataTable8_6  ;; 0x400490a0
   \   00000062   0x6008             STR      R0,[R1, #+0]
    110                
    111                //使能PORTA中断
    112                Is_DispPhoto = 1;
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x....             LDR.N    R1,??DataTable8_3
   \   00000068   0x7008             STRB     R0,[R1, #+0]
    113                enable_irq(PORTA_IRQn);
   \   0000006A   0x2057             MOVS     R0,#+87
   \   0000006C   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000070   0xE7DC             B.N      ??main_0
    114                
    115              } 
    116              
    117            } 
    118          }
    119          

   \                                 In section .text, align 2, keep-with-next
    120          void ov7670_show(void)
    121          {
   \                     ov7670_show: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    122            uint16 i,j;
    123            
    124            for(i=0;i<240;i++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE011             B.N      ??ov7670_show_0
    125              for(j=0;j<320;j++)
    126              {
    127                coloer = read_fifo();
   \                     ??ov7670_show_1: (+1)
   \   00000006   0x.... 0x....      BL       read_fifo
   \   0000000A   0x....             LDR.N    R1,??DataTable8_7
   \   0000000C   0x8008             STRH     R0,[R1, #+0]
    128                LPLD_LCD_SetPoint(j,i,coloer);
   \   0000000E   0x....             LDR.N    R0,??DataTable8_7
   \   00000010   0x8802             LDRH     R2,[R0, #+0]
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001A   0x.... 0x....      BL       LPLD_LCD_SetPoint
    129              }
   \   0000001E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ov7670_show_2: (+1)
   \   00000020   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000022   0xF5B5 0x7FA0      CMP      R5,#+320
   \   00000026   0xDBEE             BLT.N    ??ov7670_show_1
   \   00000028   0x1C64             ADDS     R4,R4,#+1
   \                     ??ov7670_show_0: (+1)
   \   0000002A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002C   0x2CF0             CMP      R4,#+240
   \   0000002E   0xDA01             BGE.N    ??ov7670_show_3
   \   00000030   0x2500             MOVS     R5,#+0
   \   00000032   0xE7F5             B.N      ??ov7670_show_2
    130            
    131            
    132          }
   \                     ??ov7670_show_3: (+1)
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    133          
    134          

   \                                 In section .text, align 2, keep-with-next
    135          uint16 read_fifo(void)
    136          {
   \                     read_fifo: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    137            uint16 c1 = 0,c2 = 0 ;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2500             MOVS     R5,#+0
    138            ov7670_rck=0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R1,??DataTable8_5  ;; 0x43fe0044
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    139            c1 = LPLD_GPIO_Input_8b(PTA,6);
   \   0000000C   0x2106             MOVS     R1,#+6
   \   0000000E   0x....             LDR.N    R0,??DataTable8_8  ;; 0x400ff000
   \   00000010   0x.... 0x....      BL       LPLD_GPIO_Input_8b
   \   00000014   0x0004             MOVS     R4,R0
    140            ov7670_rck = 1;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable8_5  ;; 0x43fe0044
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    141            ov7670_rck = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR.N    R1,??DataTable8_5  ;; 0x43fe0044
   \   00000020   0x6008             STR      R0,[R1, #+0]
    142            c2 = LPLD_GPIO_Input_8b(PTA,6);
   \   00000022   0x2106             MOVS     R1,#+6
   \   00000024   0x....             LDR.N    R0,??DataTable8_8  ;; 0x400ff000
   \   00000026   0x.... 0x....      BL       LPLD_GPIO_Input_8b
   \   0000002A   0x0005             MOVS     R5,R0
    143            c1<<=8;
   \   0000002C   0x0224             LSLS     R4,R4,#+8
    144            c2=c1|c2;
   \   0000002E   0x4325             ORRS     R5,R4,R5
    145            return c2;  
   \   00000030   0x0028             MOVS     R0,R5
   \   00000032   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000034   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    146          }
    147          
    148          
    149          

   \                                 In section .text, align 2, keep-with-next
    150          void gpio_init()
    151          {
   \                     gpio_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    152            //OV数据口初始化：PTD8~PTD15
    153            pta_init.GPIO_PTx = PTA;
   \   00000002   0x....             LDR.N    R0,??DataTable8_8  ;; 0x400ff000
   \   00000004   0x....             LDR.N    R1,??DataTable8_9
   \   00000006   0x6008             STR      R0,[R1, #+0]
    154            pta_init.GPIO_Dir = DIR_INPUT;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable8_9
   \   0000000C   0x7308             STRB     R0,[R1, #+12]
    155            pta_init.GPIO_Pins = GPIO_Pin6_13;
   \   0000000E   0xF44F 0x507F      MOV      R0,#+16320
   \   00000012   0x....             LDR.N    R1,??DataTable8_9
   \   00000014   0x6048             STR      R0,[R1, #+4]
    156            pta_init.GPIO_PinControl = IRQC_DIS | INPUT_PULL_DIS;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable8_9
   \   0000001A   0x6088             STR      R0,[R1, #+8]
    157            LPLD_GPIO_Init(pta_init);
   \   0000001C   0x....             LDR.N    R1,??DataTable8_9
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_GPIO_Init
    158            
    159            //  //OV行信号接口初始化：PTB3-H
    160            //  ptb_init.GPIO_PTx = PTB;
    161            //  ptb_init.GPIO_Dir = DIR_INPUT;
    162            //  ptb_init.GPIO_Pins = GPIO_Pin3;
    163            //  ptb_init.GPIO_PinControl = IRQC_RI|INPUT_PULL_DOWN;
    164            //  ptb_init.GPIO_Isr = portb_isr;
    165            //  LPLD_GPIO_Init(ptb_init); 
    166            
    167            //OV场信号接口初始化：PTA5-V
    168            pta_init.GPIO_PTx = PTA;
   \   0000002E   0x....             LDR.N    R0,??DataTable8_8  ;; 0x400ff000
   \   00000030   0x....             LDR.N    R1,??DataTable8_9
   \   00000032   0x6008             STR      R0,[R1, #+0]
    169            pta_init.GPIO_Dir = DIR_INPUT;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable8_9
   \   00000038   0x7308             STRB     R0,[R1, #+12]
    170            pta_init.GPIO_Pins = GPIO_Pin5;
   \   0000003A   0x2020             MOVS     R0,#+32
   \   0000003C   0x....             LDR.N    R1,??DataTable8_9
   \   0000003E   0x6048             STR      R0,[R1, #+4]
    171            pta_init.GPIO_PinControl = IRQC_RI|INPUT_PULL_DOWN;
   \   00000040   0x....             LDR.N    R0,??DataTable8_10  ;; 0x90002
   \   00000042   0x....             LDR.N    R1,??DataTable8_9
   \   00000044   0x6088             STR      R0,[R1, #+8]
    172            pta_init.GPIO_Isr = porta_isr;
   \   00000046   0x.... 0x....      ADR.W    R0,porta_isr
   \   0000004A   0x....             LDR.N    R1,??DataTable8_9
   \   0000004C   0x6108             STR      R0,[R1, #+16]
    173            LPLD_GPIO_Init(pta_init); 
   \   0000004E   0x....             LDR.N    R1,??DataTable8_9
   \   00000050   0xB084             SUB      SP,SP,#+16
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x2214             MOVS     R2,#+20
   \   00000056   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000005A   0xBC0F             POP      {R0-R3}
   \   0000005C   0x.... 0x....      BL       LPLD_GPIO_Init
    174            
    175            //ov7670_wr   :PTA19
    176            pta_init.GPIO_PTx = PTA;
   \   00000060   0x....             LDR.N    R0,??DataTable8_8  ;; 0x400ff000
   \   00000062   0x....             LDR.N    R1,??DataTable8_9
   \   00000064   0x6008             STR      R0,[R1, #+0]
    177            pta_init.GPIO_Pins = GPIO_Pin14 |GPIO_Pin19 | GPIO_Pin26 | GPIO_Pin17  | GPIO_Pin25;
   \   00000066   0x....             LDR.N    R0,??DataTable8_11  ;; 0x60a4000
   \   00000068   0x....             LDR.N    R1,??DataTable8_9
   \   0000006A   0x6048             STR      R0,[R1, #+4]
    178            pta_init.GPIO_Dir = OUTPUT_H;
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x....             LDR.N    R1,??DataTable8_9
   \   00000070   0x7308             STRB     R0,[R1, #+12]
    179            pta_init.GPIO_PinControl = IRQC_DIS;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x....             LDR.N    R1,??DataTable8_9
   \   00000076   0x6088             STR      R0,[R1, #+8]
    180            LPLD_GPIO_Init(pta_init);
   \   00000078   0x....             LDR.N    R1,??DataTable8_9
   \   0000007A   0xB084             SUB      SP,SP,#+16
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0x2214             MOVS     R2,#+20
   \   00000080   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000084   0xBC0F             POP      {R0-R3}
   \   00000086   0x.... 0x....      BL       LPLD_GPIO_Init
    181            
    182            
    183            pta_init.GPIO_PTx = PTA;
   \   0000008A   0x....             LDR.N    R0,??DataTable8_8  ;; 0x400ff000
   \   0000008C   0x....             LDR.N    R1,??DataTable8_9
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    184            pta_init.GPIO_Pins = GPIO_Pin24;
   \   00000090   0xF05F 0x7080      MOVS     R0,#+16777216
   \   00000094   0x....             LDR.N    R1,??DataTable8_9
   \   00000096   0x6048             STR      R0,[R1, #+4]
    185            pta_init.GPIO_Dir = OUTPUT_L;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x....             LDR.N    R1,??DataTable8_9
   \   0000009C   0x7308             STRB     R0,[R1, #+12]
    186            pta_init.GPIO_PinControl = IRQC_DIS;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x....             LDR.N    R1,??DataTable8_9
   \   000000A2   0x6088             STR      R0,[R1, #+8]
    187            LPLD_GPIO_Init(pta_init);
   \   000000A4   0x....             LDR.N    R1,??DataTable8_9
   \   000000A6   0xB084             SUB      SP,SP,#+16
   \   000000A8   0x4668             MOV      R0,SP
   \   000000AA   0x2214             MOVS     R2,#+20
   \   000000AC   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000B0   0xBC0F             POP      {R0-R3}
   \   000000B2   0x.... 0x....      BL       LPLD_GPIO_Init
    188            
    189            //OV PCLK信号接口初始化：PTE6-PCLK
    190            //  pte_init.GPIO_PTx = PTE;
    191            //  pte_init.GPIO_Pins = GPIO_Pin6;
    192            //  pte_init.GPIO_Dir = DIR_INPUT;
    193            //  pte_init.GPIO_PinControl = IRQC_DMARI | INPUT_PULL_DIS;
    194            //  LPLD_GPIO_Init(pte_init); 
    195            
    196          }
   \   000000B6   0xBD01             POP      {R0,PC}          ;; return
    197          

   \                                 In section .text, align 2, keep-with-next
    198          void dma_init()
    199          {
   \                     dma_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    200            //DMA参数配置
    201            dma_init_struct.DMA_CHx = DMA_CH0;    //CH0通道
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable8_12
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    202            dma_init_struct.DMA_Req = PORTE_DMAREQ;       //PORTE为请求源
   \   0000000A   0x2035             MOVS     R0,#+53
   \   0000000C   0x....             LDR.N    R1,??DataTable8_12
   \   0000000E   0x7048             STRB     R0,[R1, #+1]
    203            dma_init_struct.DMA_MajorLoopCnt = H; //主循环计数值：行采集点数，宽度
   \   00000010   0x20FA             MOVS     R0,#+250
   \   00000012   0x....             LDR.N    R1,??DataTable8_12
   \   00000014   0x8088             STRH     R0,[R1, #+4]
    204            dma_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次读入1字节
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable8_12
   \   0000001A   0x6088             STR      R0,[R1, #+8]
    205            dma_init_struct.DMA_SourceAddr = (uint32)&PTD->PDIR+1;        //源地址：PTD8~15
   \   0000001C   0x....             LDR.N    R0,??DataTable8_13  ;; 0x400ff0d1
   \   0000001E   0x....             LDR.N    R1,??DataTable8_12
   \   00000020   0x60C8             STR      R0,[R1, #+12]
    206            dma_init_struct.DMA_DestAddr = (uint32)Pix_Data;      //目的地址：存放图像的数组
   \   00000022   0x....             LDR.N    R0,??DataTable8_14
   \   00000024   0x....             LDR.N    R1,??DataTable8_12
   \   00000026   0x6188             STR      R0,[R1, #+24]
    207            dma_init_struct.DMA_DestAddrOffset = 1;       //目的地址偏移：每次读入增加1
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x....             LDR.N    R1,??DataTable8_12
   \   0000002C   0x83C8             STRH     R0,[R1, #+30]
    208            dma_init_struct.DMA_AutoDisableReq = TRUE;    //自动禁用请求
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x....             LDR.N    R1,??DataTable8_12
   \   00000032   0xF881 0x0024      STRB     R0,[R1, #+36]
    209            //初始化DMA
    210            LPLD_DMA_Init(dma_init_struct);
   \   00000036   0x....             LDR.N    R1,??DataTable8_12
   \   00000038   0xB084             SUB      SP,SP,#+16
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x222C             MOVS     R2,#+44
   \   0000003E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000042   0xBC0F             POP      {R0-R3}
   \   00000044   0x.... 0x....      BL       LPLD_DMA_Init
    211          }
   \   00000048   0xB007             ADD      SP,SP,#+28
   \   0000004A   0xBD00             POP      {PC}             ;; return
    212          
    213          

   \                                 In section .text, align 4, keep-with-next
    214          void porta_isr()
    215          {
    216            if(Is_DispPhoto==1 && LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin5))
   \                     porta_isr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8_3
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xD113             BNE.N    ??porta_isr_0
   \   00000008   0x....             LDR.N    R0,??DataTable8_6  ;; 0x400490a0
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x0680             LSLS     R0,R0,#+26
   \   0000000E   0xD50F             BPL.N    ??porta_isr_0
    217            {
    218              //    //检测到场开始信号，加载目的地址
    219              //    LPLD_DMA_LoadDstAddr(DMA_CH0, Pix_Data);
    220              //    //清行中断标志，防止进入无效行中断
    221              //    LPLD_GPIO_ClearIntFlag(PORTB);
    222              //    enable_irq(PORTB_IRQn);
    223              
    224              ov7670_wrst=0;  //写指针复位
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable8_15  ;; 0x43fe0064
   \   00000014   0x6008             STR      R0,[R1, #+0]
    225              ov7670_wr=1;   //写使能
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable8_16  ;; 0x43fe004c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    226              Is_DispPhoto =2;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x....             LDR.N    R1,??DataTable8_3
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    227              ov7670_wr=1;   //写使能
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x....             LDR.N    R1,??DataTable8_16  ;; 0x43fe004c
   \   00000026   0x6008             STR      R0,[R1, #+0]
    228              ov7670_wrst=1;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x....             LDR.N    R1,??DataTable8_15  ;; 0x43fe0064
   \   0000002C   0x6008             STR      R0,[R1, #+0]
   \   0000002E   0xE00D             B.N      ??porta_isr_1
    229              
    230            }
    231            else if(Is_DispPhoto == 2 && LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin5))
   \                     ??porta_isr_0: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable8_3
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x2802             CMP      R0,#+2
   \   00000036   0xD109             BNE.N    ??porta_isr_1
   \   00000038   0x....             LDR.N    R0,??DataTable8_6  ;; 0x400490a0
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x0680             LSLS     R0,R0,#+26
   \   0000003E   0xD505             BPL.N    ??porta_isr_1
    232            {
    233              ov7670_wr=0;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x....             LDR.N    R1,??DataTable8_16  ;; 0x43fe004c
   \   00000044   0x6008             STR      R0,[R1, #+0]
    234              Is_DispPhoto = 3;
   \   00000046   0x2003             MOVS     R0,#+3
   \   00000048   0x....             LDR.N    R1,??DataTable8_3
   \   0000004A   0x7008             STRB     R0,[R1, #+0]
    235              
    236            }
    237            else ;
    238            
    239          }
   \                     ??porta_isr_1: (+1)
   \   0000004C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    240          void portb_isr()
    241          {
   \                     portb_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    242            if(LPLD_GPIO_IsPinxExt(PORTB, GPIO_Pin3))
   \   00000002   0x....             LDR.N    R0,??DataTable8_17  ;; 0x4004a0a0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0700             LSLS     R0,R0,#+28
   \   00000008   0xD51B             BPL.N    ??portb_isr_0
    243            {
    244              //检测到行开始信号，使能DMA请求
    245              if(V_Cnt<V){
   \   0000000A   0x....             LDR.N    R0,??DataTable8_2
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x28C8             CMP      R0,#+200
   \   00000010   0xD20B             BCS.N    ??portb_isr_1
    246                LPLD_DMA_EnableReq(DMA_CH0);  
   \   00000012   0x....             LDR.N    R0,??DataTable8_18  ;; 0x4000800c
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000001A   0x....             LDR.N    R1,??DataTable8_18  ;; 0x4000800c
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    247                V_Cnt++; 
   \   0000001E   0x....             LDR.N    R0,??DataTable8_2
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x....             LDR.N    R1,??DataTable8_2
   \   00000026   0x6008             STR      R0,[R1, #+0]
   \   00000028   0xE00B             B.N      ??portb_isr_0
    248              }
    249              //行数采集已满，关闭中断
    250              else
    251              {
    252                //关GPIO中断 
    253                disable_irq(PORTA_IRQn);
   \                     ??portb_isr_1: (+1)
   \   0000002A   0x2057             MOVS     R0,#+87
   \   0000002C   0x.... 0x....      BL       NVIC_DisableIRQ
    254                disable_irq(PORTB_IRQn);
   \   00000030   0x2058             MOVS     R0,#+88
   \   00000032   0x.... 0x....      BL       NVIC_DisableIRQ
    255                Is_DispPhoto = 1;//可以显示图像
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x....             LDR.N    R1,??DataTable8_3
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
    256                V_Cnt=0;  
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x....             LDR.N    R1,??DataTable8_2
   \   00000040   0x6008             STR      R0,[R1, #+0]
    257              }
    258            }
    259          }
   \                     ??portb_isr_0: (+1)
   \   00000042   0xBD01             POP      {R0,PC}          ;; return
    260          
    261          

   \                                 In section .text, align 2, keep-with-next
    262          uint8 ov7670_init(void)
    263          {
   \                     ov7670_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    264            uint16 i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    265            uint8 device_id = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    266            
    267            LPLD_SCCB_Init();
   \   0000000C   0x.... 0x....      BL       LPLD_SCCB_Init
    268            
    269            delay();
   \   00000010   0x.... 0x....      BL       delay
    270            
    271            //复位OV7670寄存器
    272            while( 0 == LPLD_SCCB_WriteReg(0x12, 0x80 )) 
   \                     ??ov7670_init_0: (+1)
   \   00000014   0x2180             MOVS     R1,#+128
   \   00000016   0x2012             MOVS     R0,#+18
   \   00000018   0x.... 0x....      BL       LPLD_SCCB_WriteReg
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD106             BNE.N    ??ov7670_init_1
    273            {
    274              i++;
   \   00000020   0x1C64             ADDS     R4,R4,#+1
    275              if(i == 500)
   \   00000022   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000024   0xF5B4 0x7FFA      CMP      R4,#+500
   \   00000028   0xD1F4             BNE.N    ??ov7670_init_0
    276              {
    277                return 0 ;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE011             B.N      ??ov7670_init_2
    278              }    
    279            }
    280            delay();
   \                     ??ov7670_init_1: (+1)
   \   0000002E   0x.... 0x....      BL       delay
    281            
    282            //读取设备ID
    283            while( 0 == LPLD_SCCB_ReadReg(0x1C, &device_id, 1));	
   \                     ??ov7670_init_3: (+1)
   \   00000032   0x2201             MOVS     R2,#+1
   \   00000034   0xA900             ADD      R1,SP,#+0
   \   00000036   0x201C             MOVS     R0,#+28
   \   00000038   0x.... 0x....      BL       LPLD_SCCB_ReadReg
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD0F8             BEQ.N    ??ov7670_init_3
    284            
    285            //如果为OV7670
    286            if(device_id == 0x7F)
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0x287F             CMP      R0,#+127
   \   00000046   0xD103             BNE.N    ??ov7670_init_4
    287            {  
    288              set_ov7670reg();
   \   00000048   0x.... 0x....      BL       set_ov7670reg
    289              //while( 0 == LPLD_SCCB_WriteReg(0x1E, 0x21) );
    290              // while( 0 == LPLD_SCCB_WriteReg(0x3E, 0x19) );	
    291              //while( 0 == LPLD_SCCB_WriteReg(0x73, 0x09) );	
    292              //while( 0 == LPLD_SCCB_WriteReg(0x15, 0x20) );	
    293            }
    294            else
    295            {
    296              return 0;
    297            }
    298            
    299            return 1;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0xE000             B.N      ??ov7670_init_2
   \                     ??ov7670_init_4: (+1)
   \   00000050   0x2000             MOVS     R0,#+0
   \                     ??ov7670_init_2: (+1)
   \   00000052   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    300          }
    301          
    302          /*
    303          * 延时一段时间
    304          */

   \                                 In section .text, align 4, keep-with-next
    305          void delay()
    306          {
    307            uint16 i, n;
    308            for(i=0;i<30000;i++)
   \                     delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE005             B.N      ??delay_0
    309            {
    310              for(n=0;n<200;n++)
    311              {
    312                asm("nop");
   \                     ??delay_1: (+1)
   \   00000004   0xBF00             nop
    313              }
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??delay_2: (+1)
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x29C8             CMP      R1,#+200
   \   0000000C   0xDBFA             BLT.N    ??delay_1
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??delay_0: (+1)
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xF247 0x5130      MOVW     R1,#+30000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xDA01             BGE.N    ??delay_3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xE7F4             B.N      ??delay_2
    314            }
    315          }
   \                     ??delay_3: (+1)
   \   0000001E   0x4770             BX       LR               ;; return
    316          
    317          
    318          
    319          
    320          
    321          
    322          
    323          
    324          

   \                                 In section .text, align 2, keep-with-next
    325          void set_ov7670reg(void)
    326          {
   \                     set_ov7670reg: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    327            LPLD_SCCB_WriteReg(0x3a, 0x04);
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x203A             MOVS     R0,#+58
   \   00000006   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    328            LPLD_SCCB_WriteReg(0x40, 0xd0);
   \   0000000A   0x21D0             MOVS     R1,#+208
   \   0000000C   0x2040             MOVS     R0,#+64
   \   0000000E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    329            LPLD_SCCB_WriteReg(0x12, 0x14);
   \   00000012   0x2114             MOVS     R1,#+20
   \   00000014   0x2012             MOVS     R0,#+18
   \   00000016   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    330            LPLD_SCCB_WriteReg(0x32, 0x80);
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x2032             MOVS     R0,#+50
   \   0000001E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    331            LPLD_SCCB_WriteReg(0x17, 0x16);
   \   00000022   0x2116             MOVS     R1,#+22
   \   00000024   0x2017             MOVS     R0,#+23
   \   00000026   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    332            LPLD_SCCB_WriteReg(0x18, 0x04);
   \   0000002A   0x2104             MOVS     R1,#+4
   \   0000002C   0x2018             MOVS     R0,#+24
   \   0000002E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    333            LPLD_SCCB_WriteReg(0x19, 0x02);
   \   00000032   0x2102             MOVS     R1,#+2
   \   00000034   0x2019             MOVS     R0,#+25
   \   00000036   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    334            LPLD_SCCB_WriteReg(0x1a, 0x7b);
   \   0000003A   0x217B             MOVS     R1,#+123
   \   0000003C   0x201A             MOVS     R0,#+26
   \   0000003E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    335            LPLD_SCCB_WriteReg(0x03, 0x06);
   \   00000042   0x2106             MOVS     R1,#+6
   \   00000044   0x2003             MOVS     R0,#+3
   \   00000046   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    336            LPLD_SCCB_WriteReg(0x0c, 0x00);
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x200C             MOVS     R0,#+12
   \   0000004E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    337            LPLD_SCCB_WriteReg(0x3e, 0x00);
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x203E             MOVS     R0,#+62
   \   00000056   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    338            LPLD_SCCB_WriteReg(0x70, 0x3a);
   \   0000005A   0x213A             MOVS     R1,#+58
   \   0000005C   0x2070             MOVS     R0,#+112
   \   0000005E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    339            LPLD_SCCB_WriteReg(0x71, 0x35);
   \   00000062   0x2135             MOVS     R1,#+53
   \   00000064   0x2071             MOVS     R0,#+113
   \   00000066   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    340            LPLD_SCCB_WriteReg(0x72, 0x11);
   \   0000006A   0x2111             MOVS     R1,#+17
   \   0000006C   0x2072             MOVS     R0,#+114
   \   0000006E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    341            LPLD_SCCB_WriteReg(0x73, 0x00);
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x2073             MOVS     R0,#+115
   \   00000076   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    342            LPLD_SCCB_WriteReg(0xa2, 0x02);
   \   0000007A   0x2102             MOVS     R1,#+2
   \   0000007C   0x20A2             MOVS     R0,#+162
   \   0000007E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    343            LPLD_SCCB_WriteReg(0x11, 0x00);//+++++++++++++++++++++++
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x2011             MOVS     R0,#+17
   \   00000086   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    344            
    345            LPLD_SCCB_WriteReg(0x7a, 0x20);
   \   0000008A   0x2120             MOVS     R1,#+32
   \   0000008C   0x207A             MOVS     R0,#+122
   \   0000008E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    346            LPLD_SCCB_WriteReg(0x7b, 0x1c);
   \   00000092   0x211C             MOVS     R1,#+28
   \   00000094   0x207B             MOVS     R0,#+123
   \   00000096   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    347            LPLD_SCCB_WriteReg(0x7c, 0x28);
   \   0000009A   0x2128             MOVS     R1,#+40
   \   0000009C   0x207C             MOVS     R0,#+124
   \   0000009E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    348            LPLD_SCCB_WriteReg(0x7d, 0x3c);
   \   000000A2   0x213C             MOVS     R1,#+60
   \   000000A4   0x207D             MOVS     R0,#+125
   \   000000A6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    349            LPLD_SCCB_WriteReg(0x7e, 0x55);
   \   000000AA   0x2155             MOVS     R1,#+85
   \   000000AC   0x207E             MOVS     R0,#+126
   \   000000AE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    350            LPLD_SCCB_WriteReg(0x7f, 0x68);
   \   000000B2   0x2168             MOVS     R1,#+104
   \   000000B4   0x207F             MOVS     R0,#+127
   \   000000B6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    351            LPLD_SCCB_WriteReg(0x80, 0x76);
   \   000000BA   0x2176             MOVS     R1,#+118
   \   000000BC   0x2080             MOVS     R0,#+128
   \   000000BE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    352            LPLD_SCCB_WriteReg(0x81, 0x80);
   \   000000C2   0x2180             MOVS     R1,#+128
   \   000000C4   0x2081             MOVS     R0,#+129
   \   000000C6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    353            LPLD_SCCB_WriteReg(0x82, 0x88);
   \   000000CA   0x2188             MOVS     R1,#+136
   \   000000CC   0x2082             MOVS     R0,#+130
   \   000000CE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    354            LPLD_SCCB_WriteReg(0x83, 0x8f);
   \   000000D2   0x218F             MOVS     R1,#+143
   \   000000D4   0x2083             MOVS     R0,#+131
   \   000000D6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    355            LPLD_SCCB_WriteReg(0x84, 0x96);
   \   000000DA   0x2196             MOVS     R1,#+150
   \   000000DC   0x2084             MOVS     R0,#+132
   \   000000DE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    356            LPLD_SCCB_WriteReg(0x85, 0xa3);
   \   000000E2   0x21A3             MOVS     R1,#+163
   \   000000E4   0x2085             MOVS     R0,#+133
   \   000000E6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    357            LPLD_SCCB_WriteReg(0x86, 0xaf);
   \   000000EA   0x21AF             MOVS     R1,#+175
   \   000000EC   0x2086             MOVS     R0,#+134
   \   000000EE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    358            LPLD_SCCB_WriteReg(0x87, 0xc4);
   \   000000F2   0x21C4             MOVS     R1,#+196
   \   000000F4   0x2087             MOVS     R0,#+135
   \   000000F6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    359            LPLD_SCCB_WriteReg(0x88, 0xd7);
   \   000000FA   0x21D7             MOVS     R1,#+215
   \   000000FC   0x2088             MOVS     R0,#+136
   \   000000FE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    360            LPLD_SCCB_WriteReg(0x89, 0xe8);
   \   00000102   0x21E8             MOVS     R1,#+232
   \   00000104   0x2089             MOVS     R0,#+137
   \   00000106   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    361            
    362            LPLD_SCCB_WriteReg(0x13, 0xe0);
   \   0000010A   0x21E0             MOVS     R1,#+224
   \   0000010C   0x2013             MOVS     R0,#+19
   \   0000010E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    363            LPLD_SCCB_WriteReg(0x00, 0x00);
   \   00000112   0x2100             MOVS     R1,#+0
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    364            
    365            LPLD_SCCB_WriteReg(0x10, 0x00);
   \   0000011A   0x2100             MOVS     R1,#+0
   \   0000011C   0x2010             MOVS     R0,#+16
   \   0000011E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    366            LPLD_SCCB_WriteReg(0x0d, 0x00);
   \   00000122   0x2100             MOVS     R1,#+0
   \   00000124   0x200D             MOVS     R0,#+13
   \   00000126   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    367            LPLD_SCCB_WriteReg(0x14, 0x28);
   \   0000012A   0x2128             MOVS     R1,#+40
   \   0000012C   0x2014             MOVS     R0,#+20
   \   0000012E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    368            LPLD_SCCB_WriteReg(0xa5, 0x05);
   \   00000132   0x2105             MOVS     R1,#+5
   \   00000134   0x20A5             MOVS     R0,#+165
   \   00000136   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    369            LPLD_SCCB_WriteReg(0xab, 0x07);
   \   0000013A   0x2107             MOVS     R1,#+7
   \   0000013C   0x20AB             MOVS     R0,#+171
   \   0000013E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    370            LPLD_SCCB_WriteReg(0x24, 0x75);
   \   00000142   0x2175             MOVS     R1,#+117
   \   00000144   0x2024             MOVS     R0,#+36
   \   00000146   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    371            LPLD_SCCB_WriteReg(0x25, 0x63);
   \   0000014A   0x2163             MOVS     R1,#+99
   \   0000014C   0x2025             MOVS     R0,#+37
   \   0000014E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    372            LPLD_SCCB_WriteReg(0x26, 0xA5);
   \   00000152   0x21A5             MOVS     R1,#+165
   \   00000154   0x2026             MOVS     R0,#+38
   \   00000156   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    373            LPLD_SCCB_WriteReg(0x9f, 0x78);
   \   0000015A   0x2178             MOVS     R1,#+120
   \   0000015C   0x209F             MOVS     R0,#+159
   \   0000015E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    374            LPLD_SCCB_WriteReg(0xa0, 0x68);
   \   00000162   0x2168             MOVS     R1,#+104
   \   00000164   0x20A0             MOVS     R0,#+160
   \   00000166   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    375            LPLD_SCCB_WriteReg(0xa1, 0x03);
   \   0000016A   0x2103             MOVS     R1,#+3
   \   0000016C   0x20A1             MOVS     R0,#+161
   \   0000016E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    376            LPLD_SCCB_WriteReg(0xa6, 0xdf);
   \   00000172   0x21DF             MOVS     R1,#+223
   \   00000174   0x20A6             MOVS     R0,#+166
   \   00000176   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    377            LPLD_SCCB_WriteReg(0xa7, 0xdf);
   \   0000017A   0x21DF             MOVS     R1,#+223
   \   0000017C   0x20A7             MOVS     R0,#+167
   \   0000017E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    378            LPLD_SCCB_WriteReg(0xa8, 0xf0);
   \   00000182   0x21F0             MOVS     R1,#+240
   \   00000184   0x20A8             MOVS     R0,#+168
   \   00000186   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    379            LPLD_SCCB_WriteReg(0xa9, 0x90);
   \   0000018A   0x2190             MOVS     R1,#+144
   \   0000018C   0x20A9             MOVS     R0,#+169
   \   0000018E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    380            LPLD_SCCB_WriteReg(0xaa, 0x94);
   \   00000192   0x2194             MOVS     R1,#+148
   \   00000194   0x20AA             MOVS     R0,#+170
   \   00000196   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    381            LPLD_SCCB_WriteReg(0x13, 0xe5);
   \   0000019A   0x21E5             MOVS     R1,#+229
   \   0000019C   0x2013             MOVS     R0,#+19
   \   0000019E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    382            
    383            LPLD_SCCB_WriteReg(0x0e, 0x61);
   \   000001A2   0x2161             MOVS     R1,#+97
   \   000001A4   0x200E             MOVS     R0,#+14
   \   000001A6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    384            LPLD_SCCB_WriteReg(0x0f, 0x4b);
   \   000001AA   0x214B             MOVS     R1,#+75
   \   000001AC   0x200F             MOVS     R0,#+15
   \   000001AE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    385            LPLD_SCCB_WriteReg(0x16, 0x02);
   \   000001B2   0x2102             MOVS     R1,#+2
   \   000001B4   0x2016             MOVS     R0,#+22
   \   000001B6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    386            LPLD_SCCB_WriteReg(0x1e, 0x37);
   \   000001BA   0x2137             MOVS     R1,#+55
   \   000001BC   0x201E             MOVS     R0,#+30
   \   000001BE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    387            LPLD_SCCB_WriteReg(0x21, 0x02);
   \   000001C2   0x2102             MOVS     R1,#+2
   \   000001C4   0x2021             MOVS     R0,#+33
   \   000001C6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    388            LPLD_SCCB_WriteReg(0x22, 0x91);
   \   000001CA   0x2191             MOVS     R1,#+145
   \   000001CC   0x2022             MOVS     R0,#+34
   \   000001CE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    389            LPLD_SCCB_WriteReg(0x29, 0x07);
   \   000001D2   0x2107             MOVS     R1,#+7
   \   000001D4   0x2029             MOVS     R0,#+41
   \   000001D6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    390            LPLD_SCCB_WriteReg(0x33, 0x0b);
   \   000001DA   0x210B             MOVS     R1,#+11
   \   000001DC   0x2033             MOVS     R0,#+51
   \   000001DE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    391            LPLD_SCCB_WriteReg(0x35, 0x0b);
   \   000001E2   0x210B             MOVS     R1,#+11
   \   000001E4   0x2035             MOVS     R0,#+53
   \   000001E6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    392            LPLD_SCCB_WriteReg(0x37, 0x1d);
   \   000001EA   0x211D             MOVS     R1,#+29
   \   000001EC   0x2037             MOVS     R0,#+55
   \   000001EE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    393            LPLD_SCCB_WriteReg(0x38, 0x71);
   \   000001F2   0x2171             MOVS     R1,#+113
   \   000001F4   0x2038             MOVS     R0,#+56
   \   000001F6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    394            LPLD_SCCB_WriteReg(0x39, 0x2a);
   \   000001FA   0x212A             MOVS     R1,#+42
   \   000001FC   0x2039             MOVS     R0,#+57
   \   000001FE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    395            LPLD_SCCB_WriteReg(0x3c, 0x78);
   \   00000202   0x2178             MOVS     R1,#+120
   \   00000204   0x203C             MOVS     R0,#+60
   \   00000206   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    396            LPLD_SCCB_WriteReg(0x4d, 0x40);
   \   0000020A   0x2140             MOVS     R1,#+64
   \   0000020C   0x204D             MOVS     R0,#+77
   \   0000020E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    397            LPLD_SCCB_WriteReg(0x4e, 0x20);
   \   00000212   0x2120             MOVS     R1,#+32
   \   00000214   0x204E             MOVS     R0,#+78
   \   00000216   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    398            LPLD_SCCB_WriteReg(0x69, 0x00);
   \   0000021A   0x2100             MOVS     R1,#+0
   \   0000021C   0x2069             MOVS     R0,#+105
   \   0000021E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    399            LPLD_SCCB_WriteReg(0x6b, 0x60);
   \   00000222   0x2160             MOVS     R1,#+96
   \   00000224   0x206B             MOVS     R0,#+107
   \   00000226   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    400            LPLD_SCCB_WriteReg(0x74, 0x19);
   \   0000022A   0x2119             MOVS     R1,#+25
   \   0000022C   0x2074             MOVS     R0,#+116
   \   0000022E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    401            LPLD_SCCB_WriteReg(0x8d, 0x4f);
   \   00000232   0x214F             MOVS     R1,#+79
   \   00000234   0x208D             MOVS     R0,#+141
   \   00000236   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    402            LPLD_SCCB_WriteReg(0x8e, 0x00);
   \   0000023A   0x2100             MOVS     R1,#+0
   \   0000023C   0x208E             MOVS     R0,#+142
   \   0000023E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    403            LPLD_SCCB_WriteReg(0x8f, 0x00);
   \   00000242   0x2100             MOVS     R1,#+0
   \   00000244   0x208F             MOVS     R0,#+143
   \   00000246   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    404            LPLD_SCCB_WriteReg(0x90, 0x00);
   \   0000024A   0x2100             MOVS     R1,#+0
   \   0000024C   0x2090             MOVS     R0,#+144
   \   0000024E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    405            LPLD_SCCB_WriteReg(0x91, 0x00);
   \   00000252   0x2100             MOVS     R1,#+0
   \   00000254   0x2091             MOVS     R0,#+145
   \   00000256   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    406            LPLD_SCCB_WriteReg(0x92, 0x00);
   \   0000025A   0x2100             MOVS     R1,#+0
   \   0000025C   0x2092             MOVS     R0,#+146
   \   0000025E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    407            LPLD_SCCB_WriteReg(0x96, 0x00);
   \   00000262   0x2100             MOVS     R1,#+0
   \   00000264   0x2096             MOVS     R0,#+150
   \   00000266   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    408            LPLD_SCCB_WriteReg(0x9a, 0x80);
   \   0000026A   0x2180             MOVS     R1,#+128
   \   0000026C   0x209A             MOVS     R0,#+154
   \   0000026E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    409            LPLD_SCCB_WriteReg(0xb0, 0x84);
   \   00000272   0x2184             MOVS     R1,#+132
   \   00000274   0x20B0             MOVS     R0,#+176
   \   00000276   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    410            LPLD_SCCB_WriteReg(0xb1, 0x0c);
   \   0000027A   0x210C             MOVS     R1,#+12
   \   0000027C   0x20B1             MOVS     R0,#+177
   \   0000027E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    411            LPLD_SCCB_WriteReg(0xb2, 0x0e);
   \   00000282   0x210E             MOVS     R1,#+14
   \   00000284   0x20B2             MOVS     R0,#+178
   \   00000286   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    412            LPLD_SCCB_WriteReg(0xb3, 0x82);
   \   0000028A   0x2182             MOVS     R1,#+130
   \   0000028C   0x20B3             MOVS     R0,#+179
   \   0000028E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    413            LPLD_SCCB_WriteReg(0xb8, 0x0a);
   \   00000292   0x210A             MOVS     R1,#+10
   \   00000294   0x20B8             MOVS     R0,#+184
   \   00000296   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    414            
    415            
    416            
    417            LPLD_SCCB_WriteReg(0x43, 0x14);
   \   0000029A   0x2114             MOVS     R1,#+20
   \   0000029C   0x2043             MOVS     R0,#+67
   \   0000029E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    418            LPLD_SCCB_WriteReg(0x44, 0xf0);
   \   000002A2   0x21F0             MOVS     R1,#+240
   \   000002A4   0x2044             MOVS     R0,#+68
   \   000002A6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    419            LPLD_SCCB_WriteReg(0x45, 0x34);
   \   000002AA   0x2134             MOVS     R1,#+52
   \   000002AC   0x2045             MOVS     R0,#+69
   \   000002AE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    420            LPLD_SCCB_WriteReg(0x46, 0x58);
   \   000002B2   0x2158             MOVS     R1,#+88
   \   000002B4   0x2046             MOVS     R0,#+70
   \   000002B6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    421            LPLD_SCCB_WriteReg(0x47, 0x28);
   \   000002BA   0x2128             MOVS     R1,#+40
   \   000002BC   0x2047             MOVS     R0,#+71
   \   000002BE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    422            LPLD_SCCB_WriteReg(0x48, 0x3a);
   \   000002C2   0x213A             MOVS     R1,#+58
   \   000002C4   0x2048             MOVS     R0,#+72
   \   000002C6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    423            LPLD_SCCB_WriteReg(0x59, 0x88);
   \   000002CA   0x2188             MOVS     R1,#+136
   \   000002CC   0x2059             MOVS     R0,#+89
   \   000002CE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    424            LPLD_SCCB_WriteReg(0x5a, 0x88);
   \   000002D2   0x2188             MOVS     R1,#+136
   \   000002D4   0x205A             MOVS     R0,#+90
   \   000002D6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    425            LPLD_SCCB_WriteReg(0x5b, 0x44);
   \   000002DA   0x2144             MOVS     R1,#+68
   \   000002DC   0x205B             MOVS     R0,#+91
   \   000002DE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    426            LPLD_SCCB_WriteReg(0x5c, 0x67);
   \   000002E2   0x2167             MOVS     R1,#+103
   \   000002E4   0x205C             MOVS     R0,#+92
   \   000002E6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    427            LPLD_SCCB_WriteReg(0x5d, 0x49);
   \   000002EA   0x2149             MOVS     R1,#+73
   \   000002EC   0x205D             MOVS     R0,#+93
   \   000002EE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    428            LPLD_SCCB_WriteReg(0x5e, 0x0e);
   \   000002F2   0x210E             MOVS     R1,#+14
   \   000002F4   0x205E             MOVS     R0,#+94
   \   000002F6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    429            LPLD_SCCB_WriteReg(0x64, 0x04);
   \   000002FA   0x2104             MOVS     R1,#+4
   \   000002FC   0x2064             MOVS     R0,#+100
   \   000002FE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    430            LPLD_SCCB_WriteReg(0x65, 0x20);
   \   00000302   0x2120             MOVS     R1,#+32
   \   00000304   0x2065             MOVS     R0,#+101
   \   00000306   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    431            LPLD_SCCB_WriteReg(0x66, 0x05);
   \   0000030A   0x2105             MOVS     R1,#+5
   \   0000030C   0x2066             MOVS     R0,#+102
   \   0000030E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    432            LPLD_SCCB_WriteReg(0x94, 0x04);
   \   00000312   0x2104             MOVS     R1,#+4
   \   00000314   0x2094             MOVS     R0,#+148
   \   00000316   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    433            LPLD_SCCB_WriteReg(0x95, 0x08);
   \   0000031A   0x2108             MOVS     R1,#+8
   \   0000031C   0x2095             MOVS     R0,#+149
   \   0000031E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    434            LPLD_SCCB_WriteReg(0x6c, 0x0a);
   \   00000322   0x210A             MOVS     R1,#+10
   \   00000324   0x206C             MOVS     R0,#+108
   \   00000326   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    435            LPLD_SCCB_WriteReg(0x6d, 0x55);
   \   0000032A   0x2155             MOVS     R1,#+85
   \   0000032C   0x206D             MOVS     R0,#+109
   \   0000032E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    436            LPLD_SCCB_WriteReg(0x6e, 0x11);
   \   00000332   0x2111             MOVS     R1,#+17
   \   00000334   0x206E             MOVS     R0,#+110
   \   00000336   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    437            LPLD_SCCB_WriteReg(0x6f, 0x9f);
   \   0000033A   0x219F             MOVS     R1,#+159
   \   0000033C   0x206F             MOVS     R0,#+111
   \   0000033E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    438            LPLD_SCCB_WriteReg(0x6a, 0x40);
   \   00000342   0x2140             MOVS     R1,#+64
   \   00000344   0x206A             MOVS     R0,#+106
   \   00000346   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    439            LPLD_SCCB_WriteReg(0x01, 0x40);
   \   0000034A   0x2140             MOVS     R1,#+64
   \   0000034C   0x2001             MOVS     R0,#+1
   \   0000034E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    440            LPLD_SCCB_WriteReg(0x02, 0x40);
   \   00000352   0x2140             MOVS     R1,#+64
   \   00000354   0x2002             MOVS     R0,#+2
   \   00000356   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    441            LPLD_SCCB_WriteReg(0x13, 0xe7);
   \   0000035A   0x21E7             MOVS     R1,#+231
   \   0000035C   0x2013             MOVS     R0,#+19
   \   0000035E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    442            LPLD_SCCB_WriteReg(0x15, 0x00);  
   \   00000362   0x2100             MOVS     R1,#+0
   \   00000364   0x2015             MOVS     R0,#+21
   \   00000366   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    443            
    444            
    445            LPLD_SCCB_WriteReg(0x4f, 0x80);
   \   0000036A   0x2180             MOVS     R1,#+128
   \   0000036C   0x204F             MOVS     R0,#+79
   \   0000036E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    446            LPLD_SCCB_WriteReg(0x50, 0x80);
   \   00000372   0x2180             MOVS     R1,#+128
   \   00000374   0x2050             MOVS     R0,#+80
   \   00000376   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    447            LPLD_SCCB_WriteReg(0x51, 0x00);
   \   0000037A   0x2100             MOVS     R1,#+0
   \   0000037C   0x2051             MOVS     R0,#+81
   \   0000037E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    448            LPLD_SCCB_WriteReg(0x52, 0x22);
   \   00000382   0x2122             MOVS     R1,#+34
   \   00000384   0x2052             MOVS     R0,#+82
   \   00000386   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    449            LPLD_SCCB_WriteReg(0x53, 0x5e);
   \   0000038A   0x215E             MOVS     R1,#+94
   \   0000038C   0x2053             MOVS     R0,#+83
   \   0000038E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    450            LPLD_SCCB_WriteReg(0x54, 0x80);
   \   00000392   0x2180             MOVS     R1,#+128
   \   00000394   0x2054             MOVS     R0,#+84
   \   00000396   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    451            LPLD_SCCB_WriteReg(0x58, 0x9e);
   \   0000039A   0x219E             MOVS     R1,#+158
   \   0000039C   0x2058             MOVS     R0,#+88
   \   0000039E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    452            
    453            LPLD_SCCB_WriteReg(0x41, 0x08);
   \   000003A2   0x2108             MOVS     R1,#+8
   \   000003A4   0x2041             MOVS     R0,#+65
   \   000003A6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    454            LPLD_SCCB_WriteReg(0x3f, 0x00);
   \   000003AA   0x2100             MOVS     R1,#+0
   \   000003AC   0x203F             MOVS     R0,#+63
   \   000003AE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    455            LPLD_SCCB_WriteReg(0x75, 0x05);
   \   000003B2   0x2105             MOVS     R1,#+5
   \   000003B4   0x2075             MOVS     R0,#+117
   \   000003B6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    456            LPLD_SCCB_WriteReg(0x76, 0xe1);
   \   000003BA   0x21E1             MOVS     R1,#+225
   \   000003BC   0x2076             MOVS     R0,#+118
   \   000003BE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    457            LPLD_SCCB_WriteReg(0x4c, 0x00);
   \   000003C2   0x2100             MOVS     R1,#+0
   \   000003C4   0x204C             MOVS     R0,#+76
   \   000003C6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    458            LPLD_SCCB_WriteReg(0x77, 0x01);
   \   000003CA   0x2101             MOVS     R1,#+1
   \   000003CC   0x2077             MOVS     R0,#+119
   \   000003CE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    459            LPLD_SCCB_WriteReg(0x3d, 0xc2);	
   \   000003D2   0x21C2             MOVS     R1,#+194
   \   000003D4   0x203D             MOVS     R0,#+61
   \   000003D6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    460            LPLD_SCCB_WriteReg(0x4b, 0x09);
   \   000003DA   0x2109             MOVS     R1,#+9
   \   000003DC   0x204B             MOVS     R0,#+75
   \   000003DE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    461            LPLD_SCCB_WriteReg(0xc9, 0x60);
   \   000003E2   0x2160             MOVS     R1,#+96
   \   000003E4   0x20C9             MOVS     R0,#+201
   \   000003E6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    462            LPLD_SCCB_WriteReg(0x41, 0x38);
   \   000003EA   0x2138             MOVS     R1,#+56
   \   000003EC   0x2041             MOVS     R0,#+65
   \   000003EE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    463            LPLD_SCCB_WriteReg(0x56, 0x40);
   \   000003F2   0x2140             MOVS     R1,#+64
   \   000003F4   0x2056             MOVS     R0,#+86
   \   000003F6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    464            
    465            LPLD_SCCB_WriteReg(0x34, 0x11);
   \   000003FA   0x2111             MOVS     R1,#+17
   \   000003FC   0x2034             MOVS     R0,#+52
   \   000003FE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    466            LPLD_SCCB_WriteReg(0x3b, 0x02); 
   \   00000402   0x2102             MOVS     R1,#+2
   \   00000404   0x203B             MOVS     R0,#+59
   \   00000406   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    467            
    468            LPLD_SCCB_WriteReg(0xa4, 0x89);
   \   0000040A   0x2189             MOVS     R1,#+137
   \   0000040C   0x20A4             MOVS     R0,#+164
   \   0000040E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    469            LPLD_SCCB_WriteReg(0x96, 0x00);
   \   00000412   0x2100             MOVS     R1,#+0
   \   00000414   0x2096             MOVS     R0,#+150
   \   00000416   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    470            LPLD_SCCB_WriteReg(0x97, 0x30);
   \   0000041A   0x2130             MOVS     R1,#+48
   \   0000041C   0x2097             MOVS     R0,#+151
   \   0000041E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    471            LPLD_SCCB_WriteReg(0x98, 0x20);
   \   00000422   0x2120             MOVS     R1,#+32
   \   00000424   0x2098             MOVS     R0,#+152
   \   00000426   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    472            LPLD_SCCB_WriteReg(0x99, 0x30);
   \   0000042A   0x2130             MOVS     R1,#+48
   \   0000042C   0x2099             MOVS     R0,#+153
   \   0000042E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    473            LPLD_SCCB_WriteReg(0x9a, 0x84);
   \   00000432   0x2184             MOVS     R1,#+132
   \   00000434   0x209A             MOVS     R0,#+154
   \   00000436   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    474            LPLD_SCCB_WriteReg(0x9b, 0x29);
   \   0000043A   0x2129             MOVS     R1,#+41
   \   0000043C   0x209B             MOVS     R0,#+155
   \   0000043E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    475            LPLD_SCCB_WriteReg(0x9c, 0x03);
   \   00000442   0x2103             MOVS     R1,#+3
   \   00000444   0x209C             MOVS     R0,#+156
   \   00000446   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    476            LPLD_SCCB_WriteReg(0x9d, 0x4c);
   \   0000044A   0x214C             MOVS     R1,#+76
   \   0000044C   0x209D             MOVS     R0,#+157
   \   0000044E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    477            LPLD_SCCB_WriteReg(0x9e, 0x3f);
   \   00000452   0x213F             MOVS     R1,#+63
   \   00000454   0x209E             MOVS     R0,#+158
   \   00000456   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    478            LPLD_SCCB_WriteReg(0x78, 0x04);
   \   0000045A   0x2104             MOVS     R1,#+4
   \   0000045C   0x2078             MOVS     R0,#+120
   \   0000045E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    479            
    480            LPLD_SCCB_WriteReg(0x79, 0x01);
   \   00000462   0x2101             MOVS     R1,#+1
   \   00000464   0x2079             MOVS     R0,#+121
   \   00000466   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    481            LPLD_SCCB_WriteReg(0xc8, 0xf0);
   \   0000046A   0x21F0             MOVS     R1,#+240
   \   0000046C   0x20C8             MOVS     R0,#+200
   \   0000046E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    482            LPLD_SCCB_WriteReg(0x79, 0x0f);
   \   00000472   0x210F             MOVS     R1,#+15
   \   00000474   0x2079             MOVS     R0,#+121
   \   00000476   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    483            LPLD_SCCB_WriteReg(0xc8, 0x00);
   \   0000047A   0x2100             MOVS     R1,#+0
   \   0000047C   0x20C8             MOVS     R0,#+200
   \   0000047E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    484            LPLD_SCCB_WriteReg(0x79, 0x10);
   \   00000482   0x2110             MOVS     R1,#+16
   \   00000484   0x2079             MOVS     R0,#+121
   \   00000486   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    485            LPLD_SCCB_WriteReg(0xc8, 0x7e);
   \   0000048A   0x217E             MOVS     R1,#+126
   \   0000048C   0x20C8             MOVS     R0,#+200
   \   0000048E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    486            LPLD_SCCB_WriteReg(0x79, 0x0a);
   \   00000492   0x210A             MOVS     R1,#+10
   \   00000494   0x2079             MOVS     R0,#+121
   \   00000496   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    487            LPLD_SCCB_WriteReg(0xc8, 0x80);
   \   0000049A   0x2180             MOVS     R1,#+128
   \   0000049C   0x20C8             MOVS     R0,#+200
   \   0000049E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    488            LPLD_SCCB_WriteReg(0x79, 0x0b);
   \   000004A2   0x210B             MOVS     R1,#+11
   \   000004A4   0x2079             MOVS     R0,#+121
   \   000004A6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    489            LPLD_SCCB_WriteReg(0xc8, 0x01);
   \   000004AA   0x2101             MOVS     R1,#+1
   \   000004AC   0x20C8             MOVS     R0,#+200
   \   000004AE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    490            LPLD_SCCB_WriteReg(0x79, 0x0c);
   \   000004B2   0x210C             MOVS     R1,#+12
   \   000004B4   0x2079             MOVS     R0,#+121
   \   000004B6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    491            LPLD_SCCB_WriteReg(0xc8, 0x0f);
   \   000004BA   0x210F             MOVS     R1,#+15
   \   000004BC   0x20C8             MOVS     R0,#+200
   \   000004BE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    492            LPLD_SCCB_WriteReg(0x79, 0x0d);
   \   000004C2   0x210D             MOVS     R1,#+13
   \   000004C4   0x2079             MOVS     R0,#+121
   \   000004C6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    493            LPLD_SCCB_WriteReg(0xc8, 0x20);
   \   000004CA   0x2120             MOVS     R1,#+32
   \   000004CC   0x20C8             MOVS     R0,#+200
   \   000004CE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    494            LPLD_SCCB_WriteReg(0x79, 0x09);
   \   000004D2   0x2109             MOVS     R1,#+9
   \   000004D4   0x2079             MOVS     R0,#+121
   \   000004D6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    495            LPLD_SCCB_WriteReg(0xc8, 0x80);
   \   000004DA   0x2180             MOVS     R1,#+128
   \   000004DC   0x20C8             MOVS     R0,#+200
   \   000004DE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    496            LPLD_SCCB_WriteReg(0x79, 0x02);
   \   000004E2   0x2102             MOVS     R1,#+2
   \   000004E4   0x2079             MOVS     R0,#+121
   \   000004E6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    497            LPLD_SCCB_WriteReg(0xc8, 0xc0);
   \   000004EA   0x21C0             MOVS     R1,#+192
   \   000004EC   0x20C8             MOVS     R0,#+200
   \   000004EE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    498            LPLD_SCCB_WriteReg(0x79, 0x03);
   \   000004F2   0x2103             MOVS     R1,#+3
   \   000004F4   0x2079             MOVS     R0,#+121
   \   000004F6   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    499            LPLD_SCCB_WriteReg(0xc8, 0x40);
   \   000004FA   0x2140             MOVS     R1,#+64
   \   000004FC   0x20C8             MOVS     R0,#+200
   \   000004FE   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    500            LPLD_SCCB_WriteReg(0x79, 0x05);
   \   00000502   0x2105             MOVS     R1,#+5
   \   00000504   0x2079             MOVS     R0,#+121
   \   00000506   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    501            LPLD_SCCB_WriteReg(0xc8, 0x30);
   \   0000050A   0x2130             MOVS     R1,#+48
   \   0000050C   0x20C8             MOVS     R0,#+200
   \   0000050E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    502            LPLD_SCCB_WriteReg(0x79, 0x26); 
   \   00000512   0x2126             MOVS     R1,#+38
   \   00000514   0x2079             MOVS     R0,#+121
   \   00000516   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    503            LPLD_SCCB_WriteReg(0x09, 0x00);	
   \   0000051A   0x2100             MOVS     R1,#+0
   \   0000051C   0x2009             MOVS     R0,#+9
   \   0000051E   0x.... 0x....      BL       LPLD_SCCB_WriteReg
    504          }
   \   00000522   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     V_Cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     Is_DispPhoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x43FE0068         DC32     0x43fe0068

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x43FE0044         DC32     0x43fe0044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x400490A0         DC32     0x400490a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     coloer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     pta_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x00090002         DC32     0x90002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x060A4000         DC32     0x60a4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     dma_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x400FF0D1         DC32     0x400ff0d1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     Pix_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x43FE0064         DC32     0x43fe0064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x43FE004C         DC32     0x43fe004c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x4004A0A0         DC32     0x4004a0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x4000800C         DC32     0x4000800c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       0   delay
      48   dma_init
        32   -> LPLD_DMA_Init
        48   -> __aeabi_memcpy4
      24   gpio_init
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
       8   main
         8   -> LPLD_LCD_Init
         8   -> NVIC_EnableIRQ
         8   -> delay
         8   -> dma_init
         8   -> gpio_init
         8   -> ov7670_init
         8   -> ov7670_show
      16   ov7670_init
        16   -> LPLD_SCCB_Init
        16   -> LPLD_SCCB_ReadReg
        16   -> LPLD_SCCB_WriteReg
        16   -> delay
        16   -> set_ov7670reg
      16   ov7670_show
        16   -> LPLD_LCD_SetPoint
        16   -> read_fifo
       0   porta_isr
       8   portb_isr
         8   -> NVIC_DisableIRQ
      16   read_fifo
        16   -> LPLD_GPIO_Input_8b
       8   set_ov7670reg
         8   -> LPLD_SCCB_WriteReg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
       1  Is_DispPhoto
      20  NVIC_DisableIRQ
      20  NVIC_EnableIRQ
   50000  Pix_Data
       4  V_Cnt
       2  coloer
      32  delay
      76  dma_init
      44  dma_init_struct
     184  gpio_init
     114  main
      84  ov7670_init
      54  ov7670_show
      78  porta_isr
      68  portb_isr
      20  pta_init
      20  ptb_init
      20  ptd_init
      20  pte_init
      54  read_fifo
    1316  set_ov7670reg

 
 50 131 bytes in section .bss
  2 176 bytes in section .text
 
  2 176 bytes of CODE memory
 50 131 bytes of DATA memory

Errors: none
Warnings: none
